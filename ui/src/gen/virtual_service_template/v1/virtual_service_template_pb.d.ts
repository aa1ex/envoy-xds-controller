// @generated by protoc-gen-es v2.2.5 with parameter "target=dts"
// @generated from file virtual_service_template/v1/virtual_service_template.proto (package virtual_service_template.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file virtual_service_template/v1/virtual_service_template.proto.
 */
export declare const file_virtual_service_template_v1_virtual_service_template: GenFile;

/**
 * Represents a single option to be applied to a template.
 *
 * @generated from message virtual_service_template.v1.TemplateOption
 */
export declare type TemplateOption = Message<"virtual_service_template.v1.TemplateOption"> & {
  /**
   * The field name of the option.
   *
   * @generated from field: string field = 1;
   */
  field: string;

  /**
   * The modifier applied to the field.
   *
   * @generated from field: virtual_service_template.v1.TemplateOptionModifier modifier = 2;
   */
  modifier: TemplateOptionModifier;
};

/**
 * Describes the message virtual_service_template.v1.TemplateOption.
 * Use `create(TemplateOptionSchema)` to create a new message.
 */
export declare const TemplateOptionSchema: GenMessage<TemplateOption>;

/**
 * Request message for listing all virtual service templates.
 *
 * @generated from message virtual_service_template.v1.ListVirtualServiceTemplatesRequest
 */
export declare type ListVirtualServiceTemplatesRequest = Message<"virtual_service_template.v1.ListVirtualServiceTemplatesRequest"> & {
  /**
   * The access group for filtering templates.
   *
   * @generated from field: string access_group = 1;
   */
  accessGroup: string;
};

/**
 * Describes the message virtual_service_template.v1.ListVirtualServiceTemplatesRequest.
 * Use `create(ListVirtualServiceTemplatesRequestSchema)` to create a new message.
 */
export declare const ListVirtualServiceTemplatesRequestSchema: GenMessage<ListVirtualServiceTemplatesRequest>;

/**
 * Details of a virtual service template.
 *
 * @generated from message virtual_service_template.v1.VirtualServiceTemplateListItem
 */
export declare type VirtualServiceTemplateListItem = Message<"virtual_service_template.v1.VirtualServiceTemplateListItem"> & {
  /**
   * Unique identifier of the template.
   *
   * @generated from field: string uid = 1;
   */
  uid: string;

  /**
   * Name of the template.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message virtual_service_template.v1.VirtualServiceTemplateListItem.
 * Use `create(VirtualServiceTemplateListItemSchema)` to create a new message.
 */
export declare const VirtualServiceTemplateListItemSchema: GenMessage<VirtualServiceTemplateListItem>;

/**
 * Response message containing the list of virtual service templates.
 *
 * @generated from message virtual_service_template.v1.ListVirtualServiceTemplatesResponse
 */
export declare type ListVirtualServiceTemplatesResponse = Message<"virtual_service_template.v1.ListVirtualServiceTemplatesResponse"> & {
  /**
   * The list of virtual service templates.
   *
   * @generated from field: repeated virtual_service_template.v1.VirtualServiceTemplateListItem items = 1;
   */
  items: VirtualServiceTemplateListItem[];
};

/**
 * Describes the message virtual_service_template.v1.ListVirtualServiceTemplatesResponse.
 * Use `create(ListVirtualServiceTemplatesResponseSchema)` to create a new message.
 */
export declare const ListVirtualServiceTemplatesResponseSchema: GenMessage<ListVirtualServiceTemplatesResponse>;

/**
 * Request message for filling a template with specific configurations.
 *
 * @generated from message virtual_service_template.v1.FillTemplateRequest
 */
export declare type FillTemplateRequest = Message<"virtual_service_template.v1.FillTemplateRequest"> & {
  /**
   * Unique identifier of the template to fill.
   *
   * @generated from field: string template_uid = 1;
   */
  templateUid: string;

  /**
   * Unique identifier of the listener to associate with the template.
   *
   * @generated from field: string listener_uid = 2;
   */
  listenerUid: string;

  /**
   * Virtual host configuration in binary format.
   *
   * @generated from field: bytes virtual_host = 3;
   */
  virtualHost: Uint8Array;

  /**
   * Access log configuration.
   *
   * @generated from oneof virtual_service_template.v1.FillTemplateRequest.access_log_config
   */
  accessLogConfig: {
    /**
     * Unique identifier of the access log configuration.
     *
     * @generated from field: string access_log_config_uid = 4;
     */
    value: string;
    case: "accessLogConfigUid";
  } | { case: undefined; value?: undefined };

  /**
   * Additional HTTP filter unique identifiers.
   *
   * @generated from field: repeated string additional_http_filter_uids = 5;
   */
  additionalHttpFilterUids: string[];

  /**
   * Additional route unique identifiers.
   *
   * @generated from field: repeated string additional_route_uids = 6;
   */
  additionalRouteUids: string[];

  /**
   * Whether to use the remote address.
   *
   * @generated from field: optional bool use_remote_address = 7;
   */
  useRemoteAddress?: boolean;

  /**
   * Options to modify the template.
   *
   * @generated from field: repeated virtual_service_template.v1.TemplateOption template_options = 8;
   */
  templateOptions: TemplateOption[];
};

/**
 * Describes the message virtual_service_template.v1.FillTemplateRequest.
 * Use `create(FillTemplateRequestSchema)` to create a new message.
 */
export declare const FillTemplateRequestSchema: GenMessage<FillTemplateRequest>;

/**
 * Response message containing the filled template as a raw string.
 *
 * @generated from message virtual_service_template.v1.FillTemplateResponse
 */
export declare type FillTemplateResponse = Message<"virtual_service_template.v1.FillTemplateResponse"> & {
  /**
   * The raw string representation of the filled template.
   *
   * @generated from field: string raw = 1;
   */
  raw: string;
};

/**
 * Describes the message virtual_service_template.v1.FillTemplateResponse.
 * Use `create(FillTemplateResponseSchema)` to create a new message.
 */
export declare const FillTemplateResponseSchema: GenMessage<FillTemplateResponse>;

/**
 * Enum describing possible modifiers for template options.
 *
 * @generated from enum virtual_service_template.v1.TemplateOptionModifier
 */
export enum TemplateOptionModifier {
  /**
   * Unspecified modifier.
   *
   * @generated from enum value: TEMPLATE_OPTION_MODIFIER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Merge modifier for combining with existing options.
   *
   * @generated from enum value: TEMPLATE_OPTION_MODIFIER_MERGE = 1;
   */
  MERGE = 1,

  /**
   * Replace modifier to overwrite existing options.
   *
   * @generated from enum value: TEMPLATE_OPTION_MODIFIER_REPLACE = 2;
   */
  REPLACE = 2,

  /**
   * Delete modifier to remove existing options.
   *
   * @generated from enum value: TEMPLATE_OPTION_MODIFIER_DELETE = 3;
   */
  DELETE = 3,
}

/**
 * Describes the enum virtual_service_template.v1.TemplateOptionModifier.
 */
export declare const TemplateOptionModifierSchema: GenEnum<TemplateOptionModifier>;

/**
 * Service to manage virtual service templates.
 *
 * @generated from service virtual_service_template.v1.VirtualServiceTemplateStoreService
 */
export declare const VirtualServiceTemplateStoreService: GenService<{
  /**
   * Lists all virtual service templates.
   *
   * @generated from rpc virtual_service_template.v1.VirtualServiceTemplateStoreService.ListVirtualServiceTemplates
   */
  listVirtualServiceTemplates: {
    methodKind: "unary";
    input: typeof ListVirtualServiceTemplatesRequestSchema;
    output: typeof ListVirtualServiceTemplatesResponseSchema;
  },
  /**
   * Fills a template with specific configurations and returns the result.
   *
   * @generated from rpc virtual_service_template.v1.VirtualServiceTemplateStoreService.FillTemplate
   */
  fillTemplate: {
    methodKind: "unary";
    input: typeof FillTemplateRequestSchema;
    output: typeof FillTemplateResponseSchema;
  },
}>;

