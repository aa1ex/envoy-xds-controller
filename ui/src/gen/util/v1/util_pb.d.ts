// @generated by protoc-gen-es v2.2.5 with parameter "target=dts"
// @generated from file util/v1/util.proto (package util.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file util/v1/util.proto.
 */
export declare const file_util_v1_util: GenFile;

/**
 * @generated from message util.v1.VerifyDomainsRequest
 */
export declare type VerifyDomainsRequest = Message<"util.v1.VerifyDomainsRequest"> & {
  /**
   * A list of domains to verify SSL certificates for.
   *
   * @generated from field: repeated string domains = 1;
   */
  domains: string[];
};

/**
 * Describes the message util.v1.VerifyDomainsRequest.
 * Use `create(VerifyDomainsRequestSchema)` to create a new message.
 */
export declare const VerifyDomainsRequestSchema: GenMessage<VerifyDomainsRequest>;

/**
 * @generated from message util.v1.DomainVerificationResult
 */
export declare type DomainVerificationResult = Message<"util.v1.DomainVerificationResult"> & {
  /**
   * The domain being verified.
   *
   * @generated from field: string domain = 1;
   */
  domain: string;

  /**
   * Indicates if the domain has a valid SSL certificate.
   *
   * @generated from field: bool valid_certificate = 2;
   */
  validCertificate: boolean;

  /**
   * The issuer of the SSL certificate.
   *
   * @generated from field: string issuer = 3;
   */
  issuer: string;

  /**
   * The expiration timestamp of the SSL certificate.
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 4;
   */
  expiresAt?: Timestamp;

  /**
   * Indicates if the domain was matched using a wildcard certificate.
   *
   * @generated from field: bool matched_by_wildcard = 5;
   */
  matchedByWildcard: boolean;

  /**
   * Any error messages related to the domain's verification.
   *
   * @generated from field: string error = 6;
   */
  error: string;
};

/**
 * Describes the message util.v1.DomainVerificationResult.
 * Use `create(DomainVerificationResultSchema)` to create a new message.
 */
export declare const DomainVerificationResultSchema: GenMessage<DomainVerificationResult>;

/**
 * @generated from message util.v1.VerifyDomainsResponse
 */
export declare type VerifyDomainsResponse = Message<"util.v1.VerifyDomainsResponse"> & {
  /**
   * A list of the results for each domain verification.
   *
   * @generated from field: repeated util.v1.DomainVerificationResult results = 1;
   */
  results: DomainVerificationResult[];
};

/**
 * Describes the message util.v1.VerifyDomainsResponse.
 * Use `create(VerifyDomainsResponseSchema)` to create a new message.
 */
export declare const VerifyDomainsResponseSchema: GenMessage<VerifyDomainsResponse>;

/**
 * @generated from service util.v1.UtilsService
 */
export declare const UtilsService: GenService<{
  /**
   * Verifies the SSL certificates of the provided domains.
   *
   * @generated from rpc util.v1.UtilsService.VerifyDomains
   */
  verifyDomains: {
    methodKind: "unary";
    input: typeof VerifyDomainsRequestSchema;
    output: typeof VerifyDomainsResponseSchema;
  },
}>;

