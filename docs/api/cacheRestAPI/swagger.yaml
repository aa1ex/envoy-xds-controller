basePath: /
definitions:
  accesslogv3.AccessLog:
    properties:
      configType:
        description: "Custom configuration that must be set according to the access
          logger extension being instantiated.\n[#extension-category: envoy.access_loggers]\n\nTypes
          that are assignable to ConfigType:\n\n\t*AccessLog_TypedConfig"
      filter:
        allOf:
        - $ref: '#/definitions/accesslogv3.AccessLogFilter'
        description: Filter which is used to determine if the access log needs to
          be written.
      name:
        description: The name of the access log extension configuration.
        type: string
    type: object
  accesslogv3.AccessLogFilter:
    properties:
      filterSpecifier:
        description: "Types that are assignable to FilterSpecifier:\n\n\t*AccessLogFilter_StatusCodeFilter\n\t*AccessLogFilter_DurationFilter\n\t*AccessLogFilter_NotHealthCheckFilter\n\t*AccessLogFilter_TraceableFilter\n\t*AccessLogFilter_RuntimeFilter\n\t*AccessLogFilter_AndFilter\n\t*AccessLogFilter_OrFilter\n\t*AccessLogFilter_HeaderFilter\n\t*AccessLogFilter_ResponseFlagFilter\n\t*AccessLogFilter_GrpcStatusFilter\n\t*AccessLogFilter_ExtensionFilter\n\t*AccessLogFilter_MetadataFilter\n\t*AccessLogFilter_LogTypeFilter"
    type: object
  any.Any:
    properties:
      type_url:
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

            - If no scheme is provided, `https` is assumed.
            - An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            - Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
      value:
        description: Must be a valid serialized protocol buffer of the above specified
          type.
        items:
          type: integer
        type: array
    type: object
  clusterv3.CircuitBreakers:
    properties:
      per_host_thresholds:
        description: "Optional per-host limits which apply to each individual host
          in a cluster.\n\n.. note::\n\n\tcurrently only the :ref:`max_connections\n\t<envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.max_connections>`
          field is supported for per-host limits.\n\nIf multiple per-host :ref:`Thresholds<envoy_v3_api_msg_config.cluster.v3.CircuitBreakers.Thresholds>`\nare
          defined with the same :ref:`RoutingPriority<envoy_v3_api_enum_config.core.v3.RoutingPriority>`,\nthe
          first one in the list is used. If no per-host Thresholds are defined for
          a given\n:ref:`RoutingPriority<envoy_v3_api_enum_config.core.v3.RoutingPriority>`,\nthe
          cluster will not have per-host limits."
        items:
          $ref: '#/definitions/clusterv3.CircuitBreakers_Thresholds'
        type: array
      thresholds:
        description: |-
          If multiple :ref:`Thresholds<envoy_v3_api_msg_config.cluster.v3.CircuitBreakers.Thresholds>`
          are defined with the same :ref:`RoutingPriority<envoy_v3_api_enum_config.core.v3.RoutingPriority>`,
          the first one in the list is used. If no Thresholds is defined for a given
          :ref:`RoutingPriority<envoy_v3_api_enum_config.core.v3.RoutingPriority>`, the default values
          are used.
        items:
          $ref: '#/definitions/clusterv3.CircuitBreakers_Thresholds'
        type: array
    type: object
  clusterv3.CircuitBreakers_Thresholds:
    properties:
      max_connection_pools:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of connection pools per cluster that Envoy will concurrently support at
          once. If not specified, the default is unlimited. Set this for clusters which create a
          large number of connection pools. See
          :ref:`Circuit Breaking <arch_overview_circuit_break_cluster_maximum_connection_pools>` for
          more details.
      max_connections:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of connections that Envoy will make to the upstream
          cluster. If not specified, the default is 1024.
      max_pending_requests:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of pending requests that Envoy will allow to the
          upstream cluster. If not specified, the default is 1024.
          This limit is applied as a connection limit for non-HTTP traffic.
      max_requests:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of parallel requests that Envoy will make to the
          upstream cluster. If not specified, the default is 1024.
          This limit does not apply to non-HTTP traffic.
      max_retries:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of parallel retries that Envoy will allow to the
          upstream cluster. If not specified, the default is 3.
      priority:
        allOf:
        - $ref: '#/definitions/corev3.RoutingPriority'
        description: |-
          The :ref:`RoutingPriority<envoy_v3_api_enum_config.core.v3.RoutingPriority>`
          the specified CircuitBreaker settings apply to.
      retry_budget:
        allOf:
        - $ref: '#/definitions/clusterv3.CircuitBreakers_Thresholds_RetryBudget'
        description: "Specifies a limit on concurrent retries in relation to the number
          of active requests. This\nparameter is optional.\n\n.. note::\n\n\tIf this
          field is set, the retry budget will override any configured retry circuit\n\tbreaker."
      track_remaining:
        description: "If track_remaining is true, then stats will be published that
          expose\nthe number of resources remaining until the circuit breakers open.
          If\nnot specified, the default is false.\n\n.. note::\n\n\tIf a retry budget
          is used in lieu of the max_retries circuit breaker,\n\tthe remaining retry
          resources remaining will not be tracked."
        type: boolean
    type: object
  clusterv3.CircuitBreakers_Thresholds_RetryBudget:
    properties:
      budget_percent:
        allOf:
        - $ref: '#/definitions/typev3.Percent'
        description: |-
          Specifies the limit on concurrent retries as a percentage of the sum of active requests and
          active pending requests. For example, if there are 100 active requests and the
          budget_percent is set to 25, there may be 25 active retries.

          This parameter is optional. Defaults to 20%.
      min_retry_concurrency:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Specifies the minimum retry concurrency allowed for the retry budget. The limit on the
          number of active retries may never go below this number.

          This parameter is optional. Defaults to 3.
    type: object
  clusterv3.Cluster:
    properties:
      alt_stat_name:
        description: |-
          An optional alternative to the cluster name to be used for observability. This name is used
          emitting stats for the cluster and access logging the cluster name. This will appear as
          additional information in configuration dumps of a cluster's current status as
          :ref:`observability_name <envoy_v3_api_field_admin.v3.ClusterStatus.observability_name>`
          and as an additional tag "upstream_cluster.name" while tracing. Note: Any “:“ in the name
          will be converted to “_“ when emitting statistics. This should not be confused with
          :ref:`Router Filter Header <config_http_filters_router_x-envoy-upstream-alt-stat-name>`.
        type: string
      circuit_breakers:
        allOf:
        - $ref: '#/definitions/clusterv3.CircuitBreakers'
        description: Optional :ref:`circuit breaking <arch_overview_circuit_break>`
          for the cluster.
      cleanup_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The interval for removing stale hosts from a cluster type
          :ref:`ORIGINAL_DST<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.ORIGINAL_DST>`.
          Hosts are considered stale if they have not been used
          as upstream destinations during this interval. New hosts are added
          to original destination clusters on demand as new connections are
          redirected to Envoy, causing the number of hosts in the cluster to
          grow over time. Hosts that are not stale (they are actively used as
          destinations) are kept in the cluster, which allows connections to
          them remain open, saving the latency that would otherwise be spent
          on opening new connections. If this setting is not specified, the
          value defaults to 5000ms. For cluster types other than
          :ref:`ORIGINAL_DST<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.ORIGINAL_DST>`
          this setting is ignored.
      close_connections_on_host_health_failure:
        description: "If an upstream host becomes unhealthy (as determined by the
          configured health checks\nor outlier detection), immediately close all connections
          to the failed host.\n\n.. note::\n\n\tThis is currently only supported for
          connections created by tcp_proxy.\n\n.. note::\n\n\tThe current implementation
          of this feature closes all connections immediately when\n\tthe unhealthy
          status is detected. If there are a large number of connections open\n\tto
          an upstream host that becomes unhealthy, Envoy may spend a substantial amount
          of\n\ttime exclusively closing these connections, and not processing any
          other traffic."
        type: boolean
      clusterDiscoveryType:
        description: "Types that are assignable to ClusterDiscoveryType:\n\n\t*Cluster_Type\n\t*Cluster_ClusterType"
      common_http_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.HttpProtocolOptions'
        description: |-
          Additional options when handling HTTP requests upstream. These options will be applicable to
          both HTTP1 and HTTP2 requests.
          This has been deprecated in favor of
          :ref:`common_http_protocol_options <envoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.common_http_protocol_options>`
          in the :ref:`http_protocol_options <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>` message.
          common_http_protocol_options can be set via the cluster's
          :ref:`extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`.
          See :ref:`upstream_http_protocol_options
          <envoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options>`
          for example usage.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
      common_lb_config:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_CommonLbConfig'
        description: Common configuration for all load balancer implementations.
      connect_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The timeout for new network connections to hosts in the cluster.
          If not set, a default value of 5s will be used.
      connection_pool_per_downstream_connection:
        description: |-
          If “connection_pool_per_downstream_connection“ is true, the cluster will use a separate
          connection pool for every downstream connection
        type: boolean
      dns_failure_refresh_rate:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_RefreshRate'
        description: |-
          If the DNS failure refresh rate is specified and the cluster type is either
          :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`,
          or :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`,
          this is used as the cluster’s DNS refresh rate when requests are failing. If this setting is
          not specified, the failure refresh rate defaults to the DNS refresh rate. For cluster types
          other than :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>` and
          :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>` this setting is
          ignored.
      dns_lookup_family:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_DnsLookupFamily'
        description: |-
          The DNS IP address resolution policy. If this setting is not specified, the
          value defaults to
          :ref:`AUTO<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DnsLookupFamily.AUTO>`.
      dns_refresh_rate:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          If the DNS refresh rate is specified and the cluster type is either
          :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`,
          or :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`,
          this value is used as the cluster’s DNS refresh
          rate. The value configured must be at least 1ms. If this setting is not specified, the
          value defaults to 5000ms. For cluster types other than
          :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`
          and :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`
          this setting is ignored.
      dns_resolution_config:
        allOf:
        - $ref: '#/definitions/corev3.DnsResolutionConfig'
        description: |-
          DNS resolution configuration which includes the underlying dns resolver addresses and options.
          This field is deprecated in favor of
          :ref:`typed_dns_resolver_config <envoy_v3_api_field_config.cluster.v3.Cluster.typed_dns_resolver_config>`.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
      dns_resolvers:
        description: |-
          If DNS resolvers are specified and the cluster type is either
          :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`,
          or :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`,
          this value is used to specify the cluster’s dns resolvers.
          If this setting is not specified, the value defaults to the default
          resolver, which uses /etc/resolv.conf for configuration. For cluster types
          other than
          :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`
          and :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`
          this setting is ignored.
          This field is deprecated in favor of “dns_resolution_config“
          which aggregates all of the DNS resolver configuration in a single message.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
        items:
          $ref: '#/definitions/corev3.Address'
        type: array
      eds_cluster_config:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_EdsClusterConfig'
        description: Configuration to use for EDS updates for the Cluster.
      filters:
        description: |-
          An (optional) network filter chain, listed in the order the filters should be applied.
          The chain will be applied to all outgoing connections that Envoy makes to the upstream
          servers of this cluster.
        items:
          $ref: '#/definitions/clusterv3.Filter'
        type: array
      health_checks:
        description: |-
          Optional :ref:`active health checking <arch_overview_health_checking>`
          configuration for the cluster. If no
          configuration is specified no health checking will be done and all cluster
          members will be considered healthy at all times.
        items:
          $ref: '#/definitions/corev3.HealthCheck'
        type: array
      http_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.Http1ProtocolOptions'
        description: |-
          Additional options when handling HTTP1 requests.
          This has been deprecated in favor of http_protocol_options fields in the
          :ref:`http_protocol_options <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>` message.
          http_protocol_options can be set via the cluster's
          :ref:`extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`.
          See :ref:`upstream_http_protocol_options
          <envoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options>`
          for example usage.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
      http2_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.Http2ProtocolOptions'
        description: |-
          Even if default HTTP2 protocol options are desired, this field must be
          set so that Envoy will assume that the upstream supports HTTP/2 when
          making new HTTP connection pool connections. Currently, Envoy only
          supports prior knowledge for upstream connections. Even if TLS is used
          with ALPN, “http2_protocol_options“ must be specified. As an aside this allows HTTP/2
          connections to happen over plain text.
          This has been deprecated in favor of http2_protocol_options fields in the
          :ref:`http_protocol_options <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>`
          message. http2_protocol_options can be set via the cluster's
          :ref:`extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`.
          See :ref:`upstream_http_protocol_options
          <envoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options>`
          for example usage.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
      ignore_health_on_host_removal:
        description: |-
          If set to true, Envoy will ignore the health value of a host when processing its removal
          from service discovery. This means that if active health checking is used, Envoy will *not*
          wait for the endpoint to go unhealthy before removing it.
        type: boolean
      lb_policy:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_LbPolicy'
        description: |-
          The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
          when picking a host in the cluster.
      lb_subset_config:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_LbSubsetConfig'
        description: Configuration for load balancing subsetting.
      lbConfig:
        description: "Optional configuration for the load balancing algorithm selected
          by\nLbPolicy. Currently only\n:ref:`RING_HASH<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbPolicy.RING_HASH>`,\n:ref:`MAGLEV<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbPolicy.MAGLEV>`
          and\n:ref:`LEAST_REQUEST<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbPolicy.LEAST_REQUEST>`\nhas
          additional configuration options.\nSpecifying ring_hash_lb_config or maglev_lb_config
          or least_request_lb_config without setting the corresponding\nLbPolicy will
          generate an error at runtime.\n\nTypes that are assignable to LbConfig:\n\n\t*Cluster_RingHashLbConfig_\n\t*Cluster_MaglevLbConfig_\n\t*Cluster_OriginalDstLbConfig_\n\t*Cluster_LeastRequestLbConfig_\n\t*Cluster_RoundRobinLbConfig_"
      load_assignment:
        allOf:
        - $ref: '#/definitions/endpointv3.ClusterLoadAssignment'
        description: "Setting this is required for specifying members of\n:ref:`STATIC<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STATIC>`,\n:ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`\nor
          :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`
          clusters.\nThis field supersedes the “hosts“ field in the v2 API.\n\n..
          attention::\n\n\tSetting this allows non-EDS cluster types to contain embedded
          EDS equivalent\n\t:ref:`endpoint assignments<envoy_v3_api_msg_config.endpoint.v3.ClusterLoadAssignment>`."
      load_balancing_policy:
        allOf:
        - $ref: '#/definitions/clusterv3.LoadBalancingPolicy'
        description: |-
          If this field is set and is supported by the client, it will supersede the value of
          :ref:`lb_policy<envoy_v3_api_field_config.cluster.v3.Cluster.lb_policy>`.
      lrs_server:
        allOf:
        - $ref: '#/definitions/corev3.ConfigSource'
        description: |-
          [#not-implemented-hide:]
          If present, tells the client where to send load reports via LRS. If not present, the
          client will fall back to a client-side default, which may be either (a) don't send any
          load reports or (b) send load reports for all clusters to a single default server
          (which may be configured in the bootstrap file).

          Note that if multiple clusters point to the same LRS server, the client may choose to
          create a separate stream for each cluster or it may choose to coalesce the data for
          multiple clusters onto a single stream. Either way, the client must make sure to send
          the data for any given cluster on no more than one stream.

          [#next-major-version: In the v3 API, we should consider restructuring this somehow,
          maybe by allowing LRS to go on the ADS stream, or maybe by moving some of the negotiation
          from the LRS stream here.]
      max_requests_per_connection:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: "Optional maximum requests for a single upstream connection.
          This parameter\nis respected by both the HTTP/1.1 and HTTP/2 connection
          pool\nimplementations. If not specified, there is no limit. Setting this\nparameter
          to 1 will effectively disable keep alive.\n\n.. attention::\n\n\tThis field
          has been deprecated in favor of the :ref:`max_requests_per_connection <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.max_requests_per_connection>`
          field.\n\nDeprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto."
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: |-
          The Metadata field can be used to provide additional information about the
          cluster. It can be used for stats, logging, and varying filter behavior.
          Fields should use reverse DNS notation to denote which entity within Envoy
          will need the information. For instance, if the metadata is intended for
          the Router filter, the filter name should be specified as “envoy.filters.http.router“.
      name:
        description: |-
          Supplies the name of the cluster which must be unique across all clusters.
          The cluster name is used when emitting
          :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name
          <envoy_v3_api_field_config.cluster.v3.Cluster.alt_stat_name>` is not provided.
          Any “:“ in the cluster name will be converted to “_“ when emitting statistics.
        type: string
      outlier_detection:
        allOf:
        - $ref: '#/definitions/clusterv3.OutlierDetection'
        description: |-
          If specified, outlier detection will be enabled for this upstream cluster.
          Each of the configuration values can be overridden via
          :ref:`runtime values <config_cluster_manager_cluster_runtime_outlier_detection>`.
      per_connection_buffer_limit_bytes:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Soft limit on size of the cluster’s connections read and write buffers. If
          unspecified, an implementation defined default is applied (1MiB).
      preconnect_policy:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_PreconnectPolicy'
        description: Preconnect configuration for this cluster.
      protocol_selection:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_ClusterProtocolSelection'
        description: |-
          Determines how Envoy selects the protocol used to speak to upstream hosts.
          This has been deprecated in favor of setting explicit protocol selection
          in the :ref:`http_protocol_options
          <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>` message.
          http_protocol_options can be set via the cluster's
          :ref:`extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
      respect_dns_ttl:
        description: |-
          Optional configuration for setting cluster's DNS refresh rate. If the value is set to true,
          cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS
          resolution.
        type: boolean
      track_cluster_stats:
        allOf:
        - $ref: '#/definitions/clusterv3.TrackClusterStats'
        description: Configuration to track optional cluster stats.
      track_timeout_budgets:
        description: "If track_timeout_budgets is true, the :ref:`timeout budget histograms\n<config_cluster_manager_cluster_stats_timeout_budgets>`
          will be published for each\nrequest. These show what percentage of a request's
          per try and global timeout was used. A value\nof 0 would indicate that none
          of the timeout was used or that the timeout was infinite. A value\nof 100
          would indicate that the request took the entirety of the timeout given to
          it.\n\n.. attention::\n\n\tThis field has been deprecated in favor of ``timeout_budgets``,
          part of\n\t:ref:`track_cluster_stats <envoy_v3_api_field_config.cluster.v3.Cluster.track_cluster_stats>`.\n\nDeprecated:
          Marked as deprecated in envoy/config/cluster/v3/cluster.proto."
        type: boolean
      transport_socket:
        allOf:
        - $ref: '#/definitions/corev3.TransportSocket'
        description: |-
          Optional custom transport socket implementation to use for upstream connections.
          To setup TLS, set a transport socket with name “envoy.transport_sockets.tls“ and
          :ref:`UpstreamTlsContexts <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.UpstreamTlsContext>` in the “typed_config“.
          If no transport socket configuration is specified, new connections
          will be set up with plaintext.
      transport_socket_matches:
        description: "Configuration to use different transport sockets for different
          endpoints.\nThe entry of “envoy.transport_socket_match“ in the\n:ref:`LbEndpoint.Metadata
          <envoy_v3_api_field_config.endpoint.v3.LbEndpoint.metadata>`\nis used to
          match against the transport sockets as they appear in the list. The first\n:ref:`match
          <envoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch>` is used.\nFor
          example, with the following match\n\n.. code-block:: yaml\n\n\ttransport_socket_matches:\n\t-
          name: \"enableMTLS\"\n\t  match:\n\t    acceptMTLS: true\n\t  transport_socket:\n\t
          \   name: envoy.transport_sockets.tls\n\t    config: { ... } # tls socket
          configuration\n\t- name: \"defaultToPlaintext\"\n\t  match: {}\n\t  transport_socket:\n\t
          \   name: envoy.transport_sockets.raw_buffer\n\nConnections to the endpoints
          whose metadata value under “envoy.transport_socket_match“\nhaving \"acceptMTLS\"/\"true\"
          key/value pair use the \"enableMTLS\" socket configuration.\n\nIf a :ref:`socket
          match <envoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch>`
          with empty match\ncriteria is provided, that always match any endpoint.
          For example, the \"defaultToPlaintext\"\nsocket match in case above.\n\nIf
          an endpoint metadata's value under “envoy.transport_socket_match“ does not
          match any\n“TransportSocketMatch“, socket configuration fallbacks to use
          the “tls_context“ or\n“transport_socket“ specified in this cluster.\n\nThis
          field allows gradual and flexible transport socket configuration changes.\n\nThe
          metadata of endpoints in EDS can indicate transport socket capabilities.
          For example,\nan endpoint's metadata can have two key value pairs as \"acceptMTLS\":
          \"true\",\n\"acceptPlaintext\": \"true\". While some other endpoints, only
          accepting plaintext traffic\nhas \"acceptPlaintext\": \"true\" metadata
          information.\n\nThen the xDS server can configure the CDS to a client, Envoy
          A, to send mutual TLS\ntraffic for endpoints with \"acceptMTLS\": \"true\",
          by adding a corresponding\n“TransportSocketMatch“ in this field. Other client
          Envoys receive CDS without\n“transport_socket_match“ set, and still send
          plain text traffic to the same cluster.\n\nThis field can be used to specify
          custom transport socket configurations for health\nchecks by adding matching
          key/value pairs in a health check's\n:ref:`transport socket match criteria
          <envoy_v3_api_field_config.core.v3.HealthCheck.transport_socket_match_criteria>`
          field.\n\n[#comment:TODO(incfly): add a detailed architecture doc on intended
          usage.]"
        items:
          $ref: '#/definitions/clusterv3.Cluster_TransportSocketMatch'
        type: array
      typed_dns_resolver_config:
        allOf:
        - $ref: '#/definitions/corev3.TypedExtensionConfig'
        description: |-
          DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
          or any other DNS resolver types and the related parameters.
          For example, an object of
          :ref:`CaresDnsResolverConfig <envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig>`
          can be packed into this “typed_dns_resolver_config“. This configuration replaces the
          :ref:`dns_resolution_config <envoy_v3_api_field_config.cluster.v3.Cluster.dns_resolution_config>`
          configuration.
          During the transition period when both “dns_resolution_config“ and “typed_dns_resolver_config“ exists,
          when “typed_dns_resolver_config“ is in place, Envoy will use it and ignore “dns_resolution_config“.
          When “typed_dns_resolver_config“ is missing, the default behavior is in place.
          [#extension-category: envoy.network.dns_resolver]
      typed_extension_protocol_options:
        additionalProperties:
          $ref: '#/definitions/any.Any'
        description: |-
          The extension_protocol_options field is used to provide extension-specific protocol options
          for upstream connections. The key should match the extension filter name, such as
          "envoy.filters.network.thrift_proxy". See the extension's documentation for details on
          specific options.
          [#next-major-version: make this a list of typed extensions.]
        type: object
      upstream_bind_config:
        allOf:
        - $ref: '#/definitions/corev3.BindConfig'
        description: |-
          Optional configuration used to bind newly established upstream connections.
          This overrides any bind_config specified in the bootstrap proto.
          If the address and port are empty, no bind will be performed.
      upstream_config:
        allOf:
        - $ref: '#/definitions/corev3.TypedExtensionConfig'
        description: |-
          Optional customization and configuration of upstream connection pool, and upstream type.

          Currently this field only applies for HTTP traffic but is designed for eventual use for custom
          TCP upstreams.

          For HTTP traffic, Envoy will generally take downstream HTTP and send it upstream as upstream
          HTTP, using the http connection pool and the codec from “http2_protocol_options“

          For routes where CONNECT termination is configured, Envoy will take downstream CONNECT
          requests and forward the CONNECT payload upstream over raw TCP using the tcp connection pool.

          The default pool used is the generic connection pool which creates the HTTP upstream for most
          HTTP requests, and the TCP upstream if CONNECT termination is configured.

          If users desire custom connection pool or upstream behavior, for example terminating
          CONNECT only if a custom filter indicates it is appropriate, the custom factories
          can be registered and configured here.
          [#extension-category: envoy.upstreams]
      upstream_connection_options:
        allOf:
        - $ref: '#/definitions/clusterv3.UpstreamConnectionOptions'
        description: Optional options for upstream connections.
      upstream_http_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.UpstreamHttpProtocolOptions'
        description: |-
          HTTP protocol options that are applied only to upstream HTTP connections.
          These options apply to all HTTP versions.
          This has been deprecated in favor of
          :ref:`upstream_http_protocol_options <envoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options>`
          in the :ref:`http_protocol_options <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>` message.
          upstream_http_protocol_options can be set via the cluster's
          :ref:`extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`.
          See :ref:`upstream_http_protocol_options
          <envoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options>`
          for example usage.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
      use_tcp_for_dns_lookups:
        description: |-
          Always use TCP queries instead of UDP queries for DNS lookups.
          This field is deprecated in favor of “dns_resolution_config“
          which aggregates all of the DNS resolver configuration in a single message.

          Deprecated: Marked as deprecated in envoy/config/cluster/v3/cluster.proto.
        type: boolean
      wait_for_warm_on_init:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Optional configuration for having cluster readiness block on warm-up. Currently, only applicable for
          :ref:`STRICT_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS>`,
          or :ref:`LOGICAL_DNS<envoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS>`,
          or :ref:`Redis Cluster<arch_overview_redis>`.
          If true, cluster readiness blocks on warm-up. If false, the cluster will complete
          initialization whether or not warm-up has completed. Defaults to true.
    type: object
  clusterv3.Cluster_ClusterProtocolSelection:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Cluster_USE_CONFIGURED_PROTOCOL
    - Cluster_USE_DOWNSTREAM_PROTOCOL
  clusterv3.Cluster_CommonLbConfig:
    properties:
      close_connections_on_host_set_change:
        description: |-
          If set to “true“, the cluster manager will drain all existing
          connections to upstream hosts whenever hosts are added or removed from the cluster.
        type: boolean
      consistent_hashing_lb_config:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_CommonLbConfig_ConsistentHashingLbConfig'
        description: Common Configuration for all consistent hashing load balancers
          (MaglevLb, RingHashLb, etc.)
      healthy_panic_threshold:
        allOf:
        - $ref: '#/definitions/typev3.Percent'
        description: "Configures the :ref:`healthy panic threshold <arch_overview_load_balancing_panic_threshold>`.\nIf
          not specified, the default is 50%.\nTo disable panic mode, set to 0%.\n\n..
          note::\n\n\tThe specified percent will be truncated to the nearest 1%."
      ignore_new_hosts_until_first_hc:
        description: |-
          If set to true, Envoy will :ref:`exclude <arch_overview_load_balancing_excluded>` new hosts
          when computing load balancing weights until they have been health checked for the first time.
          This will have no effect unless active health checking is also configured.
        type: boolean
      localityConfigSpecifier:
        description: "Types that are assignable to LocalityConfigSpecifier:\n\n\t*Cluster_CommonLbConfig_ZoneAwareLbConfig_\n\t*Cluster_CommonLbConfig_LocalityWeightedLbConfig_"
      override_host_status:
        allOf:
        - $ref: '#/definitions/corev3.HealthStatusSet'
        description: |-
          This controls what hosts are considered valid when using
          :ref:`host overrides <arch_overview_load_balancing_override_host>`, which is used by some
          filters to modify the load balancing decision.

          If this is unset then [UNKNOWN, HEALTHY, DEGRADED] will be applied by default. If this is
          set with an empty set of statuses then host overrides will be ignored by the load balancing.
      update_merge_window:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          If set, all health check/weight/metadata updates that happen within this duration will be
          merged and delivered in one shot when the duration expires. The start of the duration is when
          the first update happens. This is useful for big clusters, with potentially noisy deploys
          that might trigger excessive CPU usage due to a constant stream of healthcheck state changes
          or metadata updates. The first set of updates to be seen apply immediately (e.g.: a new
          cluster). Please always keep in mind that the use of sandbox technologies may change this
          behavior.

          If this is not set, we default to a merge window of 1000ms. To disable it, set the merge
          window to 0.

          Note: merging does not apply to cluster membership changes (e.g.: adds/removes); this is
          because merging those updates isn't currently safe. See
          https://github.com/envoyproxy/envoy/pull/3941.
    type: object
  clusterv3.Cluster_CommonLbConfig_ConsistentHashingLbConfig:
    properties:
      hash_balance_factor:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
          no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
          If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
          Minimum is 100.

          Applies to both Ring Hash and Maglev load balancers.

          This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
          “hash_balance_factor“, requests to any upstream host are capped at “hash_balance_factor/100“ times the average number of requests
          across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
          is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
          the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
          cascading overflow effect when choosing the next host in the ring/table).

          If weights are specified on the hosts, they are respected.

          This is an O(N) algorithm, unlike other load balancers. Using a lower “hash_balance_factor“ results in more hosts
          being probed, so use a higher value if you require better performance.
      use_hostname_for_hashing:
        description: |-
          If set to “true“, the cluster will use hostname instead of the resolved
          address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
        type: boolean
    type: object
  clusterv3.Cluster_DnsLookupFamily:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - Cluster_AUTO
    - Cluster_V4_ONLY
    - Cluster_V6_ONLY
    - Cluster_V4_PREFERRED
    - Cluster_ALL
  clusterv3.Cluster_EdsClusterConfig:
    properties:
      eds_config:
        allOf:
        - $ref: '#/definitions/corev3.ConfigSource'
        description: Configuration for the source of EDS updates for this Cluster.
      service_name:
        description: |-
          Optional alternative to cluster name to present to EDS. This does not
          have the same restrictions as cluster name, i.e. it may be arbitrary
          length. This may be a xdstp:// URL.
        type: string
    type: object
  clusterv3.Cluster_LbPolicy:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - Cluster_ROUND_ROBIN
    - Cluster_LEAST_REQUEST
    - Cluster_RING_HASH
    - Cluster_RANDOM
    - Cluster_MAGLEV
    - Cluster_CLUSTER_PROVIDED
    - Cluster_LOAD_BALANCING_POLICY_CONFIG
  clusterv3.Cluster_LbSubsetConfig:
    properties:
      default_subset:
        allOf:
        - $ref: '#/definitions/github_com_golang_protobuf_ptypes_struct.Struct'
        description: |-
          Specifies the default subset of endpoints used during fallback if
          fallback_policy is
          :ref:`DEFAULT_SUBSET<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET>`.
          Each field in default_subset is
          compared to the matching LbEndpoint.Metadata under the “envoy.lb“
          namespace. It is valid for no hosts to match, in which case the behavior
          is the same as a fallback_policy of
          :ref:`NO_FALLBACK<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
      fallback_policy:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy'
        description: |-
          The behavior used when no endpoint subset matches the selected route's
          metadata. The value defaults to
          :ref:`NO_FALLBACK<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
      list_as_any:
        description: |-
          If true, metadata specified for a metadata key will be matched against the corresponding
          endpoint metadata if the endpoint metadata matches the value exactly OR it is a list value
          and any of the elements in the list matches the criteria.
        type: boolean
      locality_weight_aware:
        description: |-
          If true, routing to subsets will take into account the localities and locality weights of the
          endpoints when making the routing decision.

          There are some potential pitfalls associated with enabling this feature, as the resulting
          traffic split after applying both a subset match and locality weights might be undesirable.

          Consider for example a situation in which you have 50/50 split across two localities X/Y
          which have 100 hosts each without subsetting. If the subset LB results in X having only 1
          host selected but Y having 100, then a lot more load is being dumped on the single host in X
          than originally anticipated in the load balancing assignment delivered via EDS.
        type: boolean
      metadata_fallback_policy:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_LbSubsetConfig_LbSubsetMetadataFallbackPolicy'
        description: |-
          Fallback mechanism that allows to try different route metadata until a host is found.
          If load balancing process, including all its mechanisms (like
          :ref:`fallback_policy<envoy_v3_api_field_config.cluster.v3.Cluster.LbSubsetConfig.fallback_policy>`)
          fails to select a host, this policy decides if and how the process is repeated using another metadata.

          The value defaults to
          :ref:`METADATA_NO_FALLBACK<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetMetadataFallbackPolicy.METADATA_NO_FALLBACK>`.
      panic_mode_any:
        description: |-
          If true, when a fallback policy is configured and its corresponding subset fails to find
          a host this will cause any host to be selected instead.

          This is useful when using the default subset as the fallback policy, given the default
          subset might become empty. With this option enabled, if that happens the LB will attempt
          to select a host from the entire cluster.
        type: boolean
      scale_locality_weight:
        description: |-
          When used with locality_weight_aware, scales the weight of each locality by the ratio
          of hosts in the subset vs hosts in the original subset. This aims to even out the load
          going to an individual locality if said locality is disproportionately affected by the
          subset predicate.
        type: boolean
      subset_selectors:
        description: "For each entry, LbEndpoint.Metadata's\n“envoy.lb“ namespace
          is traversed and a subset is created for each unique\ncombination of key
          and value. For example:\n\n.. code-block:: json\n\n\t{ \"subset_selectors\":
          [\n\t    { \"keys\": [ \"version\" ] },\n\t    { \"keys\": [ \"stage\",
          \"hardware_type\" ] }\n\t]}\n\nA subset is matched when the metadata from
          the selected route and\nweighted cluster contains the same keys and values
          as the subset's\nmetadata. The same host may appear in multiple subsets."
        items:
          $ref: '#/definitions/clusterv3.Cluster_LbSubsetConfig_LbSubsetSelector'
        type: array
    type: object
  clusterv3.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Cluster_LbSubsetConfig_NO_FALLBACK
    - Cluster_LbSubsetConfig_ANY_ENDPOINT
    - Cluster_LbSubsetConfig_DEFAULT_SUBSET
  clusterv3.Cluster_LbSubsetConfig_LbSubsetMetadataFallbackPolicy:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Cluster_LbSubsetConfig_METADATA_NO_FALLBACK
    - Cluster_LbSubsetConfig_FALLBACK_LIST
  clusterv3.Cluster_LbSubsetConfig_LbSubsetSelector:
    properties:
      fallback_keys_subset:
        description: |-
          Subset of
          :ref:`keys<envoy_v3_api_field_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.keys>` used by
          :ref:`KEYS_SUBSET<envoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy.KEYS_SUBSET>`
          fallback policy.
          It has to be a non empty list if KEYS_SUBSET fallback policy is selected.
          For any other fallback policy the parameter is not used and should not be set.
          Only values also present in
          :ref:`keys<envoy_v3_api_field_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.keys>` are allowed, but
          “fallback_keys_subset“ cannot be equal to “keys“.
        items:
          type: string
        type: array
      fallback_policy:
        allOf:
        - $ref: '#/definitions/clusterv3.Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy'
        description: |-
          The behavior used when no endpoint subset matches the selected route's
          metadata.
      keys:
        description: List of keys to match with the weighted cluster metadata.
        items:
          type: string
        type: array
      single_host_per_subset:
        description: |-
          Selects a mode of operation in which each subset has only one host. This mode uses the same rules for
          choosing a host, but updating hosts is faster, especially for large numbers of hosts.

          If a match is found to a host, that host will be used regardless of priority levels.

          When this mode is enabled, configurations that contain more than one host with the same metadata value for the single key in “keys“
          will use only one of the hosts with the given key; no requests will be routed to the others. The cluster gauge
          :ref:`lb_subsets_single_host_per_subset_duplicate<config_cluster_manager_cluster_stats_subset_lb>` indicates how many duplicates are
          present in the current configuration.
        type: boolean
    type: object
  clusterv3.Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - Cluster_LbSubsetConfig_LbSubsetSelector_NOT_DEFINED
    - Cluster_LbSubsetConfig_LbSubsetSelector_NO_FALLBACK
    - Cluster_LbSubsetConfig_LbSubsetSelector_ANY_ENDPOINT
    - Cluster_LbSubsetConfig_LbSubsetSelector_DEFAULT_SUBSET
    - Cluster_LbSubsetConfig_LbSubsetSelector_KEYS_SUBSET
  clusterv3.Cluster_PreconnectPolicy:
    properties:
      per_upstream_preconnect_ratio:
        allOf:
        - $ref: '#/definitions/wrappers.DoubleValue'
        description: |-
          Indicates how many streams (rounded up) can be anticipated per-upstream for each
          incoming stream. This is useful for high-QPS or latency-sensitive services. Preconnecting
          will only be done if the upstream is healthy and the cluster has traffic.

          For example if this is 2, for an incoming HTTP/1.1 stream, 2 connections will be
          established, one for the new incoming stream, and one for a presumed follow-up stream. For
          HTTP/2, only one connection would be established by default as one connection can
          serve both the original and presumed follow-up stream.

          In steady state for non-multiplexed connections a value of 1.5 would mean if there were 100
          active streams, there would be 100 connections in use, and 50 connections preconnected.
          This might be a useful value for something like short lived single-use connections,
          for example proxying HTTP/1.1 if keep-alive were false and each stream resulted in connection
          termination. It would likely be overkill for long lived connections, such as TCP proxying SMTP
          or regular HTTP/1.1 with keep-alive. For long lived traffic, a value of 1.05 would be more
          reasonable, where for every 100 connections, 5 preconnected connections would be in the queue
          in case of unexpected disconnects where the connection could not be reused.

          If this value is not set, or set explicitly to one, Envoy will fetch as many connections
          as needed to serve streams in flight. This means in steady state if a connection is torn down,
          a subsequent streams will pay an upstream-rtt latency penalty waiting for a new connection.

          This is limited somewhat arbitrarily to 3 because preconnecting too aggressively can
          harm latency more than the preconnecting helps.
      predictive_preconnect_ratio:
        allOf:
        - $ref: '#/definitions/wrappers.DoubleValue'
        description: |-
          Indicates how many streams (rounded up) can be anticipated across a cluster for each
          stream, useful for low QPS services. This is currently supported for a subset of
          deterministic non-hash-based load-balancing algorithms (weighted round robin, random).
          Unlike “per_upstream_preconnect_ratio“ this preconnects across the upstream instances in a
          cluster, doing best effort predictions of what upstream would be picked next and
          pre-establishing a connection.

          Preconnecting will be limited to one preconnect per configured upstream in the cluster and will
          only be done if there are healthy upstreams and the cluster has traffic.

          For example if preconnecting is set to 2 for a round robin HTTP/2 cluster, on the first
          incoming stream, 2 connections will be preconnected - one to the first upstream for this
          cluster, one to the second on the assumption there will be a follow-up stream.

          If this value is not set, or set explicitly to one, Envoy will fetch as many connections
          as needed to serve streams in flight, so during warm up and in steady state if a connection
          is closed (and per_upstream_preconnect_ratio is not set), there will be a latency hit for
          connection establishment.

          If both this and preconnect_ratio are set, Envoy will make sure both predicted needs are met,
          basically preconnecting max(predictive-preconnect, per-upstream-preconnect), for each
          upstream.
    type: object
  clusterv3.Cluster_RefreshRate:
    properties:
      base_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Specifies the base interval between refreshes. This parameter is required and must be greater
          than zero and less than
          :ref:`max_interval <envoy_v3_api_field_config.cluster.v3.Cluster.RefreshRate.max_interval>`.
      max_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Specifies the maximum interval between refreshes. This parameter is optional, but must be
          greater than or equal to the
          :ref:`base_interval <envoy_v3_api_field_config.cluster.v3.Cluster.RefreshRate.base_interval>`  if set. The default
          is 10 times the :ref:`base_interval <envoy_v3_api_field_config.cluster.v3.Cluster.RefreshRate.base_interval>`.
    type: object
  clusterv3.Cluster_TransportSocketMatch:
    properties:
      match:
        allOf:
        - $ref: '#/definitions/github_com_golang_protobuf_ptypes_struct.Struct'
        description: |-
          Optional endpoint metadata match criteria.
          The connection to the endpoint with metadata matching what is set in this field
          will use the transport socket configuration specified here.
          The endpoint's metadata entry in “envoy.transport_socket_match“ is used to match
          against the values specified in this field.
      name:
        description: The name of the match, used in stats generation.
        type: string
      transport_socket:
        allOf:
        - $ref: '#/definitions/corev3.TransportSocket'
        description: |-
          The configuration of the transport socket.
          [#extension-category: envoy.transport_sockets.upstream]
    type: object
  clusterv3.Filter:
    properties:
      config_discovery:
        allOf:
        - $ref: '#/definitions/corev3.ExtensionConfigSource'
        description: |-
          Configuration source specifier for an extension configuration discovery
          service. In case of a failure and without the default configuration, the
          listener closes the connections.
          Only one of typed_config or config_discovery can be used.
      name:
        description: The name of the filter configuration.
        type: string
      typed_config:
        allOf:
        - $ref: '#/definitions/any.Any'
        description: |-
          Filter specific configuration which depends on the filter being
          instantiated. See the supported filters for further documentation.
          Note that Envoy's :ref:`downstream network
          filters <config_network_filters>` are not valid upstream network filters.
          Only one of typed_config or config_discovery can be used.
    type: object
  clusterv3.LoadBalancingPolicy:
    properties:
      policies:
        description: |-
          Each client will iterate over the list in order and stop at the first policy that it
          supports. This provides a mechanism for starting to use new LB policies that are not yet
          supported by all clients.
        items:
          $ref: '#/definitions/clusterv3.LoadBalancingPolicy_Policy'
        type: array
    type: object
  clusterv3.LoadBalancingPolicy_Policy:
    properties:
      typed_extension_config:
        allOf:
        - $ref: '#/definitions/corev3.TypedExtensionConfig'
        description: '[#extension-category: envoy.load_balancing_policies]'
    type: object
  clusterv3.OutlierDetection:
    properties:
      base_ejection_time:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The base time that a host is ejected for. The real time is equal to the
          base time multiplied by the number of times the host has been ejected and is
          capped by :ref:`max_ejection_time<envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_time>`.
          Defaults to 30000ms or 30s.
      consecutive_5xx:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of consecutive server-side error responses (for HTTP traffic,
          5xx responses; for TCP traffic, connection failures; for Redis, failure to
          respond PONG; etc.) before a consecutive 5xx ejection occurs. Defaults to 5.
      consecutive_gateway_failure:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of consecutive gateway failures (502, 503, 504 status codes)
          before a consecutive gateway failure ejection occurs. Defaults to 5.
      consecutive_local_origin_failure:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of consecutive locally originated failures before ejection
          occurs. Defaults to 5. Parameter takes effect only when
          :ref:`split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
          is set to true.
      enforcing_consecutive_5xx:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status
          is detected through consecutive 5xx. This setting can be used to disable
          ejection or to ramp it up slowly. Defaults to 100.
      enforcing_consecutive_gateway_failure:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status
          is detected through consecutive gateway failures. This setting can be
          used to disable ejection or to ramp it up slowly. Defaults to 0.
      enforcing_consecutive_local_origin_failure:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status
          is detected through consecutive locally originated failures. This setting can be
          used to disable ejection or to ramp it up slowly. Defaults to 100.
          Parameter takes effect only when
          :ref:`split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
          is set to true.
      enforcing_failure_percentage:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status is detected through
          failure percentage statistics. This setting can be used to disable ejection or to ramp it up
          slowly. Defaults to 0.

          [#next-major-version: setting this without setting failure_percentage_threshold should be
          invalid in v4.]
      enforcing_failure_percentage_local_origin:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status is detected through
          local-origin failure percentage statistics. This setting can be used to disable ejection or to
          ramp it up slowly. Defaults to 0.
      enforcing_local_origin_success_rate:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status
          is detected through success rate statistics for locally originated errors.
          This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
          Parameter takes effect only when
          :ref:`split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
          is set to true.
      enforcing_success_rate:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The % chance that a host will be actually ejected when an outlier status
          is detected through success rate statistics. This setting can be used to
          disable ejection or to ramp it up slowly. Defaults to 100.
      failure_percentage_minimum_hosts:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The minimum number of hosts in a cluster in order to perform failure percentage-based ejection.
          If the total number of hosts in the cluster is less than this value, failure percentage-based
          ejection will not be performed. Defaults to 5.
      failure_percentage_request_volume:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The minimum number of total requests that must be collected in one interval (as defined by the
          interval duration above) to perform failure percentage-based ejection for this host. If the
          volume is lower than this setting, failure percentage-based ejection will not be performed for
          this host. Defaults to 50.
      failure_percentage_threshold:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The failure percentage to use when determining failure percentage-based outlier detection. If
          the failure percentage of a given host is greater than or equal to this value, it will be
          ejected. Defaults to 85.
      interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The time interval between ejection analysis sweeps. This can result in
          both new ejections as well as hosts being returned to service. Defaults
          to 10000ms or 10s.
      max_ejection_percent:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum % of an upstream cluster that can be ejected due to outlier
          detection. Defaults to 10% but will eject at least one host regardless of the value.
      max_ejection_time:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The maximum time that a host is ejected for. See :ref:`base_ejection_time<envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`
          for more information. If not specified, the default value (300000ms or 300s) or
          :ref:`base_ejection_time<envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>` value is applied, whatever is larger.
      max_ejection_time_jitter:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The maximum amount of jitter to add to the ejection time, in order to prevent
          a 'thundering herd' effect where all proxies try to reconnect to host at the same time.
          See :ref:`max_ejection_time_jitter<envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`
          Defaults to 0s.
      split_external_local_origin_errors:
        description: |-
          Determines whether to distinguish local origin failures from external errors. If set to true
          the following configuration parameters are taken into account:
          :ref:`consecutive_local_origin_failure<envoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_local_origin_failure>`,
          :ref:`enforcing_consecutive_local_origin_failure<envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_local_origin_failure>`
          and
          :ref:`enforcing_local_origin_success_rate<envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_local_origin_success_rate>`.
          Defaults to false.
        type: boolean
      success_rate_minimum_hosts:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of hosts in a cluster that must have enough request volume to
          detect success rate outliers. If the number of hosts is less than this
          setting, outlier detection via success rate statistics is not performed
          for any host in the cluster. Defaults to 5.
      success_rate_request_volume:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The minimum number of total requests that must be collected in one
          interval (as defined by the interval duration above) to include this host
          in success rate based outlier detection. If the volume is lower than this
          setting, outlier detection via success rate statistics is not performed
          for that host. Defaults to 100.
      success_rate_stdev_factor:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          This factor is used to determine the ejection threshold for success rate
          outlier ejection. The ejection threshold is the difference between the
          mean success rate, and the product of this factor and the standard
          deviation of the mean success rate: mean - (stdev *
          success_rate_stdev_factor). This factor is divided by a thousand to get a
          double. That is, if the desired factor is 1.9, the runtime value should
          be 1900. Defaults to 1900.
      successful_active_health_check_uneject_host:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          If active health checking is enabled and a host is ejected by outlier detection, a successful active health check
          unejects the host by default and considers it as healthy. Unejection also clears all the outlier detection counters.
          To change this default behavior set this config to “false“ where active health checking will not uneject the host.
          Defaults to true.
    type: object
  clusterv3.TrackClusterStats:
    properties:
      per_endpoint_stats:
        description: |-
          If true, some stats will be emitted per-endpoint, similar to the stats in admin “/clusters“
          output.

          This does not currently output correct stats during a hot-restart.

          This is not currently implemented by all stat sinks.

          These stats do not honor filtering or tag extraction rules in :ref:`StatsConfig
          <envoy_v3_api_msg_config.metrics.v3.StatsConfig>` (but fixed-value tags are supported). Admin
          endpoint filtering is supported.

          This may not be used at the same time as
          :ref:`load_stats_config <envoy_v3_api_field_config.bootstrap.v3.ClusterManager.load_stats_config>`.
        type: boolean
      request_response_sizes:
        description: |-
          If request_response_sizes is true, then the :ref:`histograms
          <config_cluster_manager_cluster_stats_request_response_sizes>`  tracking header and body sizes
          of requests and responses will be published.
        type: boolean
      timeout_budgets:
        description: |-
          If timeout_budgets is true, the :ref:`timeout budget histograms
          <config_cluster_manager_cluster_stats_timeout_budgets>` will be published for each
          request. These show what percentage of a request's per try and global timeout was used. A value
          of 0 would indicate that none of the timeout was used or that the timeout was infinite. A value
          of 100 would indicate that the request took the entirety of the timeout given to it.
        type: boolean
    type: object
  clusterv3.UpstreamConnectionOptions:
    properties:
      set_local_interface_name_on_upstream_connections:
        description: |-
          If enabled, associates the interface name of the local address with the upstream connection.
          This can be used by extensions during processing of requests. The association mechanism is
          implementation specific. Defaults to false due to performance concerns.
        type: boolean
      tcp_keepalive:
        allOf:
        - $ref: '#/definitions/corev3.TcpKeepalive'
        description: If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
    type: object
  corev3.Address:
    properties:
      address:
        description: "Types that are assignable to Address:\n\n\t*Address_SocketAddress\n\t*Address_Pipe\n\t*Address_EnvoyInternalAddress"
    type: object
  corev3.ApiVersion:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - ApiVersion_AUTO
    - ApiVersion_V2
    - ApiVersion_V3
  corev3.BindConfig:
    properties:
      additional_source_addresses:
        description: |-
          Deprecated by
          :ref:`extra_source_addresses <envoy_v3_api_field_config.core.v3.BindConfig.extra_source_addresses>`

          Deprecated: Marked as deprecated in envoy/config/core/v3/address.proto.
        items:
          $ref: '#/definitions/corev3.SocketAddress'
        type: array
      extra_source_addresses:
        description: |-
          Extra source addresses appended to the address specified in the “source_address“
          field. This enables to specify multiple source addresses.
          The source address selection is determined by :ref:`local_address_selector
          <envoy_v3_api_field_config.core.v3.BindConfig.local_address_selector>`.
        items:
          $ref: '#/definitions/corev3.ExtraSourceAddress'
        type: array
      freebind:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether to set the “IP_FREEBIND“ option when creating the socket. When this
          flag is set to true, allows the :ref:`source_address
          <envoy_v3_api_field_config.core.v3.BindConfig.source_address>` to be an IP address
          that is not configured on the system running Envoy. When this flag is set
          to false, the option “IP_FREEBIND“ is disabled on the socket. When this
          flag is not set (default), the socket is not modified, i.e. the option is
          neither enabled nor disabled.
      local_address_selector:
        allOf:
        - $ref: '#/definitions/corev3.TypedExtensionConfig'
        description: |-
          Custom local address selector to override the default (i.e.
          :ref:`DefaultLocalAddressSelector
          <envoy_v3_api_msg_config.upstream.local_address_selector.v3.DefaultLocalAddressSelector>`).
          [#extension-category: envoy.upstream.local_address_selector]
      socket_options:
        description: |-
          Additional socket options that may not be present in Envoy source code or
          precompiled binaries.
        items:
          $ref: '#/definitions/corev3.SocketOption'
        type: array
      source_address:
        allOf:
        - $ref: '#/definitions/corev3.SocketAddress'
        description: The address to bind to when creating a socket.
    type: object
  corev3.ConfigSource:
    properties:
      authorities:
        description: |-
          Authorities that this config source may be used for. An authority specified in a xdstp:// URL
          is resolved to a “ConfigSource“ prior to configuration fetch. This field provides the
          association between authority name and configuration source.
          [#not-implemented-hide:]
        items:
          $ref: '#/definitions/v3.Authority'
        type: array
      configSourceSpecifier:
        description: "Types that are assignable to ConfigSourceSpecifier:\n\n\t*ConfigSource_Path\n\t*ConfigSource_PathConfigSource\n\t*ConfigSource_ApiConfigSource\n\t*ConfigSource_Ads\n\t*ConfigSource_Self"
      initial_fetch_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          When this timeout is specified, Envoy will wait no longer than the specified time for first
          config response on this xDS subscription during the :ref:`initialization process
          <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next
          initialization phase, even if the first config is not delivered yet. The timer is activated
          when the xDS API subscription starts, and is disarmed on first config update or on error. 0
          means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
          timeout applies). The default is 15s.
      resource_api_version:
        allOf:
        - $ref: '#/definitions/corev3.ApiVersion'
        description: |-
          API version for xDS resources. This implies the type URLs that the client
          will request for resources and the resource type that the client will in
          turn expect to be delivered.
    type: object
  corev3.DataSource:
    properties:
      specifier:
        description: "Types that are assignable to Specifier:\n\n\t*DataSource_Filename\n\t*DataSource_InlineBytes\n\t*DataSource_InlineString\n\t*DataSource_EnvironmentVariable"
    type: object
  corev3.DnsResolutionConfig:
    properties:
      dns_resolver_options:
        allOf:
        - $ref: '#/definitions/corev3.DnsResolverOptions'
        description: Configuration of DNS resolver option flags which control the
          behavior of the DNS resolver.
      resolvers:
        description: |-
          A list of dns resolver addresses. If specified, the DNS client library will perform resolution
          via the underlying DNS resolvers. Otherwise, the default system resolvers
          (e.g., /etc/resolv.conf) will be used.
        items:
          $ref: '#/definitions/corev3.Address'
        type: array
    type: object
  corev3.DnsResolverOptions:
    properties:
      no_default_search_domain:
        description: Do not use the default search domains; only query hostnames as-is
          or as aliases.
        type: boolean
      use_tcp_for_dns_lookups:
        description: Use TCP for all DNS queries instead of the default protocol UDP.
        type: boolean
    type: object
  corev3.EventServiceConfig:
    properties:
      configSourceSpecifier:
        description: "Types that are assignable to ConfigSourceSpecifier:\n\n\t*EventServiceConfig_GrpcService"
    type: object
  corev3.ExtensionConfigSource:
    properties:
      apply_default_config_without_warming:
        description: |-
          Use the default config as the initial configuration without warming and
          waiting for the first discovery response. Requires the default configuration
          to be supplied.
        type: boolean
      config_source:
        $ref: '#/definitions/corev3.ConfigSource'
      default_config:
        allOf:
        - $ref: '#/definitions/any.Any'
        description: |-
          Optional default configuration to use as the initial configuration if
          there is a failure to receive the initial extension configuration or if
          “apply_default_config_without_warming“ flag is set.
      type_urls:
        description: |-
          A set of permitted extension type URLs. Extension configuration updates are rejected
          if they do not match any type URL in the set.
        items:
          type: string
        type: array
    type: object
  corev3.ExtraSourceAddress:
    properties:
      address:
        allOf:
        - $ref: '#/definitions/corev3.SocketAddress'
        description: The additional address to bind.
      socket_options:
        allOf:
        - $ref: '#/definitions/corev3.SocketOptionsOverride'
        description: |-
          Additional socket options that may not be present in Envoy source code or
          precompiled binaries. If specified, this will override the
          :ref:`socket_options <envoy_v3_api_field_config.core.v3.BindConfig.socket_options>`
          in the BindConfig. If specified with no
          :ref:`socket_options <envoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options>`
          or an empty list of :ref:`socket_options <envoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options>`,
          it means no socket option will apply.
    type: object
  corev3.HeaderValue:
    properties:
      key:
        description: Header name.
        type: string
      raw_value:
        description: |-
          Header value is encoded as bytes which can support non-utf8 characters.
          Only one of “value“ or “raw_value“ can be set.
        items:
          type: integer
        type: array
      value:
        description: |-
          Header value.

          The same :ref:`format specifier <config_access_log_format>` as used for
          :ref:`HTTP access logging <config_access_log>` applies here, however
          unknown header values are replaced with the empty string instead of “-“.
          Header value is encoded as string. This does not work for non-utf8 characters.
          Only one of “value“ or “raw_value“ can be set.
        type: string
    type: object
  corev3.HeaderValueOption:
    properties:
      append:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: "Should the value be appended? If true (default), the value is
          appended to\nexisting values. Otherwise it replaces any existing values.\nThis
          field is deprecated and please use\n:ref:`append_action <envoy_v3_api_field_config.core.v3.HeaderValueOption.append_action>`
          as replacement.\n\n.. note::\n\n\tThe :ref:`external authorization service
          <envoy_v3_api_msg_service.auth.v3.CheckResponse>` and\n\t:ref:`external
          processor service <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>`
          have\n\tdefault value (``false``) for this field.\n\nDeprecated: Marked
          as deprecated in envoy/config/core/v3/base.proto."
      append_action:
        allOf:
        - $ref: '#/definitions/corev3.HeaderValueOption_HeaderAppendAction'
        description: |-
          Describes the action taken to append/overwrite the given value for an existing header
          or to only add this header if it's absent.
          Value defaults to :ref:`APPEND_IF_EXISTS_OR_ADD
          <envoy_v3_api_enum_value_config.core.v3.HeaderValueOption.HeaderAppendAction.APPEND_IF_EXISTS_OR_ADD>`.
      header:
        allOf:
        - $ref: '#/definitions/corev3.HeaderValue'
        description: Header name/value pair that this option applies to.
      keep_empty_value:
        description: |-
          Is the header value allowed to be empty? If false (default), custom headers with empty values are dropped,
          otherwise they are added.
        type: boolean
    type: object
  corev3.HeaderValueOption_HeaderAppendAction:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - HeaderValueOption_APPEND_IF_EXISTS_OR_ADD
    - HeaderValueOption_ADD_IF_ABSENT
    - HeaderValueOption_OVERWRITE_IF_EXISTS_OR_ADD
    - HeaderValueOption_OVERWRITE_IF_EXISTS
  corev3.HealthCheck:
    properties:
      alt_port:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: '[#not-implemented-hide:] Non-serving port for health checking.'
      always_log_health_check_failures:
        description: |-
          If set to true, health check failure events will always be logged. If set to false, only the
          initial health check failure event will be logged.
          The default value is false.
        type: boolean
      event_log_path:
        description: |-
          .. attention::
          This field is deprecated in favor of the extension
          :ref:`event_logger <envoy_v3_api_field_config.core.v3.HealthCheck.event_logger>` and
          :ref:`event_log_path <envoy_v3_api_field_extensions.health_check.event_sinks.file.v3.HealthCheckEventFileSink.event_log_path>`
          in the file sink extension.

          Specifies the path to the :ref:`health check event log <arch_overview_health_check_logging>`.

          Deprecated: Marked as deprecated in envoy/config/core/v3/health_check.proto.
        type: string
      event_logger:
        description: |-
          A list of event log sinks to process the health check event.
          [#extension-category: envoy.health_check.event_sinks]
        items:
          $ref: '#/definitions/corev3.TypedExtensionConfig'
        type: array
      event_service:
        allOf:
        - $ref: '#/definitions/corev3.EventServiceConfig'
        description: |-
          [#not-implemented-hide:]
          The gRPC service for the health check event service.
          If empty, health check events won't be sent to a remote endpoint.
      healthChecker:
        description: "Types that are assignable to HealthChecker:\n\n\t*HealthCheck_HttpHealthCheck_\n\t*HealthCheck_TcpHealthCheck_\n\t*HealthCheck_GrpcHealthCheck_\n\t*HealthCheck_CustomHealthCheck_"
      healthy_edge_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The "healthy edge interval" is a special health check interval that is used for the first
          health check right after a host is marked as healthy. For subsequent health checks
          Envoy will shift back to using the standard health check interval that is defined.

          The default value for "healthy edge interval" is the same as the default interval.
      healthy_threshold:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of healthy health checks required before a host is marked
          healthy. Note that during startup, only a single successful health check is
          required to mark a host healthy.
      initial_jitter:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          An optional jitter amount in milliseconds. If specified, Envoy will start health
          checking after for a random time in ms between 0 and initial_jitter. This only
          applies to the first health check.
      interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: The interval between health checks.
      interval_jitter:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          An optional jitter amount in milliseconds. If specified, during every
          interval Envoy will add interval_jitter to the wait time.
      interval_jitter_percent:
        description: |-
          An optional jitter amount as a percentage of interval_ms. If specified,
          during every interval Envoy will add “interval_ms“ *
          “interval_jitter_percent“ / 100 to the wait time.

          If interval_jitter_ms and interval_jitter_percent are both set, both of
          them will be used to increase the wait time.
        type: integer
      no_traffic_healthy_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The "no traffic healthy interval" is a special health check interval that
          is used for hosts that are currently passing active health checking
          (including new hosts) when the cluster has received no traffic.

          This is useful for when we want to send frequent health checks with
          “no_traffic_interval“ but then revert to lower frequency “no_traffic_healthy_interval“ once
          a host in the cluster is marked as healthy.

          Once a cluster has been used for traffic routing, Envoy will shift back to using the
          standard health check interval that is defined.

          If no_traffic_healthy_interval is not set, it will default to the
          no traffic interval and send that interval regardless of health state.
      no_traffic_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The "no traffic interval" is a special health check interval that is used when a cluster has
          never had traffic routed to it. This lower interval allows cluster information to be kept up to
          date, without sending a potentially large amount of active health checking traffic for no
          reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
          standard health check interval that is defined. Note that this interval takes precedence over
          any other.

          The default value for "no traffic interval" is 60 seconds.
      reuse_connection:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: Reuse health check connection between health checks. Default
          is true.
      timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The time to wait for a health check response. If the timeout is reached the
          health check attempt will be considered a failure.
      tls_options:
        allOf:
        - $ref: '#/definitions/corev3.HealthCheck_TlsOptions'
        description: This allows overriding the cluster TLS settings, just for health
          check connections.
      transport_socket_match_criteria:
        allOf:
        - $ref: '#/definitions/github_com_golang_protobuf_ptypes_struct.Struct'
        description: "Optional key/value pairs that will be used to match a transport
          socket from those specified in the cluster's\n:ref:`tranport socket matches
          <envoy_v3_api_field_config.cluster.v3.Cluster.transport_socket_matches>`.\nFor
          example, the following match criteria\n\n.. code-block:: yaml\n\n\ttransport_socket_match_criteria:\n\t
          \ useMTLS: true\n\nWill match the following :ref:`cluster socket match <envoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch>`\n\n..
          code-block:: yaml\n\n\ttransport_socket_matches:\n\t- name: \"useMTLS\"\n\t
          \ match:\n\t    useMTLS: true\n\t  transport_socket:\n\t    name: envoy.transport_sockets.tls\n\t
          \   config: { ... } # tls socket configuration\n\nIf this field is set,
          then for health checks it will supersede an entry of “envoy.transport_socket“
          in the\n:ref:`LbEndpoint.Metadata <envoy_v3_api_field_config.endpoint.v3.LbEndpoint.metadata>`.\nThis
          allows using different transport socket capabilities for health checking
          versus proxying to the\nendpoint.\n\nIf the key/values pairs specified do
          not match any\n:ref:`transport socket matches <envoy_v3_api_field_config.cluster.v3.Cluster.transport_socket_matches>`,\nthe
          cluster's :ref:`transport socket <envoy_v3_api_field_config.cluster.v3.Cluster.transport_socket>`\nwill
          be used for health check socket configuration."
      unhealthy_edge_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The "unhealthy edge interval" is a special health check interval that is used for the first
          health check right after a host is marked as unhealthy. For subsequent health checks
          Envoy will shift back to using either "unhealthy interval" if present or the standard health
          check interval that is defined.

          The default value for "unhealthy edge interval" is the same as "unhealthy interval".
      unhealthy_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The "unhealthy interval" is a health check interval that is used for hosts that are marked as
          unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
          standard health check interval that is defined.

          The default value for "unhealthy interval" is the same as "interval".
      unhealthy_threshold:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of unhealthy health checks required before a host is marked
          unhealthy. Note that for “http“ health checking if a host responds with a code not in
          :ref:`expected_statuses <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses>`
          or :ref:`retriable_statuses <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.retriable_statuses>`,
          this threshold is ignored and the host is considered immediately unhealthy.
    type: object
  corev3.HealthCheck_TlsOptions:
    properties:
      alpn_protocols:
        description: |-
          Specifies the ALPN protocols for health check connections. This is useful if the
          corresponding upstream is using ALPN-based :ref:`FilterChainMatch
          <envoy_v3_api_msg_config.listener.v3.FilterChainMatch>` along with different protocols for health checks
          versus data connections. If empty, no ALPN protocols will be set on health check connections.
        items:
          type: string
        type: array
    type: object
  corev3.HealthStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - HealthStatus_UNKNOWN
    - HealthStatus_HEALTHY
    - HealthStatus_UNHEALTHY
    - HealthStatus_DRAINING
    - HealthStatus_TIMEOUT
    - HealthStatus_DEGRADED
  corev3.HealthStatusSet:
    properties:
      statuses:
        description: An order-independent set of health status.
        items:
          $ref: '#/definitions/corev3.HealthStatus'
        type: array
    type: object
  corev3.Http1ProtocolOptions:
    properties:
      accept_http_10:
        description: |-
          Handle incoming HTTP/1.0 and HTTP 0.9 requests.
          This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
          style connect logic, dechunking, and handling lack of client host iff
          “default_host_for_http_10“ is configured.
        type: boolean
      allow_absolute_url:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Handle HTTP requests with absolute URLs in the requests. These requests
          are generally sent by clients to forward/explicit proxies. This allows clients to configure
          envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
          “http_proxy“ environment variable.
      allow_chunked_length:
        description: "Allows Envoy to process requests/responses with both “Content-Length“
          and “Transfer-Encoding“\nheaders set. By default such messages are rejected,
          but if option is enabled - Envoy will\nremove Content-Length header and
          process message.\nSee `RFC7230, sec. 3.3.3 <https://tools.ietf.org/html/rfc7230#section-3.3.3>`_
          for details.\n\n.. attention::\n\n\tEnabling this option might lead to request
          smuggling vulnerability, especially if traffic\n\tis proxied via multiple
          layers of proxies.\n\n[#comment:TODO: This field is ignored when the\n:ref:`header
          validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`\nis
          present.]"
        type: boolean
      allow_custom_methods:
        description: |-
          [#not-implemented-hide:] Hiding so that field can be removed.
          If true, and BalsaParser is used (either `use_balsa_parser` above is true,
          or `envoy.reloadable_features.http1_use_balsa_parser` is true and
          `use_balsa_parser` is unset), then every non-empty method with only valid
          characters is accepted. Otherwise, methods not on the hard-coded list are
          rejected.
          Once UHV is enabled, this field should be removed, and BalsaParser should
          allow any method. UHV validates the method, rejecting empty string or
          invalid characters, and provides :ref:`restrict_http_methods
          <envoy_v3_api_field_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.restrict_http_methods>`
          to reject custom methods.
        type: boolean
      default_host_for_http_10:
        description: |-
          A default host for HTTP/1.0 requests. This is highly suggested if “accept_http_10“ is true as
          Envoy does not otherwise support HTTP/1.0 without a Host header.
          This is a no-op if “accept_http_10“ is not true.
        type: string
      enable_trailers:
        description: "Enables trailers for HTTP/1. By default the HTTP/1 codec drops
          proxied trailers.\n\n.. attention::\n\n\tNote that this only happens when
          Envoy is chunk encoding which occurs when:\n\t- The request is HTTP/1.1.\n\t-
          Is neither a HEAD only request nor a HTTP Upgrade.\n\t- Not a response to
          a HEAD request.\n\t- The content length header is not present."
        type: boolean
      header_key_format:
        allOf:
        - $ref: '#/definitions/corev3.Http1ProtocolOptions_HeaderKeyFormat'
        description: |-
          Describes how the keys for response headers should be formatted. By default, all header keys
          are lower cased.
      override_stream_error_on_invalid_http_message:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
          HTTP/1.1 connections upon receiving an invalid HTTP message. However,
          when this option is true, then Envoy will leave the HTTP/1.1 connection
          open where possible.
          If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`.
      send_fully_qualified_url:
        description: |-
          Allows sending fully qualified URLs when proxying the first line of the
          response. By default, Envoy will only send the path components in the first line.
          If this is true, Envoy will create a fully qualified URI composing scheme
          (inferred if not present), host (from the host/:authority header) and path
          (from first line or :path header).
        type: boolean
      use_balsa_parser:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          [#not-implemented-hide:] Hiding so that field can be removed after BalsaParser is rolled out.
          If set, force HTTP/1 parser: BalsaParser if true, http-parser if false.
          If unset, HTTP/1 parser is selected based on
          envoy.reloadable_features.http1_use_balsa_parser.
          See issue #21245.
    type: object
  corev3.Http1ProtocolOptions_HeaderKeyFormat:
    properties:
      headerFormat:
        description: "Types that are assignable to HeaderFormat:\n\n\t*Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_\n\t*Http1ProtocolOptions_HeaderKeyFormat_StatefulFormatter"
    type: object
  corev3.Http2ProtocolOptions:
    properties:
      allow_connect:
        description: Allows proxying Websocket and other upgrades over H2 connect.
        type: boolean
      allow_metadata:
        description: |-
          [#not-implemented-hide:] Hiding until envoy has full metadata support.
          Still under implementation. DO NOT USE.

          Allows metadata. See [metadata
          docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
          information.
        type: boolean
      connection_keepalive:
        allOf:
        - $ref: '#/definitions/corev3.KeepaliveSettings'
        description: |-
          Send HTTP/2 PING frames to verify that the connection is still healthy. If the remote peer
          does not respond within the configured timeout, the connection will be aborted.
      custom_settings_parameters:
        description: "[#not-implemented-hide:]\nSpecifies SETTINGS frame parameters
          to be sent to the peer, with two exceptions:\n\n1. SETTINGS_ENABLE_PUSH
          (0x2) is not configurable as HTTP/2 server push is not supported by\nEnvoy.\n\n2.
          SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the
          named field\n'allow_connect'.\n\nNote that custom parameters specified through
          this field can not also be set in the\ncorresponding named parameters:\n\n..
          code-block:: text\n\n\tID    Field Name\n\t----------------\n\t0x1   hpack_table_size\n\t0x3
          \  max_concurrent_streams\n\t0x4   initial_stream_window_size\n\nCollisions
          will trigger config validation failure on load/update. Likewise, inconsistencies\nbetween
          custom parameters with the same identifier will trigger a failure.\n\nSee
          `IANA HTTP/2 Settings\n<https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings>`_
          for\nstandardized identifiers."
        items:
          $ref: '#/definitions/corev3.Http2ProtocolOptions_SettingsParameter'
        type: array
      hpack_table_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          `Maximum table size <https://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
          (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
          range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
          compression.
      initial_connection_window_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Similar to “initial_stream_window_size“, but for connection-level flow-control
          window. Currently, this has the same minimum/maximum/default as “initial_stream_window_size“.
      initial_stream_window_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          `Initial stream-level flow-control window
          <https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2>`_ size. Valid values range from 65535
          (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
          (256 * 1024 * 1024).

          NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
          window size now, so it's also the minimum.

          This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
          HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
          stop the flow of data to the codec buffers.
      max_concurrent_streams:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          `Maximum concurrent streams <https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
          allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
          and defaults to 2147483647.

          For upstream connections, this also limits how many streams Envoy will initiate concurrently
          on a single connection. If the limit is reached, Envoy may queue requests or establish
          additional connections (as allowed per circuit breaker limits).

          This acts as an upper bound: Envoy will lower the max concurrent streams allowed on a given
          connection based on upstream settings. Config dumps will reflect the configured upper bound,
          not the per-connection negotiated limits.
      max_consecutive_inbound_frames_with_empty_payload:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
          empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
          might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood“
          stat tracks the number of connections terminated due to flood mitigation.
          Setting this to 0 will terminate connection upon receiving first frame with an empty payload
          and no end stream flag. The default limit is 1.
      max_inbound_priority_frames_per_stream:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: "Limit the number of inbound PRIORITY frames allowed per each
          opened stream. If the number\nof PRIORITY frames received over the lifetime
          of connection exceeds the value calculated\nusing this formula::\n\n\t``max_inbound_priority_frames_per_stream``
          * (1 + ``opened_streams``)\n\nthe connection is terminated. For downstream
          connections the “opened_streams“ is incremented when\nEnvoy receives complete
          response headers from the upstream server. For upstream connection the\n“opened_streams“
          is incremented when Envoy send the HEADERS frame for a new stream. The\n“http2.inbound_priority_frames_flood“
          stat tracks\nthe number of connections terminated due to flood mitigation.
          The default limit is 100."
      max_inbound_window_update_frames_per_data_frame_sent:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: "Limit the number of inbound WINDOW_UPDATE frames allowed per
          DATA frame sent. If the number\nof WINDOW_UPDATE frames received over the
          lifetime of connection exceeds the value calculated\nusing this formula::\n\n\t5
          + 2 * (``opened_streams`` +\n\t         ``max_inbound_window_update_frames_per_data_frame_sent``
          * ``outbound_data_frames``)\n\nthe connection is terminated. For downstream
          connections the “opened_streams“ is incremented when\nEnvoy receives complete
          response headers from the upstream server. For upstream connections the\n“opened_streams“
          is incremented when Envoy sends the HEADERS frame for a new stream. The\n“http2.inbound_priority_frames_flood“
          stat tracks the number of connections terminated due to\nflood mitigation.
          The default max_inbound_window_update_frames_per_data_frame_sent value is
          10.\nSetting this to 1 should be enough to support HTTP/2 implementations
          with basic flow control,\nbut more complex implementations that try to estimate
          available bandwidth require at least 2."
      max_outbound_control_frames:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
          preventing high memory utilization when receiving continuous stream of these frames. Exceeding
          this limit triggers flood mitigation and connection is terminated. The
          “http2.outbound_control_flood“ stat tracks the number of terminated connections due to flood
          mitigation. The default limit is 1000.
      max_outbound_frames:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Limit the number of pending outbound downstream frames of all types (frames that are waiting to
          be written into the socket). Exceeding this limit triggers flood mitigation and connection is
          terminated. The “http2.outbound_flood“ stat tracks the number of terminated connections due
          to flood mitigation. The default limit is 10000.
      override_stream_error_on_invalid_http_message:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Allows invalid HTTP messaging and headers. When this option is disabled (default), then
          the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
          when this option is enabled, only the offending stream is terminated.

          This overrides any HCM :ref:`stream_error_on_invalid_http_messaging
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`

          See `RFC7540, sec. 8.1 <https://tools.ietf.org/html/rfc7540#section-8.1>`_ for details.
      stream_error_on_invalid_http_messaging:
        description: |-
          Allows invalid HTTP messaging and headers. When this option is disabled (default), then
          the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
          when this option is enabled, only the offending stream is terminated.

          This is overridden by HCM :ref:`stream_error_on_invalid_http_messaging
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`
          iff present.

          This is deprecated in favor of :ref:`override_stream_error_on_invalid_http_message
          <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message>`

          See `RFC7540, sec. 8.1 <https://tools.ietf.org/html/rfc7540#section-8.1>`_ for details.

          Deprecated: Marked as deprecated in envoy/config/core/v3/protocol.proto.
        type: boolean
      use_oghttp2_codec:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          [#not-implemented-hide:] Hiding so that the field can be removed after oghttp2 is rolled out.
          If set, force use of a particular HTTP/2 codec: oghttp2 if true, nghttp2 if false.
          If unset, HTTP/2 codec is selected based on envoy.reloadable_features.http2_use_oghttp2.
    type: object
  corev3.Http2ProtocolOptions_SettingsParameter:
    properties:
      identifier:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: The 16 bit parameter identifier.
      value:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: The 32 bit parameter value.
    type: object
  corev3.Http3ProtocolOptions:
    properties:
      allow_extended_connect:
        description: |-
          Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
          the header mechanisms from the `HTTP/2 extended connect RFC
          <https://datatracker.ietf.org/doc/html/rfc8441>`_
          and settings `proposed for HTTP/3
          <https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/>`_
          Note that HTTP/3 CONNECT is not yet an RFC.
        type: boolean
      override_stream_error_on_invalid_http_message:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Allows invalid HTTP messaging and headers. When this option is disabled (default), then
          the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
          when this option is enabled, only the offending stream is terminated.

          If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`.
      quic_protocol_options:
        $ref: '#/definitions/corev3.QuicProtocolOptions'
    type: object
  corev3.HttpProtocolOptions:
    properties:
      headers_with_underscores_action:
        allOf:
        - $ref: '#/definitions/corev3.HttpProtocolOptions_HeadersWithUnderscoresAction'
        description: |-
          Action to take when a client request with a header name containing underscore characters is received.
          If this setting is not specified, the value defaults to ALLOW.
          Note: upstream responses are not affected by this setting.
          Note: this only affects client headers. It does not affect headers added
          by Envoy filters and does not have any impact if added to cluster config.
      idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: "The idle timeout for connections. The idle timeout is defined
          as the\nperiod in which there are no active requests. When the\nidle timeout
          is reached the connection will be closed. If the connection is an HTTP/2\ndownstream
          connection a drain sequence will occur prior to closing the connection,
          see\n:ref:`drain_timeout\n<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.\nNote
          that request based timeouts mean that HTTP/2 PINGs will not keep the connection
          alive.\nIf not specified, this defaults to 1 hour. To disable idle timeouts
          explicitly set this to 0.\n\n.. warning::\n\n\tDisabling this timeout has
          a highly likelihood of yielding connection leaks due to lost TCP\n\tFIN
          packets, etc.\n\nIf the :ref:`overload action <config_overload_manager_overload_actions>`
          \"envoy.overload_actions.reduce_timeouts\"\nis configured, this timeout
          is scaled for downstream connections according to the value for\n:ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE
          <envoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE>`."
      max_connection_duration:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The maximum duration of a connection. The duration is defined as a period since a connection
          was established. If not set, there is no max duration. When max_connection_duration is reached
          and if there are no active streams, the connection will be closed. If the connection is a
          downstream connection and there are any active streams, the drain sequence will kick-in,
          and the connection will be force-closed after the drain period. See :ref:`drain_timeout
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.
      max_headers_count:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of headers. If unconfigured, the default
          maximum number of request headers allowed is 100. Requests that exceed this limit will receive
          a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
      max_requests_per_connection:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Optional maximum requests for both upstream and downstream connections.
          If not specified, there is no limit.
          Setting this parameter to 1 will effectively disable keep alive.
          For HTTP/2 and HTTP/3, due to concurrent stream processing, the limit is approximate.
      max_stream_duration:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
          reset independent of any other timeouts. If not specified, this value is not set.
    type: object
  corev3.HttpProtocolOptions_HeadersWithUnderscoresAction:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - HttpProtocolOptions_ALLOW
    - HttpProtocolOptions_REJECT_REQUEST
    - HttpProtocolOptions_DROP_HEADER
  corev3.JsonFormatOptions:
    properties:
      sort_properties:
        description: The output JSON string properties will be sorted.
        type: boolean
    type: object
  corev3.KeepaliveSettings:
    properties:
      connection_idle_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          If the connection has been idle for this duration, send a HTTP/2 ping ahead
          of new stream creation, to quickly detect dead connections.
          If this is zero, this type of PING will not be sent.
          If an interval ping is outstanding, a second ping will not be sent as the
          interval ping will determine if the connection is dead.

          The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` and the current PTO of the connection to decide whether to probe before sending a new request.
      interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
          If this is zero, interval PINGs will not be sent.
      interval_jitter:
        allOf:
        - $ref: '#/definitions/typev3.Percent'
        description: |-
          A random jitter amount as a percentage of interval that will be added to each interval.
          A value of zero means there will be no jitter.
          The default value is 15%.
      timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          How long to wait for a response to a keepalive PING. If a response is not received within this
          time period, the connection will be aborted. Note that in order to prevent the influence of
          Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
          the connection, under the assumption that if a frame is received the connection is healthy.
    type: object
  corev3.Locality:
    properties:
      region:
        description: Region this :ref:`zone <envoy_v3_api_field_config.core.v3.Locality.zone>`
          belongs to.
        type: string
      sub_zone:
        description: |-
          When used for locality of upstream hosts, this field further splits zone
          into smaller chunks of sub-zones so they can be load balanced
          independently.
        type: string
      zone:
        description: |-
          Defines the local service zone where Envoy is running. Though optional, it
          should be set if discovery service routing is used and the discovery
          service exposes :ref:`zone data <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,
          either in this message or via :option:`--service-zone`. The meaning of zone
          is context dependent, e.g. `Availability Zone (AZ)
          <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
          on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
          GCP, etc.
        type: string
    type: object
  corev3.Metadata:
    properties:
      filter_metadata:
        additionalProperties:
          $ref: '#/definitions/github_com_golang_protobuf_ptypes_struct.Struct'
        description: |-
          Key is the reverse DNS filter name, e.g. com.acme.widget. The “envoy.*“
          namespace is reserved for Envoy's built-in filters.
          If both “filter_metadata“ and
          :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
          fields are present in the metadata with same keys,
          only “typed_filter_metadata“ field will be parsed.
        type: object
      typed_filter_metadata:
        additionalProperties:
          $ref: '#/definitions/any.Any'
        description: |-
          Key is the reverse DNS filter name, e.g. com.acme.widget. The “envoy.*“
          namespace is reserved for Envoy's built-in filters.
          The value is encoded as google.protobuf.Any.
          If both :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
          and “typed_filter_metadata“ fields are present in the metadata with same keys,
          only “typed_filter_metadata“ field will be parsed.
        type: object
    type: object
  corev3.QuicKeepAliveSettings:
    properties:
      initial_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The interval to send the first few keep-alive probing packets to prevent connection from hitting the idle timeout. Subsequent probes will be sent, each one with an interval exponentially longer than previous one, till it reaches :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`. And the probes afterwards will always use :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`.

          The value should be smaller than :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` to prevent idle timeout and smaller than max_interval to take effect.

          If absent or zero, disable keepalive probing for a server connection. For a client connection, if :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`  is also zero, do not keepalive, otherwise use max_interval or QUICHE default to probe all the time.
      max_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The max interval for a connection to send keep-alive probing packets (with PING or PATH_RESPONSE). The value should be smaller than :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` to prevent idle timeout while not less than 1s to avoid throttling the connection or flooding the peer with probes.

          If :ref:`initial_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.initial_interval>` is absent or zero, a client connection will use this value to start probing.

          If zero, disable keepalive probing.
          If absent, use the QUICHE default interval to probe.
    type: object
  corev3.QuicProtocolOptions:
    properties:
      client_connection_options:
        description: |-
          A comma-separated list of strings representing QUIC client connection options defined in
          `QUICHE <https://github.com/google/quiche/blob/main/quiche/quic/core/crypto/crypto_protocol.h>`_ and to be sent by upstream connections.
        type: string
      connection_keepalive:
        allOf:
        - $ref: '#/definitions/corev3.QuicKeepAliveSettings'
        description: |-
          Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
          If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
      connection_options:
        description: |-
          A comma-separated list of strings representing QUIC connection options defined in
          `QUICHE <https://github.com/google/quiche/blob/main/quiche/quic/core/crypto/crypto_protocol.h>`_ and to be sent by upstream connections.
        type: string
      initial_connection_window_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Similar to “initial_stream_window_size“, but for connection-level
          flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
          window. Currently, this has the same minimum/default as “initial_stream_window_size“.

          NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
          window size now, so it's also the minimum.
      initial_stream_window_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          `Initial stream-level flow-control receive window
          <https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1>`_ size. Valid values range from
          1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).

          NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
          QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.

          This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
          QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
          stop the flow of data to the stream buffers.
      max_concurrent_streams:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Maximum number of streams that the client can negotiate per connection. 100
          if not specified.
      num_timeouts_to_trigger_port_migration:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of timeouts that can occur before port migration is triggered for QUIC clients.
          This defaults to 4. If set to 0, port migration will not occur on path degrading.
          Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
          This has no effect on server sessions.
    type: object
  corev3.RoutingPriority:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - RoutingPriority_DEFAULT
    - RoutingPriority_HIGH
  corev3.RuntimeFeatureFlag:
    properties:
      default_value:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: Default value if runtime value is not available.
      runtime_key:
        description: |-
          Runtime key to get value for comparison. This value is used if defined. The boolean value must
          be represented via its
          `canonical JSON encoding <https://developers.google.com/protocol-buffers/docs/proto3#json>`_.
        type: string
    type: object
  corev3.RuntimeFractionalPercent:
    properties:
      default_value:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent'
        description: Default value if the runtime value's for the numerator/denominator
          keys are not available.
      runtime_key:
        description: Runtime key for a YAML representation of a FractionalPercent.
        type: string
    type: object
  corev3.SchemeHeaderTransformation:
    properties:
      transformation:
        description: "Types that are assignable to Transformation:\n\n\t*SchemeHeaderTransformation_SchemeToOverwrite"
    type: object
  corev3.SocketAddress:
    properties:
      address:
        description: |-
          The address for this socket. :ref:`Listeners <config_listeners>` will bind
          to the address. An empty address is not allowed. Specify “0.0.0.0“ or “::“
          to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
          It is possible to distinguish a Listener address via the prefix/suffix matching
          in :ref:`FilterChainMatch <envoy_v3_api_msg_config.listener.v3.FilterChainMatch>`.] When used
          within an upstream :ref:`BindConfig <envoy_v3_api_msg_config.core.v3.BindConfig>`, the address
          controls the source address of outbound connections. For :ref:`clusters
          <envoy_v3_api_msg_config.cluster.v3.Cluster>`, the cluster type determines whether the
          address must be an IP (“STATIC“ or “EDS“ clusters) or a hostname resolved by DNS
          (“STRICT_DNS“ or “LOGICAL_DNS“ clusters). Address resolution can be customized
          via :ref:`resolver_name <envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name>`.
        type: string
      ipv4_compat:
        description: |-
          When binding to an IPv6 address above, this enables `IPv4 compatibility
          <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to “::“ will
          allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
          IPv6 space as “::FFFF:<IPv4-address>“.
        type: boolean
      portSpecifier:
        description: "Types that are assignable to PortSpecifier:\n\n\t*SocketAddress_PortValue\n\t*SocketAddress_NamedPort"
      protocol:
        $ref: '#/definitions/corev3.SocketAddress_Protocol'
      resolver_name:
        description: |-
          The name of the custom resolver. This must have been registered with Envoy. If
          this is empty, a context dependent default applies. If the address is a concrete
          IP address, no resolution will occur. If address is a hostname this
          should be set for resolution other than DNS. Specifying a custom resolver with
          “STRICT_DNS“ or “LOGICAL_DNS“ will generate an error at runtime.
        type: string
    type: object
  corev3.SocketAddress_Protocol:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - SocketAddress_TCP
    - SocketAddress_UDP
  corev3.SocketOption:
    properties:
      description:
        description: |-
          An optional name to give this socket option for debugging, etc.
          Uniqueness is not required and no special meaning is assumed.
        type: string
      level:
        description: Corresponding to the level value passed to setsockopt, such as
          IPPROTO_TCP
        type: integer
      name:
        description: The numeric name as passed to setsockopt
        type: integer
      state:
        allOf:
        - $ref: '#/definitions/corev3.SocketOption_SocketState'
        description: |-
          The state in which the option will be applied. When used in BindConfig
          STATE_PREBIND is currently the only valid value.
      value:
        description: "Types that are assignable to Value:\n\n\t*SocketOption_IntValue\n\t*SocketOption_BufValue"
    type: object
  corev3.SocketOption_SocketState:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - SocketOption_STATE_PREBIND
    - SocketOption_STATE_BOUND
    - SocketOption_STATE_LISTENING
  corev3.SocketOptionsOverride:
    properties:
      socket_options:
        items:
          $ref: '#/definitions/corev3.SocketOption'
        type: array
    type: object
  corev3.SubstitutionFormatString:
    properties:
      content_type:
        description: "Specify a “content_type“ field.\nIf this field is not set then
          “text/plain“ is used for “text_format“ and\n“application/json“ is used for
          “json_format“.\n\n.. validated-code-block:: yaml\n\n\t:type-name: envoy.config.core.v3.SubstitutionFormatString\n\n\tcontent_type:
          \"text/html; charset=UTF-8\""
        type: string
      format:
        description: "Types that are assignable to Format:\n\n\t*SubstitutionFormatString_TextFormat\n\t*SubstitutionFormatString_JsonFormat\n\t*SubstitutionFormatString_TextFormatSource"
      formatters:
        description: |-
          Specifies a collection of Formatter plugins that can be called from the access log configuration.
          See the formatters extensions documentation for details.
          [#extension-category: envoy.formatter]
        items:
          $ref: '#/definitions/corev3.TypedExtensionConfig'
        type: array
      json_format_options:
        allOf:
        - $ref: '#/definitions/corev3.JsonFormatOptions'
        description: If json_format is used, the options will be applied to the output
          JSON string.
      omit_empty_values:
        description: |-
          If set to true, when command operators are evaluated to null,

            - for “text_format“, the output of the empty operator is changed from “-“ to an
              empty string, so that empty values are omitted entirely.
            - for “json_format“ the keys with null values are omitted in the output structure.
        type: boolean
    type: object
  corev3.TcpKeepalive:
    properties:
      keepalive_interval:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of seconds between keep-alive probes. Default is to use the OS
          level configuration (unless overridden, Linux defaults to 75s.)
      keepalive_probes:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Maximum number of keepalive probes to send without response before deciding
          the connection is dead. Default is to use the OS level configuration (unless
          overridden, Linux defaults to 9.)
      keepalive_time:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The number of seconds a connection needs to be idle before keep-alive probes
          start being sent. Default is to use the OS level configuration (unless
          overridden, Linux defaults to 7200s (i.e., 2 hours.)
    type: object
  corev3.TrafficDirection:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - TrafficDirection_UNSPECIFIED
    - TrafficDirection_INBOUND
    - TrafficDirection_OUTBOUND
  corev3.TransportSocket:
    properties:
      configType:
        description: "Implementation specific configuration which depends on the implementation
          being instantiated.\nSee the supported transport socket implementations
          for further documentation.\n\nTypes that are assignable to ConfigType:\n\n\t*TransportSocket_TypedConfig"
      name:
        description: |-
          The name of the transport socket to instantiate. The name must match a supported transport
          socket implementation.
        type: string
    type: object
  corev3.TypedExtensionConfig:
    properties:
      name:
        description: |-
          The name of an extension. This is not used to select the extension, instead
          it serves the role of an opaque identifier.
        type: string
      typed_config:
        allOf:
        - $ref: '#/definitions/any.Any'
        description: |-
          The typed config for the extension. The type URL will be used to identify
          the extension. In the case that the type URL is “xds.type.v3.TypedStruct“
          (or, for historical reasons, “udpa.type.v1.TypedStruct“), the inner type
          URL of “TypedStruct“ will be utilized. See the
          :ref:`extension configuration overview
          <config_overview_extension_configuration>` for further details.
    type: object
  corev3.UdpSocketConfig:
    properties:
      max_rx_datagram_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt64Value'
        description: |-
          The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
          more memory per socket. Received datagrams above this size will be dropped. If not set
          defaults to 1500 bytes.
      prefer_gro:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Configures whether Generic Receive Offload (GRO)
          <https://en.wikipedia.org/wiki/Large_receive_offload>_ is preferred when reading from the
          UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
          This option affects performance but not functionality. If GRO is not supported by the operating
          system, non-GRO receive will be used.
    type: object
  corev3.UpstreamHttpProtocolOptions:
    properties:
      auto_san_validation:
        description: |-
          Automatic validate upstream presented certificate for new upstream connections based on the
          downstream HTTP host/authority header or any other arbitrary header when :ref:`override_auto_sni_header <envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header>`
          is set, as seen by the :ref:`router filter <config_http_filters_router>`.
          This field is intended to be set with “auto_sni“ field.
          Does nothing if a filter before the http router filter sets the corresponding metadata.
        type: boolean
      auto_sni:
        description: |-
          Set transport socket `SNI <https://en.wikipedia.org/wiki/Server_Name_Indication>`_ for new
          upstream connections based on the downstream HTTP host/authority header or any other arbitrary
          header when :ref:`override_auto_sni_header <envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header>`
          is set, as seen by the :ref:`router filter <config_http_filters_router>`.
          Does nothing if a filter before the http router filter sets the corresponding metadata.
        type: boolean
      override_auto_sni_header:
        description: |-
          An optional alternative to the host/authority header to be used for setting the SNI value.
          It should be a valid downstream HTTP header, as seen by the
          :ref:`router filter <config_http_filters_router>`.
          If unset, host/authority header will be used for populating the SNI. If the specified header
          is not found or the value is empty, host/authority header will be used instead.
          This field is intended to be set with “auto_sni“ and/or “auto_san_validation“ fields.
          If none of these fields are set then setting this would be a no-op.
          Does nothing if a filter before the http router filter sets the corresponding metadata.
        type: string
    type: object
  duration.Duration:
    properties:
      nanos:
        description: |-
          Signed fractions of a second at nanosecond resolution of the span
          of time. Durations less than one second are represented with a 0
          `seconds` field and a positive or negative `nanos` field. For durations
          of one second or more, a non-zero value for the `nanos` field must be
          of the same sign as the `seconds` field. Must be from -999,999,999
          to +999,999,999 inclusive.
        type: integer
      seconds:
        description: |-
          Signed seconds of the span of time. Must be from -315,576,000,000
          to +315,576,000,000 inclusive. Note: these bounds are computed from:
          60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
        type: integer
    type: object
  endpointv3.ClusterLoadAssignment:
    properties:
      cluster_name:
        description: |-
          Name of the cluster. This will be the :ref:`service_name
          <envoy_v3_api_field_config.cluster.v3.Cluster.EdsClusterConfig.service_name>` value if specified
          in the cluster :ref:`EdsClusterConfig
          <envoy_v3_api_msg_config.cluster.v3.Cluster.EdsClusterConfig>`.
        type: string
      endpoints:
        description: List of endpoints to load balance to.
        items:
          $ref: '#/definitions/endpointv3.LocalityLbEndpoints'
        type: array
      named_endpoints:
        additionalProperties:
          $ref: '#/definitions/endpointv3.Endpoint'
        description: |-
          Map of named endpoints that can be referenced in LocalityLbEndpoints.
          [#not-implemented-hide:]
        type: object
      policy:
        allOf:
        - $ref: '#/definitions/endpointv3.ClusterLoadAssignment_Policy'
        description: Load balancing policy settings.
    type: object
  endpointv3.ClusterLoadAssignment_Policy:
    properties:
      drop_overloads:
        description: "Action to trim the overall incoming traffic to protect the upstream\nhosts.
          This action allows protection in case the hosts are unable to\nrecover from
          an outage, or unable to autoscale or unable to handle\nincoming traffic
          volume for any reason.\n\nAt the client each category is applied one after
          the other to generate\nthe 'actual' drop percentage on all outgoing traffic.
          For example:\n\n.. code-block:: json\n\n\t{ \"drop_overloads\": [\n\t    {
          \"category\": \"throttle\", \"drop_percentage\": 60 }\n\t    { \"category\":
          \"lb\", \"drop_percentage\": 50 }\n\t]}\n\nThe actual drop percentages applied
          to the traffic at the clients will be\n\n\t\"throttle\"_drop = 60%\n\t\"lb\"_drop
          = 20%  // 50% of the remaining 'actual' load, which is 40%.\n\tactual_outgoing_load
          = 20% // remaining after applying all categories.\n\nEnvoy supports only
          one element and will NACK if more than one element is present.\nOther xDS-capable
          data planes will not necessarily have this limitation."
        items:
          $ref: '#/definitions/endpointv3.ClusterLoadAssignment_Policy_DropOverload'
        type: array
      endpoint_stale_after:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The max time until which the endpoints from this assignment can be used.
          If no new assignments are received before this time expires the endpoints
          are considered stale and should be marked unhealthy.
          Defaults to 0 which means endpoints never go stale.
      overprovisioning_factor:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: "Priority levels and localities are considered overprovisioned
          with this\nfactor (in percentage). This means that we don't consider a priority\nlevel
          or locality unhealthy until the fraction of healthy hosts\nmultiplied by
          the overprovisioning factor drops below 100.\nWith the default value 140(1.4),
          Envoy doesn't consider a priority level\nor a locality unhealthy until their
          percentage of healthy hosts drops\nbelow 72%. For example:\n\n.. code-block::
          json\n\n\t{ \"overprovisioning_factor\": 100 }\n\nRead more at :ref:`priority
          levels <arch_overview_load_balancing_priority_levels>` and\n:ref:`localities
          <arch_overview_load_balancing_locality_weighted_lb>`."
      weighted_priority_health:
        description: |-
          If true, use the :ref:`load balancing weight
          <envoy_v3_api_field_config.endpoint.v3.LbEndpoint.load_balancing_weight>` of healthy and unhealthy
          hosts to determine the health of the priority level. If false, use the number of healthy and unhealthy hosts
          to determine the health of the priority level, or in other words assume each host has a weight of 1 for
          this calculation.

          Note: this is not currently implemented for
          :ref:`locality weighted load balancing <arch_overview_load_balancing_locality_weighted_lb>`.
        type: boolean
    type: object
  endpointv3.ClusterLoadAssignment_Policy_DropOverload:
    properties:
      category:
        description: Identifier for the policy specifying the drop.
        type: string
      drop_percentage:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent'
        description: Percentage of traffic that should be dropped for the category.
    type: object
  endpointv3.Endpoint:
    properties:
      additional_addresses:
        description: |-
          An ordered list of addresses that together with “address“ comprise the
          list of addresses for an endpoint. The address given in the “address“ is
          prepended to this list. It is assumed that the list must already be
          sorted by preference order of the addresses. This will only be supported
          for STATIC and EDS clusters.
        items:
          $ref: '#/definitions/endpointv3.Endpoint_AdditionalAddress'
        type: array
      address:
        allOf:
        - $ref: '#/definitions/corev3.Address'
        description: "The upstream host address.\n\n.. attention::\n\n\tThe form of
          host address depends on the given cluster type. For STATIC or EDS,\n\tit
          is expected to be a direct IP address (or something resolvable by the\n\tspecified
          :ref:`resolver <envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name>`\n\tin
          the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,\n\tand
          will be resolved via DNS."
      health_check_config:
        allOf:
        - $ref: '#/definitions/endpointv3.Endpoint_HealthCheckConfig'
        description: "The optional health check configuration is used as configuration
          for the\nhealth checker to contact the health checked host.\n\n.. attention::\n\n\tThis
          takes into effect only for upstream clusters with\n\t:ref:`active health
          checking <arch_overview_health_checking>` enabled."
      hostname:
        description: |-
          The hostname associated with this endpoint. This hostname is not used for routing or address
          resolution. If provided, it will be associated with the endpoint, and can be used for features
          that require a hostname, like
          :ref:`auto_host_rewrite <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>`.
        type: string
    type: object
  endpointv3.Endpoint_AdditionalAddress:
    properties:
      address:
        allOf:
        - $ref: '#/definitions/corev3.Address'
        description: Additional address that is associated with the endpoint.
    type: object
  endpointv3.Endpoint_HealthCheckConfig:
    properties:
      address:
        allOf:
        - $ref: '#/definitions/corev3.Address'
        description: "Optional alternative health check host address.\n\n.. attention::\n\n\tThe
          form of the health check host address is expected to be a direct IP address."
      disable_active_health_check:
        description: |-
          Optional flag to control if perform active health check for this endpoint.
          Active health check is enabled by default if there is a health checker.
        type: boolean
      hostname:
        description: |-
          By default, the host header for L7 health checks is controlled by cluster level configuration
          (see: :ref:`host <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.host>` and
          :ref:`authority <envoy_v3_api_field_config.core.v3.HealthCheck.GrpcHealthCheck.authority>`). Setting this
          to a non-empty value allows overriding the cluster level configuration for a specific
          endpoint.
        type: string
      port_value:
        description: |-
          Optional alternative health check port value.

          By default the health check address port of an upstream host is the same
          as the host's serving address port. This provides an alternative health
          check port. Setting this with a non-zero value allows an upstream host
          to have different health check address port.
        type: integer
    type: object
  endpointv3.LbEndpoint:
    properties:
      health_status:
        allOf:
        - $ref: '#/definitions/corev3.HealthStatus'
        description: Optional health status when known and supplied by EDS server.
      hostIdentifier:
        description: "Upstream host identifier or a named reference.\n\nTypes that
          are assignable to HostIdentifier:\n\n\t*LbEndpoint_Endpoint\n\t*LbEndpoint_EndpointName"
      load_balancing_weight:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The optional load balancing weight of the upstream host; at least 1.
          Envoy uses the load balancing weight in some of the built in load
          balancers. The load balancing weight for an endpoint is divided by the sum
          of the weights of all endpoints in the endpoint's locality to produce a
          percentage of traffic for the endpoint. This percentage is then further
          weighted by the endpoint's locality's load balancing weight from
          LocalityLbEndpoints. If unspecified, will be treated as 1. The sum
          of the weights of all endpoints in the endpoint's locality must not
          exceed uint32_t maximal value (4294967295).
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: |-
          The endpoint metadata specifies values that may be used by the load
          balancer to select endpoints in a cluster for a given request. The filter
          name should be specified as “envoy.lb“. An example boolean key-value pair
          is “canary“, providing the optional canary status of the upstream host.
          This may be matched against in a route's
          :ref:`RouteAction <envoy_v3_api_msg_config.route.v3.RouteAction>` metadata_match field
          to subset the endpoints considered in cluster load balancing.
    type: object
  endpointv3.LocalityLbEndpoints:
    properties:
      lb_endpoints:
        description: |-
          The group of endpoints belonging to the locality specified.
          [#comment:TODO(adisuissa): Once LEDS is implemented this field needs to be
          deprecated and replaced by “load_balancer_endpoints“.]
        items:
          $ref: '#/definitions/endpointv3.LbEndpoint'
        type: array
      lbConfig:
        description: "[#not-implemented-hide:]\n\nTypes that are assignable to LbConfig:\n\n\t*LocalityLbEndpoints_LoadBalancerEndpoints\n\t*LocalityLbEndpoints_LedsClusterLocalityConfig"
      load_balancing_weight:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Optional: Per priority/region/zone/sub_zone weight; at least 1. The load
          balancing weight for a locality is divided by the sum of the weights of all
          localities  at the same priority level to produce the effective percentage
          of traffic for the locality. The sum of the weights of all localities at
          the same priority level must not exceed uint32_t maximal value (4294967295).

          Locality weights are only considered when :ref:`locality weighted load
          balancing <arch_overview_load_balancing_locality_weighted_lb>` is
          configured. These weights are ignored otherwise. If no weights are
          specified when locality weighted load balancing is enabled, the locality is
          assigned no load.
      locality:
        allOf:
        - $ref: '#/definitions/corev3.Locality'
        description: Identifies location of where the upstream hosts run.
      priority:
        description: |-
          Optional: the priority for this LocalityLbEndpoints. If unspecified this will
          default to the highest priority (0).

          Under usual circumstances, Envoy will only select endpoints for the highest
          priority (0). In the event that enough endpoints for a particular priority are
          unavailable/unhealthy, Envoy will fail over to selecting endpoints for the
          next highest priority group. Read more at :ref:`priority levels <arch_overview_load_balancing_priority_levels>`.

          Priorities should range from 0 (highest) to N (lowest) without skipping.
        type: integer
      proximity:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Optional: Per locality proximity value which indicates how close this
          locality is from the source locality. This value only provides ordering
          information (lower the value, closer it is to the source locality).
          This will be consumed by load balancing schemes that need proximity order
          to determine where to route the requests.
          [#not-implemented-hide:]
    type: object
  expr.CheckedExpr:
    properties:
      expr:
        allOf:
        - $ref: '#/definitions/expr.Expr'
        description: |-
          The checked expression. Semantically equivalent to the parsed `expr`, but
          may have structural differences.
      expr_version:
        description: |-
          The expr version indicates the major / minor version number of the `expr`
          representation.

          The most common reason for a version change will be to indicate to the CEL
          runtimes that transformations have been performed on the expr during static
          analysis. In some cases, this will save the runtime the work of applying
          the same or similar transformations prior to evaluation.
        type: string
      reference_map:
        additionalProperties:
          $ref: '#/definitions/expr.Reference'
        description: |-
          A map from expression ids to resolved references.

          The following entries are in this table:

            - An Ident or Select expression is represented here if it resolves to a
              declaration. For instance, if `a.b.c` is represented by
              `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
              while `c` is a field selection, then the reference is attached to the
              nested select expression (but not to the id or or the outer select).
              In turn, if `a` resolves to a declaration and `b.c` are field selections,
              the reference is attached to the ident expression.
            - Every Call expression has an entry here, identifying the function being
              called.
            - Every CreateStruct expression for a message has an entry, identifying
              the message.
        type: object
      source_info:
        allOf:
        - $ref: '#/definitions/expr.SourceInfo'
        description: |-
          The source info derived from input that generated the parsed `expr` and
          any optimizations made during the type-checking pass.
      type_map:
        additionalProperties:
          $ref: '#/definitions/expr.Type'
        description: |-
          A map from expression ids to types.

          Every expression node which has a type different than DYN has a mapping
          here. If an expression has type DYN, it is omitted from this map to save
          space.
        type: object
    type: object
  expr.Constant:
    properties:
      constantKind:
        description: "Required. The valid constant kinds.\n\nTypes that are assignable
          to ConstantKind:\n\n\t*Constant_NullValue\n\t*Constant_BoolValue\n\t*Constant_Int64Value\n\t*Constant_Uint64Value\n\t*Constant_DoubleValue\n\t*Constant_StringValue\n\t*Constant_BytesValue\n\t*Constant_DurationValue\n\t*Constant_TimestampValue"
    type: object
  expr.Expr:
    properties:
      exprKind:
        description: "Required. Variants of expressions.\n\nTypes that are assignable
          to ExprKind:\n\n\t*Expr_ConstExpr\n\t*Expr_IdentExpr\n\t*Expr_SelectExpr\n\t*Expr_CallExpr\n\t*Expr_ListExpr\n\t*Expr_StructExpr\n\t*Expr_ComprehensionExpr"
      id:
        description: |-
          Required. An id assigned to this node by the parser which is unique in a
          given expression tree. This is used to associate type information and other
          attributes to a node in the parse tree.
        type: integer
    type: object
  expr.Reference:
    properties:
      name:
        description: The fully qualified name of the declaration.
        type: string
      overload_id:
        description: |-
          For references to functions, this is a list of `Overload.overload_id`
          values which match according to typing rules.

          If the list has more than one element, overload resolution among the
          presented candidates must happen at runtime because of dynamic types. The
          type checker attempts to narrow down this list as much as possible.

          Empty if this is not a reference to a
          [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].
        items:
          type: string
        type: array
      value:
        allOf:
        - $ref: '#/definitions/expr.Constant'
        description: |-
          For references to constants, this may contain the value of the
          constant if known at compile time.
    type: object
  expr.SourceInfo:
    properties:
      line_offsets:
        description: |-
          Monotonically increasing list of code point offsets where newlines
          `\n` appear.

          The line number of a given position is the index `i` where for a given
          `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
          column may be derivd from `id_positions[id] - line_offsets[i]`.
        items:
          type: integer
        type: array
      location:
        description: |-
          The location name. All position information attached to an expression is
          relative to this location.

          The location could be a file, UI element, or similar. For example,
          `acme/app/AnvilPolicy.cel`.
        type: string
      macro_calls:
        additionalProperties:
          $ref: '#/definitions/expr.Expr'
        description: |-
          A map from the parse node id where a macro replacement was made to the
          call `Expr` that resulted in a macro expansion.

          For example, `has(value.field)` is a function call that is replaced by a
          `test_only` field selection in the AST. Likewise, the call
          `list.exists(e, e > 10)` translates to a comprehension expression. The key
          in the map corresponds to the expression id of the expanded macro, and the
          value is the call `Expr` that was replaced.
        type: object
      positions:
        additionalProperties:
          type: integer
        description: |-
          A map from the parse node id (e.g. `Expr.id`) to the code point offset
          within the source.
        type: object
      syntax_version:
        description: The syntax version of the source, e.g. `cel1`.
        type: string
    type: object
  expr.Type:
    properties:
      typeKind:
        description: "The kind of type.\n\nTypes that are assignable to TypeKind:\n\n\t*Type_Dyn\n\t*Type_Null\n\t*Type_Primitive\n\t*Type_Wrapper\n\t*Type_WellKnown\n\t*Type_ListType_\n\t*Type_MapType_\n\t*Type_Function\n\t*Type_MessageType\n\t*Type_TypeParam\n\t*Type_Type\n\t*Type_Error\n\t*Type_AbstractType_"
    type: object
  github_com_envoyproxy_go-control-plane_envoy_config_rbac_v3.RBAC:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/rbacv3.RBAC_Action'
        description: |-
          The action to take if a policy matches. Every action either allows or denies a request,
          and can also carry out action-specific operations.

          Actions:

            - “ALLOW“: Allows the request if and only if there is a policy that matches
              the request.
            - “DENY“: Allows the request if and only if there are no policies that
              match the request.
            - “LOG“: Allows all requests. If at least one policy matches, the dynamic
              metadata key “access_log_hint“ is set to the value “true“ under the shared
              key namespace “envoy.common“. If no policies match, it is set to “false“.
              Other actions do not modify this key.
      audit_logging_options:
        allOf:
        - $ref: '#/definitions/rbacv3.RBAC_AuditLoggingOptions'
        description: |-
          Audit logging options that include the condition for audit logging to happen
          and audit logger configurations.

          [#not-implemented-hide:]
      policies:
        additionalProperties:
          $ref: '#/definitions/rbacv3.Policy'
        description: |-
          Maps from policy name to policy. A match occurs when at least one policy matches the request.
          The policies are evaluated in lexicographic order of the policy name.
        type: object
    type: object
  github_com_envoyproxy_go-control-plane_envoy_extensions_filters_http_rbac_v3.RBAC:
    properties:
      matcher:
        allOf:
        - $ref: '#/definitions/v3.Matcher'
        description: |-
          The match tree to use when resolving RBAC action for incoming requests. Requests do not
          match any matcher will be denied.
          If absent, no enforcing RBAC matcher will be applied.
          If present and empty, deny all requests.
      rules:
        allOf:
        - $ref: '#/definitions/github_com_envoyproxy_go-control-plane_envoy_config_rbac_v3.RBAC'
        description: |-
          Specify the RBAC rules to be applied globally.
          If absent, no enforcing RBAC policy will be applied.
          If present and empty, DENY.
          If both rules and matcher are configured, rules will be ignored.
      shadow_matcher:
        allOf:
        - $ref: '#/definitions/v3.Matcher'
        description: |-
          The match tree to use for emitting stats and logs which can be used for rule testing for
          incoming requests.
          If absent, no shadow matcher will be applied.
      shadow_rules:
        allOf:
        - $ref: '#/definitions/github_com_envoyproxy_go-control-plane_envoy_config_rbac_v3.RBAC'
        description: |-
          Shadow rules are not enforced by the filter (i.e., returning a 403)
          but will emit stats and logs and can be used for rule testing.
          If absent, no shadow RBAC policy will be applied.
          If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
      shadow_rules_stat_prefix:
        description: |-
          If specified, shadow rules will emit stats with the given prefix.
          This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
          shadow rules.
        type: string
    type: object
  github_com_envoyproxy_go-control-plane_envoy_extensions_filters_http_router_v3.Router:
    properties:
      dynamic_stats:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the router generates dynamic cluster statistics. Defaults to
          true. Can be disabled in high performance scenarios.
      respect_expected_rq_timeout:
        description: |-
          If not set, ingress Envoy will ignore
          :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
          Envoy, when deriving timeout for upstream cluster.
        type: boolean
      start_child_span:
        description: "Whether to start a child span for egress routed calls. This
          can be\nuseful in scenarios where other filters (auth, ratelimit, etc.)
          make\noutbound calls and have child spans rooted at the same ingress\nparent.
          Defaults to false.\n\n.. attention::\n\n\tThis field is deprecated by the\n\t:ref:`spawn_upstream_span
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`.\n\tPlease
          use that ``spawn_upstream_span`` field to control the span creation.\n\nDeprecated:
          Marked as deprecated in envoy/extensions/filters/http/router/v3/router.proto."
        type: boolean
      strict_check_headers:
        description: |-
          Specifies a list of HTTP headers to strictly validate. Envoy will reject a
          request and respond with HTTP status 400 if the request contains an invalid
          value for any of the headers listed in this field. Strict header checking
          is only supported for the following headers:

          Value must be a ','-delimited list (i.e. no spaces) of supported retry
          policy values:

          * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
          * :ref:`config_http_filters_router_x-envoy-retry-on`

          Value must be an integer:

          * :ref:`config_http_filters_router_x-envoy-max-retries`
          * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
          * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
        items:
          type: string
        type: array
      suppress_envoy_headers:
        description: |-
          Do not add any additional “x-envoy-“ headers to requests or responses. This
          only affects the :ref:`router filter generated x-envoy- headers
          <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
          connection manager may continue to set “x-envoy-“ headers.
        type: boolean
      suppress_grpc_request_failure_code_stats:
        description: |-
          If set, Envoy will avoid incrementing HTTP failure code stats
          on gRPC requests. This includes the individual status code value
          (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
          This field is useful if interested in relying only on the gRPC
          stats filter to define success and failure metrics for gRPC requests
          as not all failed gRPC requests charge HTTP status code metrics. See
          :ref:`gRPC stats filter<config_http_filters_grpc_stats>` documentation
          for more details.
        type: boolean
      upstream_http_filters:
        description: ".. note::\n\n\tUpstream HTTP filters are currently in alpha.\n\nOptional
          HTTP filters for the upstream HTTP filter chain.\n\nThese filters will be
          applied for all requests that pass through the router.\nThey will also be
          applied to shadowed requests.\nUpstream HTTP filters cannot change route
          or cluster.\nUpstream HTTP filters specified on the cluster will override
          these filters.\n\nIf using upstream HTTP filters, please be aware that local
          errors sent by\nupstream HTTP filters will not trigger retries, and local
          errors sent by\nupstream HTTP filters will count as a final response if
          hedging is configured.\n[#extension-category: envoy.filters.http.upstream]"
        items:
          $ref: '#/definitions/http_connection_managerv3.HttpFilter'
        type: array
      upstream_log:
        description: |-
          Configuration for HTTP upstream logs emitted by the router. Upstream logs
          are configured in the same way as access logs, but each log entry represents
          an upstream request. Presuming retries are configured, multiple upstream
          requests may be made for each downstream (inbound) request.
        items:
          $ref: '#/definitions/accesslogv3.AccessLog'
        type: array
      upstream_log_options:
        allOf:
        - $ref: '#/definitions/routerv3.Router_UpstreamAccessLogOptions'
        description: Additional upstream access log options.
    type: object
  github_com_golang_protobuf_ptypes_struct.Struct:
    properties:
      fields:
        additionalProperties:
          $ref: '#/definitions/google_golang_org_protobuf_types_known_structpb.Value'
        description: Unordered map of dynamically typed values.
        type: object
    type: object
  google_golang_org_protobuf_types_known_structpb.Value:
    properties:
      kind:
        description: "The kind of value.\n\nTypes that are assignable to Kind:\n\n\t*Value_NullValue\n\t*Value_NumberValue\n\t*Value_StringValue\n\t*Value_BoolValue\n\t*Value_StructValue\n\t*Value_ListValue"
    type: object
  handlers.GetClustersResponse:
    properties:
      clusters:
        items:
          $ref: '#/definitions/clusterv3.Cluster'
        type: array
    type: object
  handlers.GetHCMFilterResponse:
    properties:
      filters:
        items:
          $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager'
        type: array
    type: object
  handlers.GetHttpFilterRBACResponse:
    properties:
      rbac:
        $ref: '#/definitions/github_com_envoyproxy_go-control-plane_envoy_extensions_filters_http_rbac_v3.RBAC'
    type: object
  handlers.GetHttpFilterRouterResponse:
    properties:
      router:
        $ref: '#/definitions/github_com_envoyproxy_go-control-plane_envoy_extensions_filters_http_router_v3.Router'
    type: object
  handlers.GetHttpsFilterResponse:
    properties:
      httpFilters:
        items:
          $ref: '#/definitions/http_connection_managerv3.HttpFilter'
        type: array
    type: object
  handlers.GetListenersResponse:
    properties:
      listeners:
        items:
          $ref: '#/definitions/listenerv3.Listener'
        type: array
    type: object
  handlers.GetRouteConfigurationsResponse:
    properties:
      routeConfigurations:
        items:
          $ref: '#/definitions/routev3.RouteConfiguration'
        type: array
    type: object
  handlers.GetSecretsResponse:
    properties:
      secrets:
        items:
          $ref: '#/definitions/tlsv3.Secret'
        type: array
    type: object
  handlers.GetTCPProxyFilterResponse:
    properties:
      filters:
        items:
          $ref: '#/definitions/tcp_proxyv3.TcpProxy'
        type: array
    type: object
  handlers.Location:
    properties:
      filter:
        type: string
      filter_chain:
        type: string
      listener:
        type: string
      route_configuration:
        type: string
    type: object
  handlers.getDomainLocationResponse:
    properties:
      locations:
        items:
          $ref: '#/definitions/handlers.Location'
        type: array
    type: object
  handlers.getDomainsResponse:
    properties:
      domains:
        items:
          type: string
        type: array
    type: object
  handlers.getFilterTypeResponse:
    properties:
      filter_type:
        type: string
    type: object
  http_connection_managerv3.HttpConnectionManager:
    properties:
      access_log:
        description: |-
          Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
          emitted by the connection manager.
        items:
          $ref: '#/definitions/accesslogv3.AccessLog'
        type: array
      access_log_flush_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          .. attention::
          This field is deprecated in favor of
          :ref:`access_log_flush_interval
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.HcmAccessLogOptions.access_log_flush_interval>`.
          Note that if both this field and :ref:`access_log_flush_interval
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.HcmAccessLogOptions.access_log_flush_interval>`
          are specified, the former (deprecated field) is ignored.

          Deprecated: Marked as deprecated in envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto.
      access_log_options:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_HcmAccessLogOptions'
        description: Additional access log options for HTTP connection manager.
      add_proxy_protocol_connection_state:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the HCM will add ProxyProtocolFilterState to the Connection lifetime filter state. Defaults to “true“.
          This should be set to “false“ in cases where Envoy's view of the downstream address may not correspond to the
          actual client address, for example, if there's another proxy in front of the Envoy.
      add_user_agent:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
          and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
          documentation for more information. Defaults to false.
      always_set_request_id_in_response:
        description: |-
          If set, Envoy will always set :ref:`x-request-id <config_http_conn_man_headers_x-request-id>` header in response.
          If this is false or not set, the request ID is returned in responses only if tracing is forced using
          :ref:`x-envoy-force-trace <config_http_conn_man_headers_x-envoy-force-trace>` header.
        type: boolean
      append_x_forwarded_port:
        description: |-
          Append the “x-forwarded-port“ header with the port value client used to connect to Envoy. It
          will be ignored if the “x-forwarded-port“ header has been set by any trusted proxy in front of Envoy.
        type: boolean
      codec_type:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_CodecType'
        description: Supplies the type of codec that the connection manager should
          use.
      common_http_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.HttpProtocolOptions'
        description: |-
          Additional settings for HTTP requests handled by the connection manager. These will be
          applicable to both HTTP1 and HTTP2 requests.
      delayed_close_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: "The delayed close timeout is for downstream connections managed
          by the HTTP connection manager.\nIt is defined as a grace period after connection
          close processing has been locally initiated\nduring which Envoy will wait
          for the peer to close (i.e., a TCP FIN/RST is received by Envoy\nfrom the
          downstream connection) prior to Envoy closing the socket associated with
          that\nconnection.\nNOTE: This timeout is enforced even when the socket associated
          with the downstream connection\nis pending a flush of the write buffer.
          However, any progress made writing data to the socket\nwill restart the
          timer associated with this timeout. This means that the total grace period
          for\na socket in this state will be\n<total_time_waiting_for_write_buffer_flushes>+<delayed_close_timeout>.\n\nDelaying
          Envoy's connection close and giving the peer the opportunity to initiate
          the close\nsequence mitigates a race condition that exists when downstream
          clients do not drain/process\ndata in a connection's receive buffer after
          a remote close has been detected via a socket\nwrite(). This race leads
          to such clients failing to process the response code sent by Envoy,\nwhich
          could result in erroneous downstream processing.\n\nIf the timeout triggers,
          Envoy will close the connection's socket.\n\nThe default timeout is 1000
          ms if this option is not specified.\n\n.. NOTE::\n\n\tTo be useful in avoiding
          the race condition described above, this timeout must be set\n\tto *at least*
          <max round trip time expected between clients and Envoy>+<100ms to account
          for\n\ta reasonable \"worst\" case processing time for a full iteration
          of Envoy's event loop>.\n\n.. WARNING::\n\n\tA value of 0 will completely
          disable delayed close processing. When disabled, the downstream\n\tconnection's
          socket will be closed immediately after the write flush is completed or
          will\n\tnever close if the write flush does not complete."
      drain_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The time that Envoy will wait between sending an HTTP/2 “shutdown
          notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
          This is used so that Envoy provides a grace period for new streams that
          race with the final GOAWAY frame. During this grace period, Envoy will
          continue to accept new streams. After the grace period, a final GOAWAY
          frame is sent and Envoy will start refusing new streams. Draining occurs
          both when a connection hits the idle timeout or during general server
          draining. The default grace period is 5000 milliseconds (5 seconds) if this
          option is not specified.
      early_header_mutation_extensions:
        description: |-
          The configuration for the early header mutation extensions.

          When configured the extensions will be called before any routing, tracing, or any filter processing.
          Each extension will be applied in the order they are configured.
          If the same header is mutated by multiple extensions, then the last extension will win.

          [#extension-category: envoy.http.early_header_mutation]
        items:
          $ref: '#/definitions/v3.TypedExtensionConfig'
        type: array
      flush_access_log_on_new_request:
        description: |-
          .. attention::
          This field is deprecated in favor of
          :ref:`flush_access_log_on_new_request
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.HcmAccessLogOptions.flush_access_log_on_new_request>`.
          Note that if both this field and :ref:`flush_access_log_on_new_request
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.HcmAccessLogOptions.flush_access_log_on_new_request>`
          are specified, the former (deprecated field) is ignored.

          Deprecated: Marked as deprecated in envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto.
        type: boolean
      forward_client_cert_details:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_ForwardClientCertDetails'
        description: |-
          How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
          header.
      generate_request_id:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the connection manager will generate the :ref:`x-request-id
          <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to
          true. Generating a random UUID4 is expensive so in high throughput scenarios where this feature
          is not desired it can be disabled.
      http_filters:
        description: |-
          A list of individual HTTP filters that make up the filter chain for
          requests made to the connection manager. :ref:`Order matters <arch_overview_http_filters_ordering>`
          as the filters are processed sequentially as request events happen.
        items:
          $ref: '#/definitions/http_connection_managerv3.HttpFilter'
        type: array
      http_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.Http1ProtocolOptions'
        description: |-
          Additional HTTP/1 settings that are passed to the HTTP/1 codec.
          [#comment:TODO: The following fields are ignored when the
          :ref:`header validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`
          is present:
          1. :ref:`allow_chunked_length <envoy_v3_api_field_config.core.v3.Http1ProtocolOptions.allow_chunked_length>`]
      http2_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.Http2ProtocolOptions'
        description: Additional HTTP/2 settings that are passed directly to the HTTP/2
          codec.
      http3_protocol_options:
        allOf:
        - $ref: '#/definitions/corev3.Http3ProtocolOptions'
        description: |-
          Additional HTTP/3 settings that are passed directly to the HTTP/3 codec.
          [#not-implemented-hide:]
      internal_address_config:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_InternalAddressConfig'
        description: |-
          Configures what network addresses are considered internal for stats and header sanitation
          purposes. If unspecified, only RFC1918 IP addresses will be considered internal.
          See the documentation for :ref:`config_http_conn_man_headers_x-envoy-internal` for more
          information about internal/external addresses.
      local_reply_config:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.LocalReplyConfig'
        description: |-
          The configuration to customize local reply returned by Envoy. It can customize status code,
          body text and response content type. If not specified, status code and text body are hard
          coded in Envoy, the response content type is plain text.
      max_request_headers_kb:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum request headers size for incoming connections.
          If unconfigured, the default max request headers allowed is 60 KiB.
          Requests that exceed this limit will receive a 431 response.
      merge_slashes:
        description: |-
          Determines if adjacent slashes in the path are merged into one before any processing of
          requests by HTTP filters or routing. This affects the upstream “:path“ header as well. Without
          setting this option, incoming requests with path “//dir///file“ will not match against route
          with “prefix“ match set to “/dir“. Defaults to “false“. Note that slash merging is not part of
          `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
          [#comment:TODO: This field is ignored when the
          :ref:`header validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`
          is present.]
        type: boolean
      normalize_path:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Should paths be normalized according to RFC 3986 before any processing of
          requests by HTTP filters or routing? This affects the upstream “:path“ header
          as well. For paths that fail this check, Envoy will respond with 400 to
          paths that are malformed. This defaults to false currently but will default
          true in the future. When not specified, this value may be overridden by the
          runtime variable
          :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
          See `Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6>`_
          for details of normalization.
          Note that Envoy does not perform
          `case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
          [#comment:TODO: This field is ignored when the
          :ref:`header validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`
          is present.]
      original_ip_detection_extensions:
        description: "The configuration for the original IP detection extensions.\n\nWhen
          configured the extensions will be called along with the request headers\nand
          information about the downstream connection, such as the directly connected
          address.\nEach extension will then use these parameters to decide the request's
          effective remote address.\nIf an extension fails to detect the original
          IP address and isn't configured to reject\nthe request, the HCM will try
          the remaining extensions until one succeeds or rejects\nthe request. If
          the request isn't rejected nor any extension succeeds, the HCM will\nfallback
          to using the remote address.\n\n.. WARNING::\n\n\tExtensions cannot be used
          in conjunction with :ref:`use_remote_address\n\t<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address>`\n\tnor
          :ref:`xff_num_trusted_hops\n\t<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.xff_num_trusted_hops>`.\n\n[#extension-category:
          envoy.http.original_ip_detection]"
        items:
          $ref: '#/definitions/v3.TypedExtensionConfig'
        type: array
      path_normalization_options:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_PathNormalizationOptions'
        description: |-
          [#not-implemented-hide:] Path normalization configuration. This includes
          configurations for transformations (e.g. RFC 3986 normalization or merge
          adjacent slashes) and the policy to apply them. The policy determines
          whether transformations affect the forwarded “:path“ header. RFC 3986 path
          normalization is enabled by default and the default policy is that the
          normalized header will be forwarded. See :ref:`PathNormalizationOptions
          <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.PathNormalizationOptions>`
          for details.
      path_with_escaped_slashes_action:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_PathWithEscapedSlashesAction'
        description: |-
          Action to take when request URL path contains escaped slash sequences (%2F, %2f, %5C and %5c).
          The default value can be overridden by the :ref:`http_connection_manager.path_with_escaped_slashes_action<config_http_conn_man_runtime_path_with_escaped_slashes_action>`
          runtime variable.
          The :ref:`http_connection_manager.path_with_escaped_slashes_action_sampling<config_http_conn_man_runtime_path_with_escaped_slashes_action_enabled>` runtime
          variable can be used to apply the action to a portion of all requests.
          [#comment:TODO: This field is ignored when the
          :ref:`header validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`
          is present.]
      preserve_external_request_id:
        description: |-
          Whether the connection manager will keep the :ref:`x-request-id
          <config_http_conn_man_headers_x-request-id>` header if passed for a request that is edge
          (Edge request is the request from external clients to front Envoy) and not reset it, which
          is the current Envoy behaviour. This defaults to false.
        type: boolean
      proxy_100_continue:
        description: |-
          If proxy_100_continue is true, Envoy will proxy incoming "Expect:
          100-continue" headers upstream, and forward "100 Continue" responses
          downstream. If this is false or not set, Envoy will instead strip the
          "Expect: 100-continue" header, and send a "100 Continue" response itself.
        type: boolean
      proxy_status_config:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_ProxyStatusConfig'
        description: |-
          Proxy-Status HTTP response header configuration.
          If this config is set, the Proxy-Status HTTP response header field is
          populated. By default, it is not.
      represent_ipv4_remote_address_as_ipv4_mapped_ipv6:
        description: |-
          If
          :ref:`use_remote_address
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address>`
          is true and represent_ipv4_remote_address_as_ipv4_mapped_ipv6 is true and the remote address is
          an IPv4 address, the address will be mapped to IPv6 before it is appended to “x-forwarded-for“.
          This is useful for testing compatibility of upstream services that parse the header value. For
          example, 50.0.0.1 is represented as ::FFFF:50.0.0.1. See `IPv4-Mapped IPv6 Addresses
          <https://tools.ietf.org/html/rfc4291#section-2.5.5.2>`_ for details. This will also affect the
          :ref:`config_http_conn_man_headers_x-envoy-external-address` header. See
          :ref:`http_connection_manager.represent_ipv4_remote_address_as_ipv4_mapped_ipv6
          <config_http_conn_man_runtime_represent_ipv4_remote_address_as_ipv4_mapped_ipv6>` for runtime
          control.
          [#not-implemented-hide:]
        type: boolean
      request_headers_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The amount of time that Envoy will wait for the request headers to be received. The timer is
          activated when the first byte of the headers is received, and is disarmed when the last byte of
          the headers has been received. If not specified or set to 0, this timeout is disabled.
      request_id_extension:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.RequestIDExtension'
        description: "The configuration of the request ID extension. This includes
          operations such as\ngeneration, validation, and associated tracing operations.
          If empty, the\n:ref:`UuidRequestIdConfig <envoy_v3_api_msg_extensions.request_id.uuid.v3.UuidRequestIdConfig>`\ndefault
          extension is used with default parameters. See the documentation for that
          extension\nfor details on what it does. Customizing the configuration for
          the default extension can be\nachieved by configuring it explicitly here.
          For example, to disable trace reason packing,\nthe following configuration
          can be used:\n\n.. validated-code-block:: yaml\n\n\t:type-name: envoy.extensions.filters.network.http_connection_manager.v3.RequestIDExtension\n\n\ttyped_config:\n\t
          \ \"@type\": type.googleapis.com/envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig\n\t
          \ pack_trace_reason: false\n\n[#extension-category: envoy.request_id]"
      request_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The amount of time that Envoy will wait for the entire request to be received.
          The timer is activated when the request is initiated, and is disarmed when the last byte of the
          request is sent upstream (i.e. all decoding filters have processed the request), OR when the
          response is initiated. If not specified or set to 0, this timeout is disabled.
      routeSpecifier:
        description: "Types that are assignable to RouteSpecifier:\n\n\t*HttpConnectionManager_Rds\n\t*HttpConnectionManager_RouteConfig\n\t*HttpConnectionManager_ScopedRoutes"
      scheme_header_transformation:
        allOf:
        - $ref: '#/definitions/corev3.SchemeHeaderTransformation'
        description: |-
          Allows for explicit transformation of the :scheme header on the request path.
          If not set, Envoy's default :ref:`scheme  <config_http_conn_man_headers_scheme>`
          handling applies.
      server_header_transformation:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_ServerHeaderTransformation'
        description: |-
          Defines the action to be applied to the Server header on the response path.
          By default, Envoy will overwrite the header with the value specified in
          server_name.
      server_name:
        description: |-
          An optional override that the connection manager will write to the server
          header in responses. If not set, the default is “envoy“.
        type: string
      set_current_client_cert_details:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_SetCurrentClientCertDetails'
        description: |-
          This field is valid only when :ref:`forward_client_cert_details
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.forward_client_cert_details>`
          is APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
          the client certificate to be forwarded. Note that in the
          :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, “Hash“ is always set, and
          “By“ is always set when the client certificate presents the URI type Subject Alternative Name
          value.
      skip_xff_append:
        description: |-
          If set, Envoy will not append the remote address to the
          :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. This may be used in
          conjunction with HTTP filters that explicitly manipulate XFF after the HTTP connection manager
          has mutated the request headers. While :ref:`use_remote_address
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address>`
          will also suppress XFF addition, it has consequences for logging and other
          Envoy uses of the remote address, so “skip_xff_append“ should be used
          when only an elision of XFF addition is intended.
        type: boolean
      stat_prefix:
        description: |-
          The human readable prefix to use when emitting statistics for the
          connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
          more information.
        type: string
      stream_error_on_invalid_http_message:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Governs Envoy's behavior when receiving invalid HTTP from downstream.
          If this option is false (default), Envoy will err on the conservative side handling HTTP
          errors, terminating both HTTP/1.1 and HTTP/2 connections when receiving an invalid request.
          If this option is set to true, Envoy will be more permissive, only resetting the invalid
          stream in the case of HTTP/2 and leaving the connection open where possible (if the entire
          request is read for HTTP/1.1)
          In general this should be true for deployments receiving trusted traffic (L2 Envoys,
          company-internal mesh) and false when receiving untrusted traffic (edge deployments).

          If different behaviors for invalid_http_message for HTTP/1 and HTTP/2 are
          desired, one should use the new HTTP/1 option :ref:`override_stream_error_on_invalid_http_message
          <envoy_v3_api_field_config.core.v3.Http1ProtocolOptions.override_stream_error_on_invalid_http_message>` or the new HTTP/2 option
          :ref:`override_stream_error_on_invalid_http_message
          <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message>`
          “not“ the deprecated but similarly named :ref:`stream_error_on_invalid_http_messaging
          <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.stream_error_on_invalid_http_messaging>`
      stream_idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The stream idle timeout for connections managed by the connection manager.
          If not specified, this defaults to 5 minutes. The default value was selected
          so as not to interfere with any smaller configured timeouts that may have
          existed in configurations prior to the introduction of this feature, while
          introducing robustness to TCP connections that terminate without a FIN.

          This idle timeout applies to new streams and is overridable by the
          :ref:`route-level idle_timeout
          <envoy_v3_api_field_config.route.v3.RouteAction.idle_timeout>`. Even on a stream in
          which the override applies, prior to receipt of the initial request
          headers, the :ref:`stream_idle_timeout
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
          applies. Each time an encode/decode event for headers or data is processed
          for the stream, the timer will be reset. If the timeout fires, the stream
          is terminated with a 408 Request Timeout error code if no upstream response
          header has been received, otherwise a stream reset occurs.

          This timeout also specifies the amount of time that Envoy will wait for the peer to open enough
          window to write any remaining stream data once the entirety of stream data (local end stream is
          true) has been buffered pending available window. In other words, this timeout defends against
          a peer that does not release enough window to completely write the stream, even though all
          data has been proxied within available flow control windows. If the timeout is hit in this
          case, the :ref:`tx_flush_timeout <config_http_conn_man_stats_per_codec>` counter will be
          incremented. Note that :ref:`max_stream_duration
          <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.max_stream_duration>` does not apply to
          this corner case.

          If the :ref:`overload action <config_overload_manager_overload_actions>` "envoy.overload_actions.reduce_timeouts"
          is configured, this timeout is scaled according to the value for
          :ref:`HTTP_DOWNSTREAM_STREAM_IDLE <envoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_STREAM_IDLE>`.

          Note that it is possible to idle timeout even if the wire traffic for a stream is non-idle, due
          to the granularity of events presented to the connection manager. For example, while receiving
          very large request headers, it may be the case that there is traffic regularly arriving on the
          wire while the connection manage is only able to observe the end-of-headers event, hence the
          stream may still idle timeout.

          A value of 0 will completely disable the connection manager stream idle
          timeout, although per-route idle timeout overrides will continue to apply.
      strip_matching_host_port:
        description: |-
          Determines if the port part should be removed from host/authority header before any processing
          of request by HTTP filters or routing. The port would be removed only if it is equal to the :ref:`listener's<envoy_v3_api_field_config.listener.v3.Listener.address>`
          local port. This affects the upstream host header unless the method is
          CONNECT in which case if no filter adds a port the original port will be restored before headers are
          sent upstream.
          Without setting this option, incoming requests with host “example:443“ will not match against
          route with :ref:`domains<envoy_v3_api_field_config.route.v3.VirtualHost.domains>` match set to “example“. Defaults to “false“. Note that port removal is not part
          of `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
          Only one of “strip_matching_host_port“ or “strip_any_host_port“ can be set.
        type: boolean
      strip_trailing_host_dot:
        description: |-
          Determines if trailing dot of the host should be removed from host/authority header before any
          processing of request by HTTP filters or routing.
          This affects the upstream host header.
          Without setting this option, incoming requests with host “example.com.“ will not match against
          route with :ref:`domains<envoy_v3_api_field_config.route.v3.VirtualHost.domains>` match set to “example.com“. Defaults to “false“.
          When the incoming request contains a host/authority header that includes a port number,
          setting this option will strip a trailing dot, if present, from the host section,
          leaving the port as is (e.g. host value “example.com.:443“ will be updated to “example.com:443“).
        type: boolean
      stripPortMode:
        description: "Types that are assignable to StripPortMode:\n\n\t*HttpConnectionManager_StripAnyHostPort"
      tracing:
        allOf:
        - $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_Tracing'
        description: |-
          Presence of the object defines whether the connection manager
          emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
          <envoy_v3_api_msg_config.trace.v3.Tracing>`.
      typed_header_validation_config:
        allOf:
        - $ref: '#/definitions/v3.TypedExtensionConfig'
        description: "Configuration options for Header Validation (UHV).\nUHV is an
          extensible mechanism for checking validity of HTTP requests as well as providing\nnormalization
          for request attributes, such as URI path.\nIf the typed_header_validation_config
          is present it overrides the following options:\n“normalize_path“, “merge_slashes“,
          “path_with_escaped_slashes_action“\n“http_protocol_options.allow_chunked_length“,
          “common_http_protocol_options.headers_with_underscores_action“.\n\nThe default
          UHV checks the following:\n\n#. HTTP/1 header map validity according to
          `RFC 7230 section 3.2<https://datatracker.ietf.org/doc/html/rfc7230#section-3.2>`_\n#.
          Syntax of HTTP/1 request target URI and response status\n#. HTTP/2 header
          map validity according to `RFC 7540 section 8.1.2<https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2`_\n#.
          Syntax of HTTP/2 pseudo headers\n#. HTTP/3 header map validity according
          to `RFC 9114 section 4.3 <https://www.rfc-editor.org/rfc/rfc9114.html>`_\n#.
          Syntax of HTTP/3 pseudo headers\n#. Syntax of “Content-Length“ and “Transfer-Encoding“\n#.
          Validation of HTTP/1 requests with both “Content-Length“ and “Transfer-Encoding“
          headers\n#. Normalization of the URI path according to `Normalization and
          Comparison <https://datatracker.ietf.org/doc/html/rfc3986#section-6>`_\n\n\twithout
          `case normalization <https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2.1>`_\n\n[#not-implemented-hide:]\n[#extension-category:
          envoy.http.header_validators]"
      upgrade_configs:
        items:
          $ref: '#/definitions/http_connection_managerv3.HttpConnectionManager_UpgradeConfig'
        type: array
      use_remote_address:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          If set to true, the connection manager will use the real remote address
          of the client connection when determining internal versus external origin and manipulating
          various headers. If set to false or absent, the connection manager will use the
          :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
          :ref:`config_http_conn_man_headers_x-forwarded-for`,
          :ref:`config_http_conn_man_headers_x-envoy-internal`, and
          :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
      via:
        description: |-
          Via header value to append to request and response headers. If this is
          empty, no via header will be appended.
        type: string
      xff_num_trusted_hops:
        description: |-
          The number of additional ingress proxy hops from the right side of the
          :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
          determining the origin client's IP address. The default is zero if this option
          is not specified. See the documentation for
          :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
        type: integer
    type: object
  http_connection_managerv3.HttpConnectionManager_CodecType:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - HttpConnectionManager_AUTO
    - HttpConnectionManager_HTTP1
    - HttpConnectionManager_HTTP2
    - HttpConnectionManager_HTTP3
  http_connection_managerv3.HttpConnectionManager_ForwardClientCertDetails:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - HttpConnectionManager_SANITIZE
    - HttpConnectionManager_FORWARD_ONLY
    - HttpConnectionManager_APPEND_FORWARD
    - HttpConnectionManager_SANITIZE_SET
    - HttpConnectionManager_ALWAYS_FORWARD_ONLY
  http_connection_managerv3.HttpConnectionManager_HcmAccessLogOptions:
    properties:
      access_log_flush_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The interval to flush the above access logs. By default, the HCM will flush exactly one access log
          on stream close, when the HTTP request is complete. If this field is set, the HCM will flush access
          logs periodically at the specified interval. This is especially useful in the case of long-lived
          requests, such as CONNECT and Websockets. Final access logs can be detected via the
          “requestComplete()“ method of “StreamInfo“ in access log filters, or through the “%DURATION%“ substitution
          string.
          The interval must be at least 1 millisecond.
      flush_access_log_on_new_request:
        description: |-
          If set to true, HCM will flush an access log when a new HTTP request is received, after request
          headers have been evaluated, before iterating through the HTTP filter chain.
          This log record, if enabled, does not depend on periodic log records or request completion log.
          Details related to upstream cluster, such as upstream host, will not be available for this log.
        type: boolean
      flush_log_on_tunnel_successfully_established:
        description: |-
          If true, the HCM will flush an access log when a tunnel is successfully established. For example,
          this could be when an upstream has successfully returned 101 Switching Protocols, or when the proxy
          has returned 200 to a CONNECT request.
        type: boolean
    type: object
  http_connection_managerv3.HttpConnectionManager_InternalAddressConfig:
    properties:
      cidr_ranges:
        description: |-
          List of CIDR ranges that are treated as internal. If unset, then RFC1918 / RFC4193
          IP addresses will be considered internal.
        items:
          $ref: '#/definitions/v3.CidrRange'
        type: array
      unix_sockets:
        description: Whether unix socket addresses should be considered internal.
        type: boolean
    type: object
  http_connection_managerv3.HttpConnectionManager_PathNormalizationOptions:
    properties:
      forwarding_transformation:
        allOf:
        - $ref: '#/definitions/httpv3.PathTransformation'
        description: |-
          [#not-implemented-hide:] Normalization applies internally before any processing of requests by
          HTTP filters, routing, and matching *and* will affect the forwarded “:path“ header. Defaults
          to :ref:`NormalizePathRFC3986
          <envoy_v3_api_msg_type.http.v3.PathTransformation.Operation.NormalizePathRFC3986>`. When not
          specified, this value may be overridden by the runtime variable
          :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
          Envoy will respond with 400 to paths that are malformed (e.g. for paths that fail RFC 3986
          normalization due to disallowed characters.)
      http_filter_transformation:
        allOf:
        - $ref: '#/definitions/httpv3.PathTransformation'
        description: |-
          [#not-implemented-hide:] Normalization only applies internally before any processing of
          requests by HTTP filters, routing, and matching. These will be applied after full
          transformation is applied. The “:path“ header before this transformation will be restored in
          the router filter and sent upstream unless it was mutated by a filter. Defaults to no
          transformations.
          Multiple actions can be applied in the same Transformation, forming a sequential
          pipeline. The transformations will be performed in the order that they appear. Envoy will
          respond with 400 to paths that are malformed (e.g. for paths that fail RFC 3986
          normalization due to disallowed characters.)
    type: object
  http_connection_managerv3.HttpConnectionManager_PathWithEscapedSlashesAction:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - HttpConnectionManager_IMPLEMENTATION_SPECIFIC_DEFAULT
    - HttpConnectionManager_KEEP_UNCHANGED
    - HttpConnectionManager_REJECT_REQUEST
    - HttpConnectionManager_UNESCAPE_AND_REDIRECT
    - HttpConnectionManager_UNESCAPE_AND_FORWARD
  http_connection_managerv3.HttpConnectionManager_ProxyStatusConfig:
    properties:
      proxyName:
        description: "The name of the proxy as it appears at the start of the Proxy-Status\nheader.\n\nIf
          neither of these values are set, this value defaults to “server_name“,\nwhich
          itself defaults to \"envoy\".\n\nTypes that are assignable to ProxyName:\n\n\t*HttpConnectionManager_ProxyStatusConfig_UseNodeId\n\t*HttpConnectionManager_ProxyStatusConfig_LiteralProxyName"
      remove_connection_termination_details:
        description: |-
          If true, the details field of the Proxy-Status header will not contain
          connection termination details. This value defaults to “false“, i.e. the
          “details“ field will contain connection termination details by default.
        type: boolean
      remove_details:
        description: |-
          If true, the details field of the Proxy-Status header is not populated with stream_info.response_code_details.
          This value defaults to “false“, i.e. the “details“ field is populated by default.
        type: boolean
      remove_response_flags:
        description: |-
          If true, the details field of the Proxy-Status header will not contain an
          enumeration of the Envoy ResponseFlags. This value defaults to “false“,
          i.e. the “details“ field will contain a list of ResponseFlags by default.
        type: boolean
      set_recommended_response_code:
        description: |-
          If true, overwrites the existing Status header with the response code
          recommended by the Proxy-Status spec.
          This value defaults to “false“, i.e. the HTTP response code is not
          overwritten.
        type: boolean
    type: object
  http_connection_managerv3.HttpConnectionManager_ServerHeaderTransformation:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - HttpConnectionManager_OVERWRITE
    - HttpConnectionManager_APPEND_IF_ABSENT
    - HttpConnectionManager_PASS_THROUGH
  http_connection_managerv3.HttpConnectionManager_SetCurrentClientCertDetails:
    properties:
      cert:
        description: |-
          Whether to forward the entire client cert in URL encoded PEM format. This will appear in the
          XFCC header comma separated from other values with the value Cert="PEM".
          Defaults to false.
        type: boolean
      chain:
        description: |-
          Whether to forward the entire client cert chain (including the leaf cert) in URL encoded PEM
          format. This will appear in the XFCC header comma separated from other values with the value
          Chain="PEM".
          Defaults to false.
        type: boolean
      dns:
        description: |-
          Whether to forward the DNS type Subject Alternative Names of the client cert.
          Defaults to false.
        type: boolean
      subject:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: Whether to forward the subject of the client cert. Defaults to
          false.
      uri:
        description: |-
          Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
          false.
        type: boolean
    type: object
  http_connection_managerv3.HttpConnectionManager_Tracing:
    properties:
      client_sampling:
        allOf:
        - $ref: '#/definitions/typev3.Percent'
        description: |-
          Target percentage of requests managed by this HTTP connection manager that will be force
          traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
          header is set. This field is a direct analog for the runtime variable
          'tracing.client_enabled' in the :ref:`HTTP Connection Manager
          <config_http_conn_man_runtime>`.
          Default: 100%
      custom_tags:
        description: A list of custom tags with unique tag name to create tags for
          the active span.
        items:
          $ref: '#/definitions/tracingv3.CustomTag'
        type: array
      max_path_tag_length:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Maximum length of the request path to extract and include in the HttpUrl tag. Used to
          truncate lengthy request paths to meet the needs of a tracing backend.
          Default: 256
      overall_sampling:
        allOf:
        - $ref: '#/definitions/typev3.Percent'
        description: |-
          Target percentage of requests managed by this HTTP connection manager that will be traced
          after all other sampling checks have been applied (client-directed, force tracing, random
          sampling). This field functions as an upper limit on the total configured sampling rate. For
          instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
          of client requests with the appropriate headers to be force traced. This field is a direct
          analog for the runtime variable 'tracing.global_enabled' in the
          :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
          Default: 100%
      provider:
        allOf:
        - $ref: '#/definitions/tracev3.Tracing_Http'
        description: "Configuration for an external tracing provider.\nIf not specified,
          no tracing will be performed.\n\n.. attention::\n\n\tPlease be aware that
          ``envoy.tracers.opencensus`` provider can only be configured once\n\tin
          Envoy lifetime.\n\tAny attempts to reconfigure it or to use different configurations
          for different HCM filters\n\twill be rejected.\n\tSuch a constraint is inherent
          to OpenCensus itself. It cannot be overcome without changes\n\ton OpenCensus
          side."
      random_sampling:
        allOf:
        - $ref: '#/definitions/typev3.Percent'
        description: |-
          Target percentage of requests managed by this HTTP connection manager that will be randomly
          selected for trace generation, if not requested by the client or not forced. This field is
          a direct analog for the runtime variable 'tracing.random_sampling' in the
          :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
          Default: 100%
      spawn_upstream_span:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Create separate tracing span for each upstream request if true. And if this flag is set to true,
          the tracing provider will assume that Envoy will be independent hop in the trace chain and may
          set span type to client or server based on this flag.
          This will deprecate the
          :ref:`start_child_span <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
          in the router.

          Users should set appropriate value based on their tracing provider and actual scenario:

            - If Envoy is used as sidecar and users want to make the sidecar and its application as only one
              hop in the trace chain, this flag should be set to false. And please also make sure the
              :ref:`start_child_span <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
              in the router is not set to true.
            - If Envoy is used as gateway or independent proxy, or users want to make the sidecar and its
              application as different hops in the trace chain, this flag should be set to true.
            - If tracing provider that has explicit requirements on span creation (like SkyWalking),
              this flag should be set to true.

          The default value is false for now for backward compatibility.
      verbose:
        description: |-
          Whether to annotate spans with additional data. If true, spans will include logs for stream
          events.
        type: boolean
    type: object
  http_connection_managerv3.HttpConnectionManager_UpgradeConfig:
    properties:
      enabled:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Determines if upgrades are enabled or disabled by default. Defaults to true.
          This can be overridden on a per-route basis with :ref:`cluster
          <envoy_v3_api_field_config.route.v3.RouteAction.upgrade_configs>` as documented in the
          :ref:`upgrade documentation <arch_overview_upgrades>`.
      filters:
        description: |-
          If present, this represents the filter chain which will be created for
          this type of upgrade. If no filters are present, the filter chain for
          HTTP connections will be used for this upgrade type.
        items:
          $ref: '#/definitions/http_connection_managerv3.HttpFilter'
        type: array
      upgrade_type:
        description: |-
          The case-insensitive name of this upgrade, e.g. "websocket".
          For each upgrade type present in upgrade_configs, requests with
          Upgrade: [upgrade_type]
          will be proxied upstream.
        type: string
    type: object
  http_connection_managerv3.HttpFilter:
    properties:
      configType:
        description: "Types that are assignable to ConfigType:\n\n\t*HttpFilter_TypedConfig\n\t*HttpFilter_ConfigDiscovery"
      disabled:
        description: |-
          If true, the filter is disabled by default and must be explicitly enabled by setting
          per filter configuration in the route configuration.
          See :ref:`route based filter chain <arch_overview_http_filters_route_based_filter_chain>`
          for more details.

          Terminal filters (e.g. “envoy.filters.http.router“) cannot be marked as disabled.
        type: boolean
      is_optional:
        description: |-
          If true, clients that do not support this filter may ignore the
          filter but otherwise accept the config.
          Otherwise, clients that do not support this filter must reject the config.
        type: boolean
      name:
        description: The name of the filter configuration. It also serves as a resource
          name in ExtensionConfigDS.
        type: string
    type: object
  http_connection_managerv3.LocalReplyConfig:
    properties:
      body_format:
        allOf:
        - $ref: '#/definitions/corev3.SubstitutionFormatString'
        description: "The configuration to form response body from the :ref:`command
          operators <config_access_log_command_operators>`\nand to specify response
          content type as one of: plain/text or application/json.\n\nExample one:
          \"plain/text\" “body_format“.\n\n.. validated-code-block:: yaml\n\n\t:type-name:
          envoy.config.core.v3.SubstitutionFormatString\n\n\ttext_format: \"%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\\n\"\n\nThe
          following response body in \"plain/text\" format will be generated for a
          request with\nlocal reply body of \"upstream connection error\", response_code=503
          and path=/foo.\n\n.. code-block:: text\n\n\tupstream connect error:503:path=/foo\n\nExample
          two: \"application/json\" “body_format“.\n\n.. validated-code-block:: yaml\n\n\t:type-name:
          envoy.config.core.v3.SubstitutionFormatString\n\n\tjson_format:\n\t  status:
          \"%RESPONSE_CODE%\"\n\t  message: \"%LOCAL_REPLY_BODY%\"\n\t  path: \"%REQ(:path)%\"\n\nThe
          following response body in \"application/json\" format would be generated
          for a request with\nlocal reply body of \"upstream connection error\", response_code=503
          and path=/foo.\n\n.. code-block:: json\n\n\t{\n\t  \"status\": 503,\n\t
          \ \"message\": \"upstream connection error\",\n\t  \"path\": \"/foo\"\n\t}"
      mappers:
        description: |-
          Configuration of list of mappers which allows to filter and change local response.
          The mappers will be checked by the specified order until one is matched.
        items:
          $ref: '#/definitions/http_connection_managerv3.ResponseMapper'
        type: array
    type: object
  http_connection_managerv3.RequestIDExtension:
    properties:
      typed_config:
        allOf:
        - $ref: '#/definitions/any.Any'
        description: Request ID extension specific configuration.
    type: object
  http_connection_managerv3.ResponseMapper:
    properties:
      body:
        allOf:
        - $ref: '#/definitions/corev3.DataSource'
        description: |-
          The new local reply body text if specified. It will be used in the “%LOCAL_REPLY_BODY%“
          command operator in the “body_format“.
      body_format_override:
        allOf:
        - $ref: '#/definitions/corev3.SubstitutionFormatString'
        description: |-
          A per mapper “body_format“ to override the :ref:`body_format <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.body_format>`.
          It will be used when this mapper is matched.
      filter:
        allOf:
        - $ref: '#/definitions/accesslogv3.AccessLogFilter'
        description: Filter to determine if this mapper should apply.
      headers_to_add:
        description: |-
          HTTP headers to add to a local reply. This allows the response mapper to append, to add
          or to override headers of any local reply before it is sent to a downstream client.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      status_code:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: The new response status code if specified.
    type: object
  httpv3.PathTransformation:
    properties:
      operations:
        description: A list of operations to apply. Transformations will be performed
          in the order that they appear.
        items:
          $ref: '#/definitions/httpv3.PathTransformation_Operation'
        type: array
    type: object
  httpv3.PathTransformation_Operation:
    properties:
      operationSpecifier:
        description: "Types that are assignable to OperationSpecifier:\n\n\t*PathTransformation_Operation_NormalizePathRfc_3986\n\t*PathTransformation_Operation_MergeSlashes_"
    type: object
  listenerv3.AdditionalAddress:
    properties:
      address:
        $ref: '#/definitions/corev3.Address'
      socket_options:
        allOf:
        - $ref: '#/definitions/corev3.SocketOptionsOverride'
        description: |-
          Additional socket options that may not be present in Envoy source code or
          precompiled binaries. If specified, this will override the
          :ref:`socket_options <envoy_v3_api_field_config.listener.v3.Listener.socket_options>`
          in the listener. If specified with no
          :ref:`socket_options <envoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options>`
          or an empty list of :ref:`socket_options <envoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options>`,
          it means no socket option will apply.
    type: object
  listenerv3.ApiListener:
    properties:
      api_listener:
        allOf:
        - $ref: '#/definitions/any.Any'
        description: |-
          The type in this field determines the type of API listener. At present, the following
          types are supported:
          envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager (HTTP)
          envoy.extensions.filters.network.http_connection_manager.v3.EnvoyMobileHttpConnectionManager (HTTP)
          [#next-major-version: In the v3 API, replace this Any field with a oneof containing the
          specific config message for each type of API listener. We could not do this in v2 because
          it would have caused circular dependencies for go protos: lds.proto depends on this file,
          and http_connection_manager.proto depends on rds.proto, which is in the same directory as
          lds.proto, so lds.proto cannot depend on this file.]
    type: object
  listenerv3.Filter:
    properties:
      configType:
        description: "Types that are assignable to ConfigType:\n\n\t*Filter_TypedConfig\n\t*Filter_ConfigDiscovery"
      name:
        description: The name of the filter configuration.
        type: string
    type: object
  listenerv3.FilterChain:
    properties:
      filter_chain_match:
        allOf:
        - $ref: '#/definitions/listenerv3.FilterChainMatch'
        description: The criteria to use when matching a connection to this filter
          chain.
      filters:
        description: |-
          A list of individual network filters that make up the filter chain for
          connections established with the listener. Order matters as the filters are
          processed sequentially as connection events happen. Note: If the filter
          list is empty, the connection will close by default.

          For QUIC listeners, network filters other than HTTP Connection Manager (HCM)
          can be created, but due to differences in the connection implementation compared
          to TCP, the onData() method will never be called. Therefore, network filters
          for QUIC listeners should only expect to do work at the start of a new connection
          (i.e. in onNewConnection()). HCM must be the last (or only) filter in the chain.
        items:
          $ref: '#/definitions/listenerv3.Filter'
        type: array
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: '[#not-implemented-hide:] filter chain metadata.'
      name:
        description: |-
          The unique name (or empty) by which this filter chain is known.
          Note: :ref:`filter_chain_matcher
          <envoy_v3_api_field_config.listener.v3.Listener.filter_chain_matcher>`
          requires that filter chains are uniquely named within a listener.
        type: string
      on_demand_configuration:
        allOf:
        - $ref: '#/definitions/listenerv3.FilterChain_OnDemandConfiguration'
        description: |-
          [#not-implemented-hide:] The configuration to specify whether the filter chain will be built on-demand.
          If this field is not empty, the filter chain will be built on-demand.
          Otherwise, the filter chain will be built normally and block listener warming.
      transport_socket:
        allOf:
        - $ref: '#/definitions/corev3.TransportSocket'
        description: |-
          Optional custom transport socket implementation to use for downstream connections.
          To setup TLS, set a transport socket with name “envoy.transport_sockets.tls“ and
          :ref:`DownstreamTlsContext <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.DownstreamTlsContext>` in the “typed_config“.
          If no transport socket configuration is specified, new connections
          will be set up with plaintext.
          [#extension-category: envoy.transport_sockets.downstream]
      transport_socket_connect_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          If present and nonzero, the amount of time to allow incoming connections to complete any
          transport socket negotiations. If this expires before the transport reports connection
          establishment, the connection is summarily closed.
      use_proxy_proto:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the listener should expect a PROXY protocol V1 header on new
          connections. If this option is enabled, the listener will assume that that
          remote address of the connection is the one specified in the header. Some
          load balancers including the AWS ELB support this option. If the option is
          absent or set to false, Envoy will use the physical peer address of the
          connection as the remote address.

          This field is deprecated. Add a
          :ref:`PROXY protocol listener filter <config_listener_filters_proxy_protocol>`
          explicitly instead.

          Deprecated: Marked as deprecated in envoy/config/listener/v3/listener_components.proto.
    type: object
  listenerv3.FilterChain_OnDemandConfiguration:
    properties:
      rebuild_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The timeout to wait for filter chain placeholders to complete rebuilding.
          1. If this field is set to 0, timeout is disabled.
          2. If not specified, a default timeout of 15s is used.
          Rebuilding will wait until dependencies are ready, have failed, or this timeout is reached.
          Upon failure or timeout, all connections related to this filter chain will be closed.
          Rebuilding will start again on the next new connection.
    type: object
  listenerv3.FilterChainMatch:
    properties:
      address_suffix:
        description: |-
          If non-empty, an IP address and suffix length to match addresses when the
          listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
          [#not-implemented-hide:]
        type: string
      application_protocols:
        description: "If non-empty, a list of application protocols (e.g. ALPN for
          TLS protocol) to consider when\ndetermining a filter chain match. Those
          values will be compared against the application\nprotocols of a new connection,
          when detected by one of the listener filters.\n\nSuggested values include:\n\n
          \ - “http/1.1“ - set by :ref:`envoy.filters.listener.tls_inspector\n    <config_listener_filters_tls_inspector>`,\n
          \ - “h2“ - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`\n\n..
          attention::\n\n\tCurrently, only :ref:`TLS Inspector <config_listener_filters_tls_inspector>`
          provides\n\tapplication protocol detection based on the requested\n\t`ALPN
          <https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_
          values.\n\n\tHowever, the use of ALPN is pretty much limited to the HTTP/2
          traffic on the Internet,\n\tand matching on values other than ``h2`` is
          going to lead to a lot of false negatives,\n\tunless all connecting clients
          are known to use ALPN."
        items:
          type: string
        type: array
      destination_port:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Optional destination port to consider when use_original_dst is set on the
          listener in determining a filter chain match.
      direct_source_prefix_ranges:
        description: |-
          The criteria is satisfied if the directly connected source IP address of the downstream
          connection is contained in at least one of the specified subnets. If the parameter is not
          specified or the list is empty, the directly connected source IP address is ignored.
        items:
          $ref: '#/definitions/v3.CidrRange'
        type: array
      prefix_ranges:
        description: |-
          If non-empty, an IP address and prefix length to match addresses when the
          listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
        items:
          $ref: '#/definitions/v3.CidrRange'
        type: array
      server_names:
        description: "If non-empty, a list of server names (e.g. SNI for TLS protocol)
          to consider when determining\na filter chain match. Those values will be
          compared against the server names of a new\nconnection, when detected by
          one of the listener filters.\n\nThe server name will be matched against
          all wildcard domains, i.e. “www.example.com“\nwill be first matched against
          “www.example.com“, then “*.example.com“, then “*.com“.\n\nNote that partial
          wildcards are not supported, and values like “*w.example.com“ are invalid.\nThe
          value “*“ is also not supported, and “server_names“ should be omitted instead.\n\n..
          attention::\n\n\tSee the :ref:`FAQ entry <faq_how_to_setup_sni>` on how
          to configure SNI for more\n\tinformation."
        items:
          type: string
        type: array
      source_ports:
        description: |-
          The criteria is satisfied if the source port of the downstream connection
          is contained in at least one of the specified ports. If the parameter is
          not specified, the source port is ignored.
        items:
          type: integer
        type: array
      source_prefix_ranges:
        description: |-
          The criteria is satisfied if the source IP address of the downstream
          connection is contained in at least one of the specified subnets. If the
          parameter is not specified or the list is empty, the source IP address is
          ignored.
        items:
          $ref: '#/definitions/v3.CidrRange'
        type: array
      source_type:
        allOf:
        - $ref: '#/definitions/listenerv3.FilterChainMatch_ConnectionSourceType'
        description: Specifies the connection source IP match type. Can be any, local
          or external network.
      suffix_len:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: '[#not-implemented-hide:]'
      transport_protocol:
        description: |-
          If non-empty, a transport protocol to consider when determining a filter chain match.
          This value will be compared against the transport protocol of a new connection, when
          it's detected by one of the listener filters.

          Suggested values include:

            - “raw_buffer“ - default, used when no transport protocol is detected,
            - “tls“ - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`
              when TLS protocol is detected.
        type: string
    type: object
  listenerv3.FilterChainMatch_ConnectionSourceType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - FilterChainMatch_ANY
    - FilterChainMatch_SAME_IP_OR_LOOPBACK
    - FilterChainMatch_EXTERNAL
  listenerv3.Listener:
    properties:
      access_log:
        description: |-
          Configuration for :ref:`access logs <arch_overview_access_logs>`
          emitted by this listener.
        items:
          $ref: '#/definitions/accesslogv3.AccessLog'
        type: array
      additional_addresses:
        description: |-
          The additional addresses the listener should listen on. The addresses must be unique across all
          listeners. Multiple addresses with port 0 can be supplied. When using multiple addresses in a single listener,
          all addresses use the same protocol, and multiple internal addresses are not supported.
        items:
          $ref: '#/definitions/listenerv3.AdditionalAddress'
        type: array
      address:
        allOf:
        - $ref: '#/definitions/corev3.Address'
        description: |-
          The address that the listener should listen on. In general, the address must be unique, though
          that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
          Linux as the actual port will be allocated by the OS.
          Required unless “api_listener“ or “listener_specifier“ is populated.
      api_listener:
        allOf:
        - $ref: '#/definitions/listenerv3.ApiListener'
        description: "Used to represent an API listener, which is used in non-proxy
          clients. The type of API\nexposed to the non-proxy application depends on
          the type of API listener.\nWhen this field is set, no other field except
          for :ref:`name<envoy_v3_api_field_config.listener.v3.Listener.name>`\nshould
          be set.\n\n.. note::\n\n\tCurrently only one ApiListener can be installed;
          and it can only be done via bootstrap config,\n\tnot LDS.\n\n[#next-major-version:
          In the v3 API, instead of this messy approach where the socket\nlistener
          fields are directly in the top-level Listener message and the API listener
          types\nare in the ApiListener message, the socket listener messages should
          be in their own message,\nand the top-level Listener should essentially
          be a oneof that selects between the\nsocket listener and the various types
          of API listener. That way, a given Listener message\ncan structurally only
          contain the fields of the relevant type.]"
      bind_to_port:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the listener should bind to the port. A listener that doesn't
          bind can only receive connections redirected from other listeners that set
          :ref:`use_original_dst <envoy_v3_api_field_config.listener.v3.Listener.use_original_dst>`
          to true. Default is true.
      connection_balance_config:
        allOf:
        - $ref: '#/definitions/listenerv3.Listener_ConnectionBalanceConfig'
        description: |-
          The listener's connection balancer configuration, currently only applicable to TCP listeners.
          If no configuration is specified, Envoy will not attempt to balance active connections between
          worker threads.

          In the scenario that the listener X redirects all the connections to the listeners Y1 and Y2
          by setting :ref:`use_original_dst <envoy_v3_api_field_config.listener.v3.Listener.use_original_dst>` in X
          and :ref:`bind_to_port <envoy_v3_api_field_config.listener.v3.Listener.bind_to_port>` to false in Y1 and Y2,
          it is recommended to disable the balance config in listener X to avoid the cost of balancing, and
          enable the balance config in Y1 and Y2 to balance the connections among the workers.
      continue_on_listener_filters_timeout:
        description: "Whether a connection should be created when listener filters
          timeout. Default is false.\n\n.. attention::\n\n\tSome listener filters,
          such as :ref:`Proxy Protocol filter\n\t<config_listener_filters_proxy_protocol>`,
          should not be used with this option. It will cause\n\tunexpected behavior
          when a connection is created."
        type: boolean
      default_filter_chain:
        allOf:
        - $ref: '#/definitions/listenerv3.FilterChain'
        description: |-
          The default filter chain if none of the filter chain matches. If no default filter chain is supplied,
          the connection will be closed. The filter chain match is ignored in this field.
      deprecated_v1:
        allOf:
        - $ref: '#/definitions/listenerv3.Listener_DeprecatedV1'
        description: |-
          [#not-implemented-hide:]

          Deprecated: Marked as deprecated in envoy/config/listener/v3/listener.proto.
      drain_type:
        allOf:
        - $ref: '#/definitions/listenerv3.Listener_DrainType'
        description: The type of draining to perform at a listener-wide level.
      enable_mptcp:
        description: |-
          Enable MPTCP (multi-path TCP) on this listener. Clients will be allowed to establish
          MPTCP connections. Non-MPTCP clients will fall back to regular TCP.
        type: boolean
      enable_reuse_port:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: "When this flag is set to true, listeners set the “SO_REUSEPORT“
          socket option and\ncreate one socket for each worker thread. This makes
          inbound connections\ndistribute among worker threads roughly evenly in cases
          where there are a high number\nof connections. When this flag is set to
          false, all worker threads share one socket. This field\ndefaults to true.
          The change of field will be rejected during an listener update when the\nruntime
          flag “envoy.reloadable_features.enable_update_listener_socket_options“ is
          enabled.\nOtherwise, the update of this field will be ignored quietly.\n\n..
          attention::\n\n\tAlthough this field defaults to true, it has different
          behavior on different platforms. See\n\tthe following text for more information.\n\n
          \ - On Linux, reuse_port is respected for both TCP and UDP listeners. It
          also works correctly\n    with hot restart.\n  - On macOS, reuse_port for
          TCP does not do what it does on Linux. Instead of load balancing,\n    the
          last socket wins and receives all connections/packets. For TCP, reuse_port
          is force\n    disabled and the user is warned. For UDP, it is enabled, but
          only one worker will receive\n    packets. For QUIC/H3, SW routing will
          send packets to other workers. For \"raw\" UDP, only\n    a single worker
          will currently receive packets.\n  - On Windows, reuse_port for TCP has
          undefined behavior. It is force disabled and the user\n    is warned similar
          to macOS. It is left enabled for UDP with undefined behavior currently."
      filter_chain_matcher:
        allOf:
        - $ref: '#/definitions/v3.Matcher'
        description: ":ref:`Matcher API <arch_overview_matching_listener>` resolving
          the filter chain name from the\nnetwork properties. This matcher is used
          as a replacement for the filter chain match condition\n:ref:`filter_chain_match\n<envoy_v3_api_field_config.listener.v3.FilterChain.filter_chain_match>`.
          If specified, all\n:ref:`filter_chains <envoy_v3_api_field_config.listener.v3.Listener.filter_chains>`
          must have a\nnon-empty and unique :ref:`name <envoy_v3_api_field_config.listener.v3.FilterChain.name>`
          field\nand not specify :ref:`filter_chain_match\n<envoy_v3_api_field_config.listener.v3.FilterChain.filter_chain_match>`
          field.\n\n.. note::\n\n\tOnce matched, each connection is permanently bound
          to its filter chain.\n\tIf the matcher changes but the filter chain remains
          the same, the\n\tconnections bound to the filter chain are not drained.
          If, however, the\n\tfilter chain is removed or structurally modified, then
          the drain for its\n\tconnections is initiated."
      filter_chains:
        description: |-
          A list of filter chains to consider for this listener. The
          :ref:`FilterChain <envoy_v3_api_msg_config.listener.v3.FilterChain>` with the most specific
          :ref:`FilterChainMatch <envoy_v3_api_msg_config.listener.v3.FilterChainMatch>` criteria is used on a
          connection.

          Example using SNI for filter chain selection can be found in the
          :ref:`FAQ entry <faq_how_to_setup_sni>`.
        items:
          $ref: '#/definitions/listenerv3.FilterChain'
        type: array
      freebind:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the listener should set the “IP_FREEBIND“ socket option. When this
          flag is set to true, listeners can be bound to an IP address that is not
          configured on the system running Envoy. When this flag is set to false, the
          option “IP_FREEBIND“ is disabled on the socket. When this flag is not set
          (default), the socket is not modified, i.e. the option is neither enabled
          nor disabled.
      ignore_global_conn_limit:
        description: |-
          Whether the listener should limit connections based upon the value of
          :ref:`global_downstream_max_connections <config_overload_manager_limiting_connections>`.
        type: boolean
      listener_filters:
        description: |-
          Listener filters have the opportunity to manipulate and augment the connection metadata that
          is used in connection filter chain matching, for example. These filters are run before any in
          :ref:`filter_chains <envoy_v3_api_field_config.listener.v3.Listener.filter_chains>`. Order matters as the
          filters are processed sequentially right after a socket has been accepted by the listener, and
          before a connection is created.
          UDP Listener filters can be specified when the protocol in the listener socket address in
          :ref:`protocol <envoy_v3_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP
          <envoy_v3_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>` and no
          :ref:`quic_options <envoy_v3_api_field_config.listener.v3.UdpListenerConfig.quic_options>` is specified in :ref:`udp_listener_config <envoy_v3_api_field_config.listener.v3.Listener.udp_listener_config>`.
          QUIC listener filters can be specified when :ref:`quic_options
          <envoy_v3_api_field_config.listener.v3.UdpListenerConfig.quic_options>` is
          specified in :ref:`udp_listener_config <envoy_v3_api_field_config.listener.v3.Listener.udp_listener_config>`.
          They are processed sequentially right before connection creation. And like TCP Listener filters, they can be used to manipulate the connection metadata and socket. But the difference is that they can't be used to pause connection creation.
        items:
          $ref: '#/definitions/listenerv3.ListenerFilter'
        type: array
      listener_filters_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The timeout to wait for all listener filters to complete operation. If the timeout is reached,
          the accepted socket is closed without a connection being created unless
          “continue_on_listener_filters_timeout“ is set to true. Specify 0 to disable the
          timeout. If not specified, a default timeout of 15s is used.
      listenerSpecifier:
        description: "The exclusive listener type and the corresponding config.\n\nTypes
          that are assignable to ListenerSpecifier:\n\n\t*Listener_InternalListener"
      max_connections_to_accept_per_socket_event:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of connections to accept from the kernel per socket
          event. Envoy may decide to close these connections after accepting them
          from the kernel e.g. due to load shedding, or other policies.
          If there are more than max_connections_to_accept_per_socket_event
          connections pending accept, connections over this threshold will be
          accepted in later event loop iterations.
          If no value is provided Envoy will accept all connections pending accept
          from the kernel.
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: Listener metadata.
      name:
        description: |-
          The unique name by which this listener is known. If no name is provided,
          Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
          updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided.
        type: string
      per_connection_buffer_limit_bytes:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Soft limit on size of the listener’s new connection read and write buffers.
          If unspecified, an implementation defined default is applied (1MiB).
      reuse_port:
        description: |-
          Deprecated. Use “enable_reuse_port“ instead.

          Deprecated: Marked as deprecated in envoy/config/listener/v3/listener.proto.
        type: boolean
      socket_options:
        description: |-
          Additional socket options that may not be present in Envoy source code or
          precompiled binaries. The socket options can be updated for a listener when
          :ref:`enable_reuse_port <envoy_v3_api_field_config.listener.v3.Listener.enable_reuse_port>`
          is “true“. Otherwise, if socket options change during a listener update the update will be rejected
          to make it clear that the options were not updated.
        items:
          $ref: '#/definitions/corev3.SocketOption'
        type: array
      stat_prefix:
        description: |-
          Optional prefix to use on listener stats. If empty, the stats will be rooted at
          “listener.<address as string>.“. If non-empty, stats will be rooted at
          “listener.<stat_prefix>.“.
        type: string
      tcp_backlog_size:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum length a tcp listener's pending connections queue can grow to. If no value is
          provided net.core.somaxconn will be used on Linux and 128 otherwise.
      tcp_fast_open_queue_length:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Whether the listener should accept TCP Fast Open (TFO) connections.
          When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
          the socket, with a queue length of the specified size
          (see `details in RFC7413 <https://tools.ietf.org/html/rfc7413#section-5.1>`_).
          When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
          When this flag is not set (default), the socket is not modified,
          i.e. the option is neither enabled nor disabled.

          On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
          TCP_FASTOPEN.
          See `ip-sysctl.txt <https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt>`_.

          On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
          To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
      traffic_direction:
        allOf:
        - $ref: '#/definitions/corev3.TrafficDirection'
        description: |-
          Specifies the intended direction of the traffic relative to the local Envoy.
          This property is required on Windows for listeners using the original destination filter,
          see :ref:`Original Destination <config_listener_filters_original_dst>`.
      transparent:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the listener should be set as a transparent socket.
          When this flag is set to true, connections can be redirected to the listener using an
          “iptables“ “TPROXY“ target, in which case the original source and destination addresses and
          ports are preserved on accepted connections. This flag should be used in combination with
          :ref:`an original_dst <config_listener_filters_original_dst>` :ref:`listener filter
          <envoy_v3_api_field_config.listener.v3.Listener.listener_filters>` to mark the connections' local addresses as
          "restored." This can be used to hand off each redirected connection to another listener
          associated with the connection's destination address. Direct connections to the socket without
          using “TPROXY“ cannot be distinguished from connections redirected using “TPROXY“ and are
          therefore treated as if they were redirected.
          When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
          Setting this flag requires Envoy to run with the “CAP_NET_ADMIN“ capability.
          When this flag is not set (default), the socket is not modified, i.e. the transparent option
          is neither set nor reset.
      udp_listener_config:
        allOf:
        - $ref: '#/definitions/listenerv3.UdpListenerConfig'
        description: |-
          If the protocol in the listener socket address in :ref:`protocol
          <envoy_v3_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP
          <envoy_v3_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>`, this field specifies UDP
          listener specific configuration.
      use_original_dst:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          If a connection is redirected using “iptables“, the port on which the proxy
          receives it might be different from the original destination address. When this flag is set to
          true, the listener hands off redirected connections to the listener associated with the
          original destination address. If there is no listener associated with the original destination
          address, the connection is handled by the listener that receives it. Defaults to false.
    type: object
  listenerv3.Listener_ConnectionBalanceConfig:
    properties:
      balanceType:
        description: "Types that are assignable to BalanceType:\n\n\t*Listener_ConnectionBalanceConfig_ExactBalance_\n\t*Listener_ConnectionBalanceConfig_ExtendBalance"
    type: object
  listenerv3.Listener_DeprecatedV1:
    properties:
      bind_to_port:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Whether the listener should bind to the port. A listener that doesn't
          bind can only receive connections redirected from other listeners that
          set use_original_dst parameter to true. Default is true.

          This is deprecated. Use :ref:`Listener.bind_to_port
          <envoy_v3_api_field_config.listener.v3.Listener.bind_to_port>`
    type: object
  listenerv3.Listener_DrainType:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Listener_DEFAULT
    - Listener_MODIFY_ONLY
  listenerv3.ListenerFilter:
    properties:
      configType:
        description: "Types that are assignable to ConfigType:\n\n\t*ListenerFilter_TypedConfig\n\t*ListenerFilter_ConfigDiscovery"
      filter_disabled:
        allOf:
        - $ref: '#/definitions/listenerv3.ListenerFilterChainMatchPredicate'
        description: |-
          Optional match predicate used to disable the filter. The filter is enabled when this field is empty.
          See :ref:`ListenerFilterChainMatchPredicate <envoy_v3_api_msg_config.listener.v3.ListenerFilterChainMatchPredicate>`
          for further examples.
      name:
        description: The name of the filter configuration.
        type: string
    type: object
  listenerv3.ListenerFilterChainMatchPredicate:
    properties:
      rule:
        description: "Types that are assignable to Rule:\n\n\t*ListenerFilterChainMatchPredicate_OrMatch\n\t*ListenerFilterChainMatchPredicate_AndMatch\n\t*ListenerFilterChainMatchPredicate_NotMatch\n\t*ListenerFilterChainMatchPredicate_AnyMatch\n\t*ListenerFilterChainMatchPredicate_DestinationPortRange"
    type: object
  listenerv3.QuicProtocolOptions:
    properties:
      connection_id_generator_config:
        allOf:
        - $ref: '#/definitions/v3.TypedExtensionConfig'
        description: |-
          Config which implementation of “quic::ConnectionIdGeneratorInterface“ to be used for this listener.
          If not specified the :ref:`default one configured by <envoy_v3_api_msg_extensions.quic.connection_id_generator.v3.DeterministicConnectionIdGeneratorConfig>` will be used.
          [#extension-category: envoy.quic.connection_id_generator]
      crypto_handshake_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Connection timeout in milliseconds before the crypto handshake is finished.

          If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
      crypto_stream_config:
        allOf:
        - $ref: '#/definitions/v3.TypedExtensionConfig'
        description: |-
          Configure which implementation of “quic::QuicCryptoClientStreamBase“ to be used for this listener.
          If not specified the :ref:`QUICHE default one configured by <envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig>` will be used.
          [#extension-category: envoy.quic.server.crypto_stream]
      enabled:
        allOf:
        - $ref: '#/definitions/corev3.RuntimeFeatureFlag'
        description: |-
          Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
          to enabled.
      idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Maximum number of milliseconds that connection will be alive when there is
          no network activity.

          If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
      packets_to_read_to_connection_count_ratio:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          A multiplier to number of connections which is used to determine how many packets to read per
          event loop. A reasonable number should allow the listener to process enough payload but not
          starve TCP and other UDP sockets and also prevent long event loop duration.
          The default value is 32. This means if there are N QUIC connections, the total number of
          packets to read in each read event will be 32 * N.
          The actual number of packets to read in total by the UDP listener is also
          bound by 6000, regardless of this field or how many connections there are.
      proof_source_config:
        allOf:
        - $ref: '#/definitions/v3.TypedExtensionConfig'
        description: |-
          Configure which implementation of “quic::ProofSource“ to be used for this listener.
          If not specified the :ref:`default one configured by <envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig>` will be used.
          [#extension-category: envoy.quic.proof_source]
      quic_protocol_options:
        $ref: '#/definitions/corev3.QuicProtocolOptions'
      server_preferred_address_config:
        allOf:
        - $ref: '#/definitions/v3.TypedExtensionConfig'
        description: |-
          Configure the server's preferred address to advertise so that client can migrate to it. See :ref:`example <envoy_v3_api_msg_extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig>` which configures a pair of v4 and v6 preferred addresses.
          The current QUICHE implementation will advertise only one of the preferred IPv4 and IPv6 addresses based on the address family the client initially connects with, and only if the client is also QUICHE-based.
          If not specified, Envoy will not advertise any server's preferred address.
          [#extension-category: envoy.quic.server_preferred_address]
    type: object
  listenerv3.UdpListenerConfig:
    properties:
      downstream_socket_config:
        allOf:
        - $ref: '#/definitions/corev3.UdpSocketConfig'
        description: |-
          UDP socket configuration for the listener. The default for
          :ref:`prefer_gro <envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro>` is false for
          listener sockets. If receiving a large amount of datagrams from a small number of sources, it
          may be worthwhile to enable this option after performance testing.
      quic_options:
        allOf:
        - $ref: '#/definitions/listenerv3.QuicProtocolOptions'
        description: |-
          Configuration for QUIC protocol. If empty, QUIC will not be enabled on this listener. Set
          to the default object to enable QUIC without modifying any additional options.
      udp_packet_packet_writer_config:
        allOf:
        - $ref: '#/definitions/v3.TypedExtensionConfig'
        description: |-
          Configuration for the UDP packet writer. If empty, HTTP/3 will use GSO if available
          (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpGsoBatchWriterFactory>`)
          or the default kernel sendmsg if not,
          (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpDefaultWriterFactory>`)
          and raw UDP will use kernel sendmsg.
          [#extension-category: envoy.udp_packet_writer]
    type: object
  matcherv3.MetadataMatcher:
    properties:
      filter:
        description: The filter name to retrieve the Struct from the Metadata.
        type: string
      invert:
        description: If true, the match result will be inverted.
        type: boolean
      path:
        description: The path to retrieve the Value from the Struct.
        items:
          $ref: '#/definitions/matcherv3.MetadataMatcher_PathSegment'
        type: array
      value:
        allOf:
        - $ref: '#/definitions/matcherv3.ValueMatcher'
        description: The MetadataMatcher is matched if the value retrieved by path
          is matched to this value.
    type: object
  matcherv3.MetadataMatcher_PathSegment:
    properties:
      segment:
        description: "Types that are assignable to Segment:\n\n\t*MetadataMatcher_PathSegment_Key"
    type: object
  matcherv3.StringMatcher:
    properties:
      ignore_case:
        description: |-
          If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. This
          has no effect for the safe_regex match.
          For example, the matcher “data“ will match both input string “Data“ and “data“ if set to true.
        type: boolean
      matchPattern:
        description: "Types that are assignable to MatchPattern:\n\n\t*StringMatcher_Exact\n\t*StringMatcher_Prefix\n\t*StringMatcher_Suffix\n\t*StringMatcher_SafeRegex\n\t*StringMatcher_Contains"
    type: object
  matcherv3.ValueMatcher:
    properties:
      matchPattern:
        description: "Specifies how to match a value.\n\nTypes that are assignable
          to MatchPattern:\n\n\t*ValueMatcher_NullMatch_\n\t*ValueMatcher_DoubleMatch\n\t*ValueMatcher_StringMatch\n\t*ValueMatcher_BoolMatch\n\t*ValueMatcher_PresentMatch\n\t*ValueMatcher_ListMatch\n\t*ValueMatcher_OrMatch"
    type: object
  rbacv3.Permission:
    properties:
      rule:
        description: "Types that are assignable to Rule:\n\n\t*Permission_AndRules\n\t*Permission_OrRules\n\t*Permission_Any\n\t*Permission_Header\n\t*Permission_UrlPath\n\t*Permission_DestinationIp\n\t*Permission_DestinationPort\n\t*Permission_DestinationPortRange\n\t*Permission_Metadata\n\t*Permission_NotRule\n\t*Permission_RequestedServerName\n\t*Permission_Matcher"
    type: object
  rbacv3.Policy:
    properties:
      checked_condition:
        allOf:
        - $ref: '#/definitions/expr.CheckedExpr'
        description: |-
          [#not-implemented-hide:]
          An optional symbolic expression that has been successfully type checked.
          Only be used when condition is not used.
      condition:
        allOf:
        - $ref: '#/definitions/expr.Expr'
        description: |-
          An optional symbolic expression specifying an access control
          :ref:`condition <arch_overview_condition>`. The condition is combined
          with the permissions and the principals as a clause with AND semantics.
          Only be used when checked_condition is not used.
      permissions:
        description: |-
          Required. The set of permissions that define a role. Each permission is
          matched with OR semantics. To match all actions for this policy, a single
          Permission with the “any“ field set to true should be used.
        items:
          $ref: '#/definitions/rbacv3.Permission'
        type: array
      principals:
        description: |-
          Required. The set of principals that are assigned/denied the role based on
          “action”. Each principal is matched with OR semantics. To match all
          downstreams for this policy, a single Principal with the “any“ field set to
          true should be used.
        items:
          $ref: '#/definitions/rbacv3.Principal'
        type: array
    type: object
  rbacv3.Principal:
    properties:
      identifier:
        description: "Types that are assignable to Identifier:\n\n\t*Principal_AndIds\n\t*Principal_OrIds\n\t*Principal_Any\n\t*Principal_Authenticated_\n\t*Principal_SourceIp\n\t*Principal_DirectRemoteIp\n\t*Principal_RemoteIp\n\t*Principal_Header\n\t*Principal_UrlPath\n\t*Principal_Metadata\n\t*Principal_FilterState\n\t*Principal_NotId"
    type: object
  rbacv3.RBAC_Action:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - RBAC_ALLOW
    - RBAC_DENY
    - RBAC_LOG
  rbacv3.RBAC_AuditLoggingOptions:
    properties:
      audit_condition:
        allOf:
        - $ref: '#/definitions/rbacv3.RBAC_AuditLoggingOptions_AuditCondition'
        description: |-
          Condition for the audit logging to happen.
          If this condition is met, all the audit loggers configured here will be invoked.

          [#not-implemented-hide:]
      logger_configs:
        description: |-
          Configurations for RBAC-based authorization audit loggers.

          [#not-implemented-hide:]
        items:
          $ref: '#/definitions/rbacv3.RBAC_AuditLoggingOptions_AuditLoggerConfig'
        type: array
    type: object
  rbacv3.RBAC_AuditLoggingOptions_AuditCondition:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - RBAC_AuditLoggingOptions_NONE
    - RBAC_AuditLoggingOptions_ON_DENY
    - RBAC_AuditLoggingOptions_ON_ALLOW
    - RBAC_AuditLoggingOptions_ON_DENY_AND_ALLOW
  rbacv3.RBAC_AuditLoggingOptions_AuditLoggerConfig:
    properties:
      audit_logger:
        allOf:
        - $ref: '#/definitions/corev3.TypedExtensionConfig'
        description: |-
          Typed logger configuration.

          [#extension-category: envoy.rbac.audit_loggers]
      is_optional:
        description: If true, when the logger is not supported, the data plane will
          not NACK but simply ignore it.
        type: boolean
    type: object
  routerv3.Router_UpstreamAccessLogOptions:
    properties:
      flush_upstream_log_on_upstream_stream:
        description: |-
          If set to true, an upstream access log will be recorded when an upstream stream is
          associated to an http request. Note: Each HTTP request received for an already established
          connection will result in an upstream access log record. This includes, for example,
          consecutive HTTP requests over the same connection or a request that is retried.
          In case a retry is applied, an upstream access log will be recorded for each retry.
        type: boolean
      upstream_log_flush_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The interval to flush the upstream access logs. By default, the router will flush an upstream
          access log on stream close, when the HTTP request is complete. If this field is set, the router
          will flush access logs periodically at the specified interval. This is especially useful in the
          case of long-lived requests, such as CONNECT and Websockets.
          The interval must be at least 1 millisecond.
    type: object
  routev3.ClusterSpecifierPlugin:
    properties:
      extension:
        allOf:
        - $ref: '#/definitions/corev3.TypedExtensionConfig'
        description: The name of the plugin and its opaque configuration.
      is_optional:
        description: |-
          If is_optional is not set or is set to false and the plugin defined by this message is not a
          supported type, the containing resource is NACKed. If is_optional is set to true, the resource
          would not be NACKed for this reason. In this case, routes referencing this plugin's name would
          not be treated as an illegal configuration, but would result in a failure if the route is
          selected.
        type: boolean
    type: object
  routev3.CorsPolicy:
    properties:
      allow_credentials:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: Specifies whether the resource allows credentials.
      allow_headers:
        description: Specifies the content for the “access-control-allow-headers“
          header.
        type: string
      allow_methods:
        description: Specifies the content for the “access-control-allow-methods“
          header.
        type: string
      allow_origin_string_match:
        description: |-
          Specifies string patterns that match allowed origins. An origin is allowed if any of the
          string matchers match.
        items:
          $ref: '#/definitions/matcherv3.StringMatcher'
        type: array
      allow_private_network_access:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Specify whether allow requests whose target server's IP address is more private than that from
          which the request initiator was fetched.

          More details refer to https://developer.chrome.com/blog/private-network-access-preflight.
      enabledSpecifier:
        description: "Types that are assignable to EnabledSpecifier:\n\n\t*CorsPolicy_FilterEnabled"
      expose_headers:
        description: Specifies the content for the “access-control-expose-headers“
          header.
        type: string
      max_age:
        description: Specifies the content for the “access-control-max-age“ header.
        type: string
      shadow_enabled:
        allOf:
        - $ref: '#/definitions/corev3.RuntimeFractionalPercent'
        description: |-
          Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
          enforced.

          This field is intended to be used when “filter_enabled“ and “enabled“ are off. One of those
          fields have to explicitly disable the filter in order for this setting to take effect.

          If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
          Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
          and track the request's “Origin“ to determine if it's valid but will not enforce any policies.
    type: object
  routev3.Decorator:
    properties:
      operation:
        description: "The operation name associated with the request matched to this
          route. If tracing is\nenabled, this information will be used as the span
          name reported for this request.\n\n.. note::\n\n\tFor ingress (inbound)
          requests, or egress (outbound) responses, this value may be overridden\n\tby
          the :ref:`x-envoy-decorator-operation\n\t<config_http_filters_router_x-envoy-decorator-operation>`
          header."
        type: string
      propagate:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: Whether the decorated details should be propagated to the other
          party. The default is true.
    type: object
  routev3.HeaderMatcher:
    properties:
      headerMatchSpecifier:
        description: "Specifies how the header match will be performed to route the
          request.\n\nTypes that are assignable to HeaderMatchSpecifier:\n\n\t*HeaderMatcher_ExactMatch\n\t*HeaderMatcher_SafeRegexMatch\n\t*HeaderMatcher_RangeMatch\n\t*HeaderMatcher_PresentMatch\n\t*HeaderMatcher_PrefixMatch\n\t*HeaderMatcher_SuffixMatch\n\t*HeaderMatcher_ContainsMatch\n\t*HeaderMatcher_StringMatch"
      invert_match:
        description: |-
          If specified, the match result will be inverted before checking. Defaults to false.

          Examples:

          * The regex “\d{3}“ does not match the value “1234“, so it will match when inverted.
          * The range [-10,0) will match the value -1, so it will not match when inverted.
        type: boolean
      name:
        description: Specifies the name of the header in the request.
        type: string
      treat_missing_header_as_empty:
        description: |-
          If specified, for any header match rule, if the header match rule specified header
          does not exist, this header value will be treated as empty. Defaults to false.

          Examples:

            - The header match rule specified header "header1" to range match of [0, 10],
              :ref:`invert_match <envoy_v3_api_field_config.route.v3.HeaderMatcher.invert_match>`
              is set to true and :ref:`treat_missing_header_as_empty <envoy_v3_api_field_config.route.v3.HeaderMatcher.treat_missing_header_as_empty>`
              is set to true; The "header1" header is not present. The match rule will
              treat the "header1" as an empty header. The empty header does not match the range,
              so it will match when inverted.
            - The header match rule specified header "header2" to range match of [0, 10],
              :ref:`invert_match <envoy_v3_api_field_config.route.v3.HeaderMatcher.invert_match>`
              is set to true and :ref:`treat_missing_header_as_empty <envoy_v3_api_field_config.route.v3.HeaderMatcher.treat_missing_header_as_empty>`
              is set to false; The "header2" header is not present and the header
              matcher rule for "header2" will be ignored so it will not match.
            - The header match rule specified header "header3" to a string regex match
              “^$“ which means an empty string, and
              :ref:`treat_missing_header_as_empty <envoy_v3_api_field_config.route.v3.HeaderMatcher.treat_missing_header_as_empty>`
              is set to true; The "header3" header is not present.
              The match rule will treat the "header3" header as an empty header so it will match.
            - The header match rule specified header "header4" to a string regex match
              “^$“ which means an empty string, and
              :ref:`treat_missing_header_as_empty <envoy_v3_api_field_config.route.v3.HeaderMatcher.treat_missing_header_as_empty>`
              is set to false; The "header4" header is not present.
              The match rule for "header4" will be ignored so it will not match.
        type: boolean
    type: object
  routev3.HedgePolicy:
    properties:
      additional_request_chance:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent'
        description: |-
          Specifies a probability that an additional upstream request should be sent
          on top of what is specified by initial_requests.
          Defaults to 0.
          [#not-implemented-hide:]
      hedge_on_per_try_timeout:
        description: |-
          Indicates that a hedged request should be sent when the per-try timeout is hit.
          This means that a retry will be issued without resetting the original request, leaving multiple upstream requests in flight.
          The first request to complete successfully will be the one returned to the caller.

            - At any time, a successful response (i.e. not triggering any of the retry-on conditions) would be returned to the client.
            - Before per-try timeout, an error response (per retry-on conditions) would be retried immediately or returned ot the client
              if there are no more retries left.
            - After per-try timeout, an error response would be discarded, as a retry in the form of a hedged request is already in progress.

          Note: For this to have effect, you must have a :ref:`RetryPolicy <envoy_v3_api_msg_config.route.v3.RetryPolicy>` that retries at least
          one error code and specifies a maximum number of retries.

          Defaults to false.
        type: boolean
      initial_requests:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Specifies the number of initial requests that should be sent upstream.
          Must be at least 1.
          Defaults to 1.
          [#not-implemented-hide:]
    type: object
  routev3.QueryParameterMatcher:
    properties:
      name:
        description: |-
          Specifies the name of a key that must be present in the requested
          “path“'s query string.
        type: string
      queryParameterMatchSpecifier:
        description: "Types that are assignable to QueryParameterMatchSpecifier:\n\n\t*QueryParameterMatcher_StringMatch\n\t*QueryParameterMatcher_PresentMatch"
    type: object
  routev3.RateLimit:
    properties:
      actions:
        description: |-
          A list of actions that are to be applied for this rate limit configuration.
          Order matters as the actions are processed sequentially and the descriptor
          is composed by appending descriptor entries in that sequence. If an action
          cannot append a descriptor entry, no descriptor is generated for the
          configuration. See :ref:`composing actions
          <config_http_filters_rate_limit_composing_actions>` for additional documentation.
        items:
          $ref: '#/definitions/routev3.RateLimit_Action'
        type: array
      disable_key:
        description: The key to be set in runtime to disable this rate limit configuration.
        type: string
      limit:
        allOf:
        - $ref: '#/definitions/routev3.RateLimit_Override'
        description: |-
          An optional limit override to be appended to the descriptor produced by this
          rate limit configuration. If the override value is invalid or cannot be resolved
          from metadata, no override is provided. See :ref:`rate limit override
          <config_http_filters_rate_limit_rate_limit_override>` for more information.
      stage:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: "Refers to the stage set in the filter. The rate limit configuration
          only\napplies to filters with the same stage number. The default stage number
          is\n0.\n\n.. note::\n\n\tThe filter supports a range of 0 - 10 inclusively
          for stage numbers."
    type: object
  routev3.RateLimit_Action:
    properties:
      actionSpecifier:
        description: "Types that are assignable to ActionSpecifier:\n\n\t*RateLimit_Action_SourceCluster_\n\t*RateLimit_Action_DestinationCluster_\n\t*RateLimit_Action_RequestHeaders_\n\t*RateLimit_Action_RemoteAddress_\n\t*RateLimit_Action_GenericKey_\n\t*RateLimit_Action_HeaderValueMatch_\n\t*RateLimit_Action_DynamicMetadata\n\t*RateLimit_Action_Metadata\n\t*RateLimit_Action_Extension\n\t*RateLimit_Action_MaskedRemoteAddress_\n\t*RateLimit_Action_QueryParameterValueMatch_"
    type: object
  routev3.RateLimit_Override:
    properties:
      overrideSpecifier:
        description: "Types that are assignable to OverrideSpecifier:\n\n\t*RateLimit_Override_DynamicMetadata_"
    type: object
  routev3.RetryPolicy:
    properties:
      host_selection_retry_max_attempts:
        description: |-
          The maximum number of times host selection will be reattempted before giving up, at which
          point the host that was last selected will be routed to. If unspecified, this will default to
          retrying once.
        type: integer
      num_retries:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          Specifies the allowed number of retries. This parameter is optional and
          defaults to 1. These are the same conditions documented for
          :ref:`config_http_filters_router_x-envoy-max-retries`.
      per_try_idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Specifies an upstream idle timeout per retry attempt (including the initial attempt). This
          parameter is optional and if absent there is no per try idle timeout. The semantics of the per
          try idle timeout are similar to the
          :ref:`route idle timeout <envoy_v3_api_field_config.route.v3.RouteAction.timeout>` and
          :ref:`stream idle timeout
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
          both enforced by the HTTP connection manager. The difference is that this idle timeout
          is enforced by the router for each individual attempt and thus after all previous filters have
          run, as opposed to *before* all previous filters run for the other idle timeouts. This timeout
          is useful in cases in which total request timeout is bounded by a number of retries and a
          :ref:`per_try_timeout <envoy_v3_api_field_config.route.v3.RetryPolicy.per_try_timeout>`, but
          there is a desire to ensure each try is making incremental progress. Note also that similar
          to :ref:`per_try_timeout <envoy_v3_api_field_config.route.v3.RetryPolicy.per_try_timeout>`,
          this idle timeout does not start until after both the entire request has been received by the
          router *and* a connection pool connection has been obtained. Unlike
          :ref:`per_try_timeout <envoy_v3_api_field_config.route.v3.RetryPolicy.per_try_timeout>`,
          the idle timer continues once the response starts streaming back to the downstream client.
          This ensures that response data continues to make progress without using one of the HTTP
          connection manager idle timeouts.
      per_try_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: "Specifies a non-zero upstream timeout per retry attempt (including
          the initial attempt). This\nparameter is optional. The same conditions documented
          for\n:ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
          apply.\n\n.. note::\n\n\tIf left unspecified, Envoy will use the global\n\t:ref:`route
          timeout <envoy_v3_api_field_config.route.v3.RouteAction.timeout>` for the
          request.\n\tConsequently, when using a :ref:`5xx <config_http_filters_router_x-envoy-retry-on>`
          based\n\tretry policy, a request that times out will not be retried as the
          total timeout budget\n\twould have been exhausted."
      rate_limited_retry_back_off:
        allOf:
        - $ref: '#/definitions/routev3.RetryPolicy_RateLimitedRetryBackOff'
        description: |-
          Specifies parameters that control a retry back-off strategy that is used
          when the request is rate limited by the upstream server. The server may
          return a response header like “Retry-After“ or “X-RateLimit-Reset“ to
          provide feedback to the client on how long to wait before retrying. If
          configured, this back-off strategy will be used instead of the
          default exponential back off strategy (configured using “retry_back_off“)
          whenever a response includes the matching headers.
      retriable_headers:
        description: |-
          HTTP response headers that trigger a retry if present in the response. A retry will be
          triggered if any of the header matches match the upstream response headers.
          The field is only consulted if 'retriable-headers' retry policy is active.
        items:
          $ref: '#/definitions/routev3.HeaderMatcher'
        type: array
      retriable_request_headers:
        description: HTTP headers which must be present in the request for retries
          to be attempted.
        items:
          $ref: '#/definitions/routev3.HeaderMatcher'
        type: array
      retriable_status_codes:
        description: HTTP status codes that should trigger a retry in addition to
          those specified by retry_on.
        items:
          type: integer
        type: array
      retry_back_off:
        allOf:
        - $ref: '#/definitions/routev3.RetryPolicy_RetryBackOff'
        description: |-
          Specifies parameters that control exponential retry back off. This parameter is optional, in which case the
          default base interval is 25 milliseconds or, if set, the current value of the
          “upstream.base_retry_backoff_ms“ runtime parameter. The default maximum interval is 10 times
          the base interval. The documentation for :ref:`config_http_filters_router_x-envoy-max-retries`
          describes Envoy's back-off algorithm.
      retry_host_predicate:
        description: |-
          Specifies a collection of RetryHostPredicates that will be consulted when selecting a host
          for retries. If any of the predicates reject the host, host selection will be reattempted.
          Refer to :ref:`retry plugin configuration <arch_overview_http_retry_plugins>` for more
          details.
        items:
          $ref: '#/definitions/routev3.RetryPolicy_RetryHostPredicate'
        type: array
      retry_on:
        description: |-
          Specifies the conditions under which retry takes place. These are the same
          conditions documented for :ref:`config_http_filters_router_x-envoy-retry-on` and
          :ref:`config_http_filters_router_x-envoy-retry-grpc-on`.
        type: string
      retry_options_predicates:
        description: |-
          Retry options predicates that will be applied prior to retrying a request. These predicates
          allow customizing request behavior between retries.
          [#comment: add [#extension-category: envoy.retry_options_predicates] when there are built-in extensions]
        items:
          $ref: '#/definitions/corev3.TypedExtensionConfig'
        type: array
      retry_priority:
        allOf:
        - $ref: '#/definitions/routev3.RetryPolicy_RetryPriority'
        description: |-
          Specifies an implementation of a RetryPriority which is used to determine the
          distribution of load across priorities used for retries. Refer to
          :ref:`retry plugin configuration <arch_overview_http_retry_plugins>` for more details.
    type: object
  routev3.RetryPolicy_RateLimitedRetryBackOff:
    properties:
      max_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Specifies the maximum back off interval that Envoy will allow. If a reset
          header contains an interval longer than this then it will be discarded and
          the next header will be tried. Defaults to 300 seconds.
      reset_headers:
        description: |-
          Specifies the reset headers (like “Retry-After“ or “X-RateLimit-Reset“)
          to match against the response. Headers are tried in order, and matched case
          insensitive. The first header to be parsed successfully is used. If no headers
          match the default exponential back-off is used instead.
        items:
          $ref: '#/definitions/routev3.RetryPolicy_ResetHeader'
        type: array
    type: object
  routev3.RetryPolicy_ResetHeader:
    properties:
      format:
        allOf:
        - $ref: '#/definitions/routev3.RetryPolicy_ResetHeaderFormat'
        description: The format of the reset header.
      name:
        description: "The name of the reset header.\n\n.. note::\n\n\tIf the header
          appears multiple times only the first value is used."
        type: string
    type: object
  routev3.RetryPolicy_ResetHeaderFormat:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - RetryPolicy_SECONDS
    - RetryPolicy_UNIX_TIMESTAMP
  routev3.RetryPolicy_RetryBackOff:
    properties:
      base_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Specifies the base interval between retries. This parameter is required and must be greater
          than zero. Values less than 1 ms are rounded up to 1 ms.
          See :ref:`config_http_filters_router_x-envoy-max-retries` for a discussion of Envoy's
          back-off algorithm.
      max_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          Specifies the maximum interval between retries. This parameter is optional, but must be
          greater than or equal to the “base_interval“ if set. The default is 10 times the
          “base_interval“. See :ref:`config_http_filters_router_x-envoy-max-retries` for a discussion
          of Envoy's back-off algorithm.
    type: object
  routev3.RetryPolicy_RetryHostPredicate:
    properties:
      configType:
        description: "[#extension-category: envoy.retry_host_predicates]\n\nTypes
          that are assignable to ConfigType:\n\n\t*RetryPolicy_RetryHostPredicate_TypedConfig"
      name:
        type: string
    type: object
  routev3.RetryPolicy_RetryPriority:
    properties:
      configType:
        description: "[#extension-category: envoy.retry_priorities]\n\nTypes that
          are assignable to ConfigType:\n\n\t*RetryPolicy_RetryPriority_TypedConfig"
      name:
        type: string
    type: object
  routev3.Route:
    properties:
      action:
        description: "Types that are assignable to Action:\n\n\t*Route_Route\n\t*Route_Redirect\n\t*Route_DirectResponse\n\t*Route_FilterAction\n\t*Route_NonForwardingAction"
      decorator:
        allOf:
        - $ref: '#/definitions/routev3.Decorator'
        description: Decorator for the matched route.
      match:
        allOf:
        - $ref: '#/definitions/routev3.RouteMatch'
        description: Route matching parameters.
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: |-
          The Metadata field can be used to provide additional information
          about the route. It can be used for configuration, stats, and logging.
          The metadata should go under the filter namespace that will need it.
          For instance, if the metadata is intended for the Router filter,
          the filter name should be specified as “envoy.filters.http.router“.
      name:
        description: Name for the route.
        type: string
      per_request_buffer_limit_bytes:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum bytes which will be buffered for retries and shadowing.
          If set, the bytes actually buffered will be the minimum value of this and the
          listener per_connection_buffer_limit_bytes.
      request_headers_to_add:
        description: |-
          Specifies a set of headers that will be added to requests matching this
          route. Headers specified at this level are applied before headers from the
          enclosing :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` and
          :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration`. For more information, including details on
          header value syntax, see the documentation on :ref:`custom request headers
          <config_http_conn_man_headers_custom_request_headers>`.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      request_headers_to_remove:
        description: |-
          Specifies a list of HTTP headers that should be removed from each request
          matching this route.
        items:
          type: string
        type: array
      response_headers_to_add:
        description: |-
          Specifies a set of headers that will be added to responses to requests
          matching this route. Headers specified at this level are applied before
          headers from the enclosing :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` and
          :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration`. For more information, including
          details on header value syntax, see the documentation on
          :ref:`custom request headers <config_http_conn_man_headers_custom_request_headers>`.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      response_headers_to_remove:
        description: |-
          Specifies a list of HTTP headers that should be removed from each response
          to requests matching this route.
        items:
          type: string
        type: array
      stat_prefix:
        description: "The human readable prefix to use when emitting statistics for
          this endpoint.\nThe statistics are rooted at vhost.<virtual host name>.route.<stat_prefix>.\nThis
          should be set for highly critical\nendpoints that one wishes to get “per-route”
          statistics on.\nIf not set, endpoint statistics are not generated.\n\nThe
          emitted statistics are the same as those documented for :ref:`virtual clusters
          <config_http_filters_router_vcluster_stats>`.\n\n.. warning::\n\n\tWe do
          not recommend setting up a stat prefix for\n\tevery application endpoint.
          This is both not easily maintainable and\n\tstatistics use a non-trivial
          amount of memory(approximately 1KiB per route)."
        type: string
      tracing:
        allOf:
        - $ref: '#/definitions/routev3.Tracing'
        description: |-
          Presence of the object defines whether the connection manager's tracing configuration
          is overridden by this route specific instance.
      typed_per_filter_config:
        additionalProperties:
          $ref: '#/definitions/any.Any'
        description: |-
          This field can be used to provide route specific per filter config. The key should match the
          :ref:`filter config name
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>`.
          See :ref:`Http filter route specific config <arch_overview_http_filters_per_filter_config>`
          for details.
          [#comment: An entry's value may be wrapped in a
          :ref:`FilterConfig<envoy_v3_api_msg_config.route.v3.FilterConfig>`
          message to specify additional options.]
        type: object
    type: object
  routev3.RouteAction_RequestMirrorPolicy:
    properties:
      cluster:
        description: |-
          Only one of “cluster“ and “cluster_header“ can be specified.
          [#next-major-version: Need to add back the validation rule: (validate.rules).string = {min_len: 1}]
          Specifies the cluster that requests will be mirrored to. The cluster must
          exist in the cluster manager configuration.
        type: string
      cluster_header:
        description: "Only one of “cluster“ and “cluster_header“ can be specified.\nEnvoy
          will determine the cluster to route to by reading the value of the\nHTTP
          header named by cluster_header from the request headers. Only the first
          value in header is used,\nand no shadow request will happen if the value
          is not found in headers. Envoy will not wait for\nthe shadow cluster to
          respond before returning the response from the primary cluster.\n\n.. attention::\n\n\tInternally,
          Envoy always uses the HTTP/2 ``:authority`` header to represent the HTTP/1\n\t``Host``
          header. Thus, if attempting to match on ``Host``, match on ``:authority``
          instead.\n\n.. note::\n\n\tIf the header appears multiple times only the
          first value is used."
        type: string
      runtime_fraction:
        allOf:
        - $ref: '#/definitions/corev3.RuntimeFractionalPercent'
        description: |-
          If not specified, all requests to the target cluster will be mirrored.

          If specified, this field takes precedence over the “runtime_key“ field and requests must also
          fall under the percentage of matches indicated by this field.

          For some fraction N/D, a random number in the range [0,D) is selected. If the
          number is <= the value of the numerator N, or if the key is not present, the default
          value, the request will be mirrored.
      trace_sampled:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: Determines if the trace span should be sampled. Defaults to true.
    type: object
  routev3.RouteConfiguration:
    properties:
      cluster_specifier_plugins:
        description: |-
          A list of plugins and their configurations which may be used by a
          :ref:`cluster specifier plugin name <envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin>`
          within the route. All “extension.name“ fields in this list must be unique.
        items:
          $ref: '#/definitions/routev3.ClusterSpecifierPlugin'
        type: array
      ignore_path_parameters_in_path_matching:
        description: |-
          Ignore path-parameters in path-matching.
          Before RFC3986, URI were like(RFC1808): <scheme>://<net_loc>/<path>;<params>?<query>#<fragment>
          Envoy by default takes ":path" as "<path>;<params>".
          For users who want to only match path on the "<path>" portion, this option should be true.
        type: boolean
      ignore_port_in_host_matching:
        description: |-
          By default, port in :authority header (if any) is used in host matching.
          With this option enabled, Envoy will ignore the port number in the :authority header (if any) when picking VirtualHost.
          NOTE: this option will not strip the port number (if any) contained in route config
          :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost`.domains field.
        type: boolean
      internal_only_headers:
        description: |-
          Optionally specifies a list of HTTP headers that the connection manager
          will consider to be internal only. If they are found on external requests they will be cleaned
          prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
          information.
        items:
          type: string
        type: array
      max_direct_response_body_size_bytes:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: "The maximum bytes of the response :ref:`direct response body\n<envoy_v3_api_field_config.route.v3.DirectResponseAction.body>`
          size. If not specified the default\nis 4096.\n\n.. warning::\n\n\tEnvoy
          currently holds the content of :ref:`direct response body\n\t<envoy_v3_api_field_config.route.v3.DirectResponseAction.body>`
          in memory. Be careful setting\n\tthis to be larger than the default 4KB,
          since the allocated memory for direct response body\n\tis not subject to
          data plane buffering controls."
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: |-
          The metadata field can be used to provide additional information
          about the route configuration. It can be used for configuration, stats, and logging.
          The metadata should go under the filter namespace that will need it.
          For instance, if the metadata is intended for the Router filter,
          the filter name should be specified as “envoy.filters.http.router“.
      most_specific_header_mutations_wins:
        description: |-
          By default, headers that should be added/removed are evaluated from most to least specific:

          * route level
          * virtual host level
          * connection manager level

          To allow setting overrides at the route or virtual host level, this order can be reversed
          by setting this option to true. Defaults to false.
        type: boolean
      name:
        description: |-
          The name of the route configuration. For example, it might match
          :ref:`route_config_name
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.route_config_name>` in
          :ref:`envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds`.
        type: string
      request_headers_to_add:
        description: |-
          Specifies a list of HTTP headers that should be added to each request
          routed by the HTTP connection manager. Headers specified at this level are
          applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
          :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
          header value syntax, see the documentation on :ref:`custom request headers
          <config_http_conn_man_headers_custom_request_headers>`.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      request_headers_to_remove:
        description: |-
          Specifies a list of HTTP headers that should be removed from each request
          routed by the HTTP connection manager.
        items:
          type: string
        type: array
      request_mirror_policies:
        description: |-
          Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
          Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
        items:
          $ref: '#/definitions/routev3.RouteAction_RequestMirrorPolicy'
        type: array
      response_headers_to_add:
        description: |-
          Specifies a list of HTTP headers that should be added to each response that
          the connection manager encodes. Headers specified at this level are applied
          after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
          :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
          header value syntax, see the documentation on :ref:`custom request headers
          <config_http_conn_man_headers_custom_request_headers>`.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      response_headers_to_remove:
        description: |-
          Specifies a list of HTTP headers that should be removed from each response
          that the connection manager encodes.
        items:
          type: string
        type: array
      typed_per_filter_config:
        additionalProperties:
          $ref: '#/definitions/any.Any'
        description: |-
          This field can be used to provide RouteConfiguration level per filter config. The key should match the
          :ref:`filter config name
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>`.
          See :ref:`Http filter route specific config <arch_overview_http_filters_per_filter_config>`
          for details.
          [#comment: An entry's value may be wrapped in a
          :ref:`FilterConfig<envoy_v3_api_msg_config.route.v3.FilterConfig>`
          message to specify additional options.]
        type: object
      validate_clusters:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          An optional boolean that specifies whether the clusters that the route
          table refers to will be validated by the cluster manager. If set to true
          and a route refers to a non-existent cluster, the route table will not
          load. If set to false and a route refers to a non-existent cluster, the
          route table will load and the router filter will return a 404 if the route
          is selected at runtime. This setting defaults to true if the route table
          is statically defined via the :ref:`route_config
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config>`
          option. This setting default to false if the route table is loaded dynamically via the
          :ref:`rds
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds>`
          option. Users may wish to override the default behavior in certain cases (for example when
          using CDS with a static route table).
      vhds:
        allOf:
        - $ref: '#/definitions/routev3.Vhds'
        description: |-
          An array of virtual hosts will be dynamically loaded via the VHDS API.
          Both “virtual_hosts“ and “vhds“ fields will be used when present. “virtual_hosts“ can be used
          for a base routing table or for infrequently changing virtual hosts. “vhds“ is used for
          on-demand discovery of virtual hosts. The contents of these two fields will be merged to
          generate a routing table for a given RouteConfiguration, with “vhds“ derived configuration
          taking precedence.
      virtual_hosts:
        description: An array of virtual hosts that make up the route table.
        items:
          $ref: '#/definitions/routev3.VirtualHost'
        type: array
    type: object
  routev3.RouteMatch:
    properties:
      case_sensitive:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          Indicates that prefix/path matching should be case sensitive. The default
          is true. Ignored for safe_regex matching.
      dynamic_metadata:
        description: |-
          Specifies a set of dynamic metadata matchers on which the route should match.
          The router will check the dynamic metadata against all the specified dynamic metadata matchers.
          If the number of specified dynamic metadata matchers is nonzero, they all must match the
          dynamic metadata for a match to occur.
        items:
          $ref: '#/definitions/matcherv3.MetadataMatcher'
        type: array
      grpc:
        allOf:
        - $ref: '#/definitions/routev3.RouteMatch_GrpcRouteMatchOptions'
        description: |-
          If specified, only gRPC requests will be matched. The router will check
          that the content-type header has a application/grpc or one of the various
          application/grpc+ values.
      headers:
        description: |-
          Specifies a set of headers that the route should match on. The router will
          check the request’s headers against all the specified headers in the route
          config. A match will happen if all the headers in the route are present in
          the request with the same values (or based on presence if the value field
          is not in the config).
        items:
          $ref: '#/definitions/routev3.HeaderMatcher'
        type: array
      pathSpecifier:
        description: "Types that are assignable to PathSpecifier:\n\n\t*RouteMatch_Prefix\n\t*RouteMatch_Path\n\t*RouteMatch_SafeRegex\n\t*RouteMatch_ConnectMatcher_\n\t*RouteMatch_PathSeparatedPrefix\n\t*RouteMatch_PathMatchPolicy"
      query_parameters:
        description: "Specifies a set of URL query parameters on which the route should\nmatch.
          The router will check the query string from the “path“ header\nagainst all
          the specified query parameters. If the number of specified\nquery parameters
          is nonzero, they all must match the “path“ header's\nquery string for a
          match to occur. In the event query parameters are\nrepeated, only the first
          value for each key will be considered.\n\n.. note::\n\n\tIf query parameters
          are used to pass request message fields when\n\t`grpc_json_transcoder <https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter>`_\n\tis
          used, the transcoded message fields maybe different. The query parameters
          are\n\turl encoded, but the message fields are not. For example, if a query\n\tparameter
          is \"foo%20bar\", the message field will be \"foo bar\"."
        items:
          $ref: '#/definitions/routev3.QueryParameterMatcher'
        type: array
      runtime_fraction:
        allOf:
        - $ref: '#/definitions/corev3.RuntimeFractionalPercent'
        description: "Indicates that the route should additionally match on a runtime
          key. Every time the route\nis considered for a match, it must also fall
          under the percentage of matches indicated by\nthis field. For some fraction
          N/D, a random number in the range [0,D) is selected. If the\nnumber is <=
          the value of the numerator N, or if the key is not present, the default\nvalue,
          the router continues to evaluate the remaining match criteria. A runtime_fraction\nroute
          configuration can be used to roll out route changes in a gradual manner
          without full\ncode/config deploys. Refer to the :ref:`traffic shifting\n<config_http_conn_man_route_table_traffic_splitting_shift>`
          docs for additional documentation.\n\n.. note::\n\n\tParsing this field
          is implemented such that the runtime key's data may be represented\n\tas
          a FractionalPercent proto represented as JSON/YAML and may also be represented
          as an\n\tinteger with the assumption that the value is an integral percentage
          out of 100. For\n\tinstance, a runtime key lookup returning the value \"42\"
          would parse as a FractionalPercent\n\twhose numerator is 42 and denominator
          is HUNDRED. This preserves legacy semantics."
      tls_context:
        allOf:
        - $ref: '#/definitions/routev3.RouteMatch_TlsContextMatchOptions'
        description: |-
          If specified, the client tls context will be matched against the defined
          match options.

          [#next-major-version: unify with RBAC]
    type: object
  routev3.RouteMatch_GrpcRouteMatchOptions:
    type: object
  routev3.RouteMatch_TlsContextMatchOptions:
    properties:
      presented:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: |-
          If specified, the route will match against whether or not a certificate is presented.
          If not specified, certificate presentation status (true or false) will not be considered when route matching.
      validated:
        allOf:
        - $ref: '#/definitions/wrappers.BoolValue'
        description: "If specified, the route will match against whether or not a
          certificate is validated.\nIf not specified, certificate validation status
          (true or false) will not be considered when route matching.\n\n.. warning::\n\n\tClient
          certificate validation is not currently performed upon TLS session resumption.
          For\n\ta resumed TLS session the route will match only when ``validated``
          is false, regardless of\n\twhether the client TLS certificate is valid.\n\n\tThe
          only known workaround for this issue is to disable TLS session resumption
          entirely, by\n\tsetting both :ref:`disable_stateless_session_resumption
          <envoy_v3_api_field_extensions.transport_sockets.tls.v3.DownstreamTlsContext.disable_stateless_session_resumption>`\n\tand
          :ref:`disable_stateful_session_resumption <envoy_v3_api_field_extensions.transport_sockets.tls.v3.DownstreamTlsContext.disable_stateful_session_resumption>`
          on the DownstreamTlsContext."
    type: object
  routev3.Tracing:
    properties:
      client_sampling:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent'
        description: |-
          Target percentage of requests managed by this HTTP connection manager that will be force
          traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
          header is set. This field is a direct analog for the runtime variable
          'tracing.client_enabled' in the :ref:`HTTP Connection Manager
          <config_http_conn_man_runtime>`.
          Default: 100%
      custom_tags:
        description: |-
          A list of custom tags with unique tag name to create tags for the active span.
          It will take effect after merging with the :ref:`corresponding configuration
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags>`
          configured in the HTTP connection manager. If two tags with the same name are configured
          each in the HTTP connection manager and the route level, the one configured here takes
          priority.
        items:
          $ref: '#/definitions/tracingv3.CustomTag'
        type: array
      overall_sampling:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent'
        description: |-
          Target percentage of requests managed by this HTTP connection manager that will be traced
          after all other sampling checks have been applied (client-directed, force tracing, random
          sampling). This field functions as an upper limit on the total configured sampling rate. For
          instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
          of client requests with the appropriate headers to be force traced. This field is a direct
          analog for the runtime variable 'tracing.global_enabled' in the
          :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
          Default: 100%
      random_sampling:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent'
        description: |-
          Target percentage of requests managed by this HTTP connection manager that will be randomly
          selected for trace generation, if not requested by the client or not forced. This field is
          a direct analog for the runtime variable 'tracing.random_sampling' in the
          :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
          Default: 100%
    type: object
  routev3.Vhds:
    properties:
      config_source:
        allOf:
        - $ref: '#/definitions/corev3.ConfigSource'
        description: Configuration source specifier for VHDS.
    type: object
  routev3.VirtualCluster:
    properties:
      headers:
        description: |-
          Specifies a list of header matchers to use for matching requests. Each specified header must
          match. The pseudo-headers “:path“ and “:method“ can be used to match the request path and
          method, respectively.
        items:
          $ref: '#/definitions/routev3.HeaderMatcher'
        type: array
      name:
        description: |-
          Specifies the name of the virtual cluster. The virtual cluster name as well
          as the virtual host name are used when emitting statistics. The statistics are emitted by the
          router filter and are documented :ref:`here <config_http_filters_router_stats>`.
        type: string
    type: object
  routev3.VirtualHost:
    properties:
      cors:
        allOf:
        - $ref: '#/definitions/routev3.CorsPolicy'
        description: "Indicates that the virtual host has a CORS policy. This field
          is ignored if related cors policy is\nfound in the\n:ref:`VirtualHost.typed_per_filter_config<envoy_v3_api_field_config.route.v3.VirtualHost.typed_per_filter_config>`.\n\n..
          attention::\n\n\tThis option has been deprecated. Please use\n\t:ref:`VirtualHost.typed_per_filter_config<envoy_v3_api_field_config.route.v3.VirtualHost.typed_per_filter_config>`\n\tto
          configure the CORS HTTP filter.\n\nDeprecated: Marked as deprecated in envoy/config/route/v3/route_components.proto."
      domains:
        description: "A list of domains (host/authority header) that will be matched
          to this\nvirtual host. Wildcard hosts are supported in the suffix or prefix
          form.\n\nDomain search order:\n 1. Exact domain names: “www.foo.com“.\n
          2. Suffix domain wildcards: “*.foo.com“ or “*-bar.foo.com“.\n 3. Prefix
          domain wildcards: “foo.*“ or “foo-*“.\n 4. Special wildcard “*“ matching
          any domain.\n\n.. note::\n\n\tThe wildcard will not match the empty string.\n\te.g.
          ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``.\n\tThe
          longest wildcards match first.\n\tOnly a single virtual host in the entire
          route configuration can match on ``*``. A domain\n\tmust be unique across
          all virtual hosts or the config will fail to load.\n\nDomains cannot contain
          control characters. This is validated by the well_known_regex HTTP_HEADER_VALUE."
        items:
          type: string
        type: array
      hedge_policy:
        allOf:
        - $ref: '#/definitions/routev3.HedgePolicy'
        description: |-
          Indicates the hedge policy for all routes in this virtual host. Note that setting a
          route level entry will take precedence over this config and it'll be treated
          independently (e.g.: values are not inherited).
      include_attempt_count_in_response:
        description: |-
          Decides whether the :ref:`x-envoy-attempt-count
          <config_http_filters_router_x-envoy-attempt-count>` header should be included
          in the downstream response. Setting this option will cause the router to override any existing header
          value, so in the case of two Envoys on the request path with this option enabled, the downstream
          will see the attempt count as perceived by the Envoy closest upstream from itself. Defaults to false.
          This header is unaffected by the
          :ref:`suppress_envoy_headers
          <envoy_v3_api_field_extensions.filters.http.router.v3.Router.suppress_envoy_headers>` flag.
        type: boolean
      include_is_timeout_retry_header:
        description: |-
          Decides whether to include the :ref:`x-envoy-is-timeout-retry <config_http_filters_router_x-envoy-is-timeout-retry>`
          request header in retries initiated by per try timeouts.
        type: boolean
      include_request_attempt_count:
        description: |-
          Decides whether the :ref:`x-envoy-attempt-count
          <config_http_filters_router_x-envoy-attempt-count>` header should be included
          in the upstream request. Setting this option will cause it to override any existing header
          value, so in the case of two Envoys on the request path with this option enabled, the upstream
          will see the attempt count as perceived by the second Envoy. Defaults to false.
          This header is unaffected by the
          :ref:`suppress_envoy_headers
          <envoy_v3_api_field_extensions.filters.http.router.v3.Router.suppress_envoy_headers>` flag.

          [#next-major-version: rename to include_attempt_count_in_request.]
        type: boolean
      matcher:
        allOf:
        - $ref: '#/definitions/v3.Matcher'
        description: |-
          [#next-major-version: This should be included in a oneof with routes wrapped in a message.]
          The match tree to use when resolving route actions for incoming requests. Only one of this and “routes“
          can be specified.
      metadata:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: |-
          The metadata field can be used to provide additional information
          about the virtual host. It can be used for configuration, stats, and logging.
          The metadata should go under the filter namespace that will need it.
          For instance, if the metadata is intended for the Router filter,
          the filter name should be specified as “envoy.filters.http.router“.
      name:
        description: |-
          The logical name of the virtual host. This is used when emitting certain
          statistics but is not relevant for routing.
        type: string
      per_request_buffer_limit_bytes:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum bytes which will be buffered for retries and shadowing.
          If set and a route-specific limit is not set, the bytes actually buffered will be the minimum
          value of this and the listener per_connection_buffer_limit_bytes.
      rate_limits:
        description: |-
          Specifies a set of rate limit configurations that will be applied to the
          virtual host.
        items:
          $ref: '#/definitions/routev3.RateLimit'
        type: array
      request_headers_to_add:
        description: |-
          Specifies a list of HTTP headers that should be added to each request
          handled by this virtual host. Headers specified at this level are applied
          after headers from enclosed :ref:`envoy_v3_api_msg_config.route.v3.Route` and before headers from the
          enclosing :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration`. For more information, including
          details on header value syntax, see the documentation on :ref:`custom request headers
          <config_http_conn_man_headers_custom_request_headers>`.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      request_headers_to_remove:
        description: |-
          Specifies a list of HTTP headers that should be removed from each request
          handled by this virtual host.
        items:
          type: string
        type: array
      request_mirror_policies:
        description: |-
          Specify a set of default request mirroring policies for every route under this virtual host.
          It takes precedence over the route config mirror policy entirely.
          That is, policies are not merged, the most specific non-empty one becomes the mirror policies.
        items:
          $ref: '#/definitions/routev3.RouteAction_RequestMirrorPolicy'
        type: array
      require_tls:
        allOf:
        - $ref: '#/definitions/routev3.VirtualHost_TlsRequirementType'
        description: |-
          Specifies the type of TLS enforcement the virtual host expects. If this option is not
          specified, there is no TLS requirement for the virtual host.
      response_headers_to_add:
        description: |-
          Specifies a list of HTTP headers that should be added to each response
          handled by this virtual host. Headers specified at this level are applied
          after headers from enclosed :ref:`envoy_v3_api_msg_config.route.v3.Route` and before headers from the
          enclosing :ref:`envoy_v3_api_msg_config.route.v3.RouteConfiguration`. For more information, including
          details on header value syntax, see the documentation on :ref:`custom request headers
          <config_http_conn_man_headers_custom_request_headers>`.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      response_headers_to_remove:
        description: |-
          Specifies a list of HTTP headers that should be removed from each response
          handled by this virtual host.
        items:
          type: string
        type: array
      retry_policy:
        allOf:
        - $ref: '#/definitions/routev3.RetryPolicy'
        description: |-
          Indicates the retry policy for all routes in this virtual host. Note that setting a
          route level entry will take precedence over this config and it'll be treated
          independently (e.g.: values are not inherited).
      retry_policy_typed_config:
        allOf:
        - $ref: '#/definitions/any.Any'
        description: |-
          [#not-implemented-hide:]
          Specifies the configuration for retry policy extension. Note that setting a route level entry
          will take precedence over this config and it'll be treated independently (e.g.: values are not
          inherited). :ref:`Retry policy <envoy_v3_api_field_config.route.v3.VirtualHost.retry_policy>` should not be
          set if this field is used.
      routes:
        description: |-
          The list of routes that will be matched, in order, for incoming requests.
          The first route that matches will be used.
          Only one of this and “matcher“ can be specified.
        items:
          $ref: '#/definitions/routev3.Route'
        type: array
      typed_per_filter_config:
        additionalProperties:
          $ref: '#/definitions/any.Any'
        description: |-
          This field can be used to provide virtual host level per filter config. The key should match the
          :ref:`filter config name
          <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>`.
          See :ref:`Http filter route specific config <arch_overview_http_filters_per_filter_config>`
          for details.
          [#comment: An entry's value may be wrapped in a
          :ref:`FilterConfig<envoy_v3_api_msg_config.route.v3.FilterConfig>`
          message to specify additional options.]
        type: object
      virtual_clusters:
        description: |-
          A list of virtual clusters defined for this virtual host. Virtual clusters
          are used for additional statistics gathering.
        items:
          $ref: '#/definitions/routev3.VirtualCluster'
        type: array
    type: object
  routev3.VirtualHost_TlsRequirementType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - VirtualHost_NONE
    - VirtualHost_EXTERNAL_ONLY
    - VirtualHost_ALL
  tcp_proxyv3.TcpProxy:
    properties:
      access_log:
        description: |-
          Configuration for :ref:`access logs <arch_overview_access_logs>`
          emitted by the this tcp_proxy.
        items:
          $ref: '#/definitions/accesslogv3.AccessLog'
        type: array
      access_log_flush_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          .. attention::
          This field is deprecated in favor of
          :ref:`access_log_flush_interval
          <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.access_log_flush_interval>`.
          Note that if both this field and :ref:`access_log_flush_interval
          <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.access_log_flush_interval>`
          are specified, the former (deprecated field) is ignored.

          Deprecated: Marked as deprecated in envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto.
      access_log_options:
        allOf:
        - $ref: '#/definitions/tcp_proxyv3.TcpProxy_TcpAccessLogOptions'
        description: Additional access log options for TCP Proxy.
      clusterSpecifier:
        description: "Types that are assignable to ClusterSpecifier:\n\n\t*TcpProxy_Cluster\n\t*TcpProxy_WeightedClusters"
      downstream_idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
          filter. The idle timeout is defined as the period in which there is no
          active traffic. If not set, there is no idle timeout. When the idle timeout
          is reached the connection will be closed. The distinction between
          downstream_idle_timeout/upstream_idle_timeout provides a means to set
          timeout based on the last byte sent on the downstream/upstream connection.
      flush_access_log_on_connected:
        description: |-
          .. attention::
          This field is deprecated in favor of
          :ref:`flush_access_log_on_connected
          <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.flush_access_log_on_connected>`.
          Note that if both this field and :ref:`flush_access_log_on_connected
          <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.flush_access_log_on_connected>`
          are specified, the former (deprecated field) is ignored.

          Deprecated: Marked as deprecated in envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto.
        type: boolean
      hash_policy:
        description: |-
          Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
          load balancing algorithms will select a host randomly. Currently the number of hash policies is
          limited to 1.
        items:
          $ref: '#/definitions/typev3.HashPolicy'
        type: array
      idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: "The idle timeout for connections managed by the TCP proxy filter.
          The idle timeout\nis defined as the period in which there are no bytes sent
          or received on either\nthe upstream or downstream connection. If not set,
          the default idle timeout is 1 hour. If set\nto 0s, the timeout will be disabled.\n\n..
          warning::\n\n\tDisabling this timeout has a highly likelihood of yielding
          connection leaks due to lost TCP\n\tFIN packets, etc."
      max_connect_attempts:
        allOf:
        - $ref: '#/definitions/wrappers.UInt32Value'
        description: |-
          The maximum number of unsuccessful connection attempts that will be made before
          giving up. If the parameter is not specified, 1 connection attempt will be made.
      max_downstream_connection_duration:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The maximum duration of a connection. The duration is defined as the period since a connection
          was established. If not set, there is no max duration. When max_downstream_connection_duration
          is reached the connection will be closed. Duration must be at least 1ms.
      metadata_match:
        allOf:
        - $ref: '#/definitions/corev3.Metadata'
        description: |-
          Optional endpoint metadata match criteria. Only endpoints in the upstream
          cluster with metadata matching that set in metadata_match will be
          considered. The filter name should be specified as “envoy.lb“.
      on_demand:
        allOf:
        - $ref: '#/definitions/tcp_proxyv3.TcpProxy_OnDemand'
        description: |-
          The on demand policy for the upstream cluster.
          It applies to both
          :ref:`TcpProxy.cluster <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.cluster>`
          and
          :ref:`TcpProxy.weighted_clusters <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.weighted_clusters>`.
      stat_prefix:
        description: |-
          The prefix to use when emitting :ref:`statistics
          <config_network_filters_tcp_proxy_stats>`.
        type: string
      tunneling_config:
        allOf:
        - $ref: '#/definitions/tcp_proxyv3.TcpProxy_TunnelingConfig'
        description: |-
          If set, this configures tunneling, e.g. configuration options to tunnel TCP payload over
          HTTP CONNECT. If this message is absent, the payload will be proxied upstream as per usual.
          It is possible to dynamically override this configuration and disable tunneling per connection,
          by setting a per-connection filter state object for the key “envoy.tcp_proxy.disable_tunneling“.
      upstream_idle_timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: '[#not-implemented-hide:]'
    type: object
  tcp_proxyv3.TcpProxy_OnDemand:
    properties:
      odcds_config:
        allOf:
        - $ref: '#/definitions/corev3.ConfigSource'
        description: |-
          An optional configuration for on-demand cluster discovery
          service. If not specified, the on-demand cluster discovery will
          be disabled. When it's specified, the filter will pause a request
          to an unknown cluster and will begin a cluster discovery
          process. When the discovery is finished (successfully or not),
          the request will be resumed.
      resources_locator:
        description: |-
          xdstp:// resource locator for on-demand cluster collection.
          [#not-implemented-hide:]
        type: string
      timeout:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The timeout for on demand cluster lookup. If the CDS cannot return the required cluster,
          the downstream request will be closed with the error code detail NO_CLUSTER_FOUND.
          [#not-implemented-hide:]
    type: object
  tcp_proxyv3.TcpProxy_TcpAccessLogOptions:
    properties:
      access_log_flush_interval:
        allOf:
        - $ref: '#/definitions/duration.Duration'
        description: |-
          The interval to flush access log. The TCP proxy will flush only one access log when the connection
          is closed by default. If this field is set, the TCP proxy will flush access log periodically with
          the specified interval.
          The interval must be at least 1ms.
      flush_access_log_on_connected:
        description: |-
          If set to true, access log will be flushed when the TCP proxy has successfully established a
          connection with the upstream. If the connection failed, the access log will not be flushed.
        type: boolean
    type: object
  tcp_proxyv3.TcpProxy_TunnelingConfig:
    properties:
      headers_to_add:
        description: |-
          Additional request headers to upstream proxy. This is mainly used to
          trigger upstream to convert POST requests back to CONNECT requests.

          Neither “:-prefixed“ pseudo-headers nor the Host: header can be overridden.
        items:
          $ref: '#/definitions/corev3.HeaderValueOption'
        type: array
      hostname:
        description: "The hostname to send in the synthesized CONNECT headers to the
          upstream proxy.\nThis field evaluates command operators if set, otherwise
          returns hostname as is.\n\nExample: dynamically set hostname using downstream
          SNI\n\n.. code-block:: yaml\n\n\ttunneling_config:\n\t  hostname: \"%REQUESTED_SERVER_NAME%:443\"\n\nExample:
          dynamically set hostname using dynamic metadata\n\n.. code-block:: yaml\n\n\ttunneling_config:\n\t
          \ hostname: \"%DYNAMIC_METADATA(tunnel:address)%\""
        type: string
      post_path:
        description: |-
          The path used with POST method. Default path is “/“. If post path is specified and
          :ref:`use_post field <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.use_post>`
          isn't true, it will be rejected.
        type: string
      propagate_response_headers:
        description: |-
          Save the response headers to the downstream info filter state for consumption
          by the network filters. The filter state key is “envoy.tcp_proxy.propagate_response_headers“.
        type: boolean
      propagate_response_trailers:
        description: |-
          Save the response trailers to the downstream info filter state for consumption
          by the network filters. The filter state key is “envoy.tcp_proxy.propagate_response_trailers“.
        type: boolean
      use_post:
        description: |-
          Use POST method instead of CONNECT method to tunnel the TCP stream.
          The 'protocol: bytestream' header is also NOT set for HTTP/2 to comply with the spec.

          The upstream proxy is expected to convert POST payload as raw TCP.
        type: boolean
    type: object
  tlsv3.Secret:
    properties:
      name:
        description: Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can
          be uniquely referred to.
        type: string
      type:
        description: "Types that are assignable to Type:\n\n\t*Secret_TlsCertificate\n\t*Secret_SessionTicketKeys\n\t*Secret_ValidationContext\n\t*Secret_GenericSecret"
    type: object
  tracev3.Tracing_Http:
    properties:
      configType:
        description: "Trace driver specific configuration which must be set according
          to the driver being instantiated.\n[#extension-category: envoy.tracers]\n\nTypes
          that are assignable to ConfigType:\n\n\t*Tracing_Http_TypedConfig"
      name:
        description: |-
          The name of the HTTP trace driver to instantiate. The name must match a
          supported HTTP trace driver.
          See the :ref:`extensions listed in typed_config below <extension_category_envoy.tracers>` for the default list of the HTTP trace driver.
        type: string
    type: object
  tracingv3.CustomTag:
    properties:
      tag:
        description: Used to populate the tag name.
        type: string
      type:
        description: "Used to specify what kind of custom tag.\n\nTypes that are assignable
          to Type:\n\n\t*CustomTag_Literal_\n\t*CustomTag_Environment_\n\t*CustomTag_RequestHeader\n\t*CustomTag_Metadata_"
    type: object
  typev3.FractionalPercent:
    properties:
      denominator:
        allOf:
        - $ref: '#/definitions/typev3.FractionalPercent_DenominatorType'
        description: |-
          Specifies the denominator. If the denominator specified is less than the numerator, the final
          fractional percentage is capped at 1 (100%).
      numerator:
        description: Specifies the numerator. Defaults to 0.
        type: integer
    type: object
  typev3.FractionalPercent_DenominatorType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - FractionalPercent_HUNDRED
    - FractionalPercent_TEN_THOUSAND
    - FractionalPercent_MILLION
  typev3.HashPolicy:
    properties:
      policySpecifier:
        description: "Types that are assignable to PolicySpecifier:\n\n\t*HashPolicy_SourceIp_\n\t*HashPolicy_FilterState_"
    type: object
  typev3.Percent:
    properties:
      value:
        type: number
    type: object
  v3.Authority:
    properties:
      name:
        type: string
    type: object
  v3.CidrRange:
    properties:
      address_prefix:
        type: string
      prefix_len:
        $ref: '#/definitions/wrappers.UInt32Value'
    type: object
  v3.Matcher:
    properties:
      matcherType:
        description: "Types that are assignable to MatcherType:\n\t*Matcher_MatcherList_\n\t*Matcher_MatcherTree_"
      on_no_match:
        $ref: '#/definitions/v3.Matcher_OnMatch'
    type: object
  v3.Matcher_OnMatch:
    properties:
      onMatch:
        description: "Types that are assignable to OnMatch:\n\t*Matcher_OnMatch_Matcher\n\t*Matcher_OnMatch_Action"
    type: object
  v3.TypedExtensionConfig:
    properties:
      name:
        type: string
      typed_config:
        $ref: '#/definitions/any.Any'
    type: object
  wrappers.BoolValue:
    properties:
      value:
        description: The bool value.
        type: boolean
    type: object
  wrappers.DoubleValue:
    properties:
      value:
        description: The double value.
        type: number
    type: object
  wrappers.UInt32Value:
    properties:
      value:
        description: The uint32 value.
        type: integer
    type: object
  wrappers.UInt64Value:
    properties:
      value:
        description: The uint64 value.
        type: integer
    type: object
info:
  contact: {}
  description: This is a sample server for Envoy XDS Cache Rest API.
  title: Envoy XDS Cache Rest API
  version: "1.0"
paths:
  /api/v1/clusters:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Cluster name
        example: '"cluster-1"'
        format: string
        in: query
        name: cluster_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetClustersResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get clusters for a specific node ID.
      tags:
      - cluster
  /api/v1/domainLocations:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        type: string
      - description: Domain name
        example: '"example-domain"'
        format: string
        in: query
        name: domain_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.getDomainLocationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get domain locations. Find filter chain, filter and route configuration.
        If Filter Chain don't have Filter Chain Match - ignored.
      tags:
      - domain
  /api/v1/domains:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.getDomainsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get domains for node_id and listener_name (Find in Filter Chain Match)
      tags:
      - domain
  /api/v1/filterType:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        required: true
        type: string
      - description: Filter chain name
        example: '"filter-chain-1"'
        format: string
        in: query
        name: filter_chain_name
        type: string
      - description: Filter name
        example: '"filter-1"'
        format: string
        in: query
        name: filter_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.getFilterTypeResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get filter type retrieves the filter type for a specific Filter
      tags:
      - filter
  /api/v1/filters:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        required: true
        type: string
      - description: Filter chain name. If not set works only if the listener has
          only one Filter Chain
        example: '"filter-chain-1"'
        format: string
        in: query
        name: filter_chain_name
        type: string
      - description: Filter name
        example: '"filter-1"'
        format: string
        in: query
        name: filter_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetHCMFilterResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Filters retrieves the filters for a specific Filter Chain, Listener
        and Node ID. (only http_connection_manager)
      tags:
      - filter
  /api/v1/filtersTCPProxy:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        required: true
        type: string
      - description: Filter chain name
        example: '"filter-chain-1"'
        format: string
        in: query
        name: filter_chain_name
        type: string
      - description: Filter name
        example: '"filter-1"'
        format: string
        in: query
        name: filter_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetTCPProxyFilterResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get TCP filters for a specific Filter Chain, Listener and Node ID.
      tags:
      - filter
  /api/v1/httpFilterRBAC:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        required: true
        type: string
      - description: Filter chain name
        example: '"filter-chain-1"'
        format: string
        in: query
        name: filter_chain_name
        type: string
      - description: Filter name
        example: '"filter-1"'
        format: string
        in: query
        name: filter_name
        type: string
      - description: HTTP filter name
        example: '"http-filter-1"'
        format: string
        in: query
        name: http_filter_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetHttpFilterRBACResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get HTTP filter RBAC for a specific Filter.
      tags:
      - filter
  /api/v1/httpFilterRouter:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        required: true
        type: string
      - description: Filter chain name
        example: '"filter-chain-1"'
        format: string
        in: query
        name: filter_chain_name
        type: string
      - description: Filter name
        example: '"filter-1"'
        format: string
        in: query
        name: filter_name
        type: string
      - description: HTTP filter name
        example: '"http-filter-1"'
        format: string
        in: query
        name: http_filter_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetHttpFilterRouterResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get HTTP filter router for a specific Filter.
      tags:
      - filter
  /api/v1/httpFilters:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        required: true
        type: string
      - description: Filter chain name
        example: '"filter-chain-1"'
        format: string
        in: query
        name: filter_chain_name
        type: string
      - description: Filter name
        example: '"filter-1"'
        format: string
        in: query
        name: filter_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetHttpsFilterResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get HTTP filters for a specific Filter.
      tags:
      - filter
  /api/v1/listeners:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Listener name
        example: '"listener-1"'
        format: string
        in: query
        name: listener_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetListenersResponse'
        "400":
          description: 'error": "node_id not found in cache", "node_id": nodeID'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get listeners for a specific node ID
      tags:
      - listener
  /api/v1/nodeIDs:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Get exists node ID in xDS cache
      tags:
      - nodeid
  /api/v1/routeConfigurations:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: RouteConfiguration name
        example: '"route-config-1"'
        format: string
        in: query
        name: route_configuration_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetRouteConfigurationsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get routesConfigurations for a specific node ID. If set param name,
        return only one route configuration.
      tags:
      - routeConfiguration
  /api/v1/secrets:
    get:
      consumes:
      - application/json
      parameters:
      - description: Node ID
        example: '"node-id-1"'
        format: string
        in: query
        name: node_id
        required: true
        type: string
      - description: Secret name
        example: '"secret-1"'
        format: string
        in: query
        name: secret_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetSecretsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get secrets for a specific node ID.
      tags:
      - secret
schemes:
- http
swagger: "2.0"
