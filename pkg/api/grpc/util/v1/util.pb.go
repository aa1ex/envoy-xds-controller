// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: util/v1/util.proto

package utilv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerifyDomainsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of domains to verify SSL certificates for.
	Domains       []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyDomainsRequest) Reset() {
	*x = VerifyDomainsRequest{}
	mi := &file_util_v1_util_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyDomainsRequest) ProtoMessage() {}

func (x *VerifyDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_util_v1_util_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyDomainsRequest.ProtoReflect.Descriptor instead.
func (*VerifyDomainsRequest) Descriptor() ([]byte, []int) {
	return file_util_v1_util_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyDomainsRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type DomainVerificationResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The domain being verified.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Indicates if the domain has a valid SSL certificate.
	ValidCertificate bool `protobuf:"varint,2,opt,name=valid_certificate,json=validCertificate,proto3" json:"valid_certificate,omitempty"`
	// The issuer of the SSL certificate.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The expiration timestamp of the SSL certificate.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Indicates if the domain was matched using a wildcard certificate.
	MatchedByWildcard bool `protobuf:"varint,5,opt,name=matched_by_wildcard,json=matchedByWildcard,proto3" json:"matched_by_wildcard,omitempty"`
	// Any error messages related to the domain's verification.
	Error         string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DomainVerificationResult) Reset() {
	*x = DomainVerificationResult{}
	mi := &file_util_v1_util_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainVerificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainVerificationResult) ProtoMessage() {}

func (x *DomainVerificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_util_v1_util_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainVerificationResult.ProtoReflect.Descriptor instead.
func (*DomainVerificationResult) Descriptor() ([]byte, []int) {
	return file_util_v1_util_proto_rawDescGZIP(), []int{1}
}

func (x *DomainVerificationResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainVerificationResult) GetValidCertificate() bool {
	if x != nil {
		return x.ValidCertificate
	}
	return false
}

func (x *DomainVerificationResult) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *DomainVerificationResult) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *DomainVerificationResult) GetMatchedByWildcard() bool {
	if x != nil {
		return x.MatchedByWildcard
	}
	return false
}

func (x *DomainVerificationResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type VerifyDomainsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of the results for each domain verification.
	Results       []*DomainVerificationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyDomainsResponse) Reset() {
	*x = VerifyDomainsResponse{}
	mi := &file_util_v1_util_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyDomainsResponse) ProtoMessage() {}

func (x *VerifyDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_util_v1_util_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyDomainsResponse.ProtoReflect.Descriptor instead.
func (*VerifyDomainsResponse) Descriptor() ([]byte, []int) {
	return file_util_v1_util_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyDomainsResponse) GetResults() []*DomainVerificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_util_v1_util_proto protoreflect.FileDescriptor

var file_util_v1_util_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30,
	0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x22, 0xf8, 0x01, 0x0a, 0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x57, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x15, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x32, 0x5e, 0x0a, 0x0c, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x9a, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x42, 0x09, 0x55, 0x74, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x61, 0x73, 0x6f,
	0x70, 0x73, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2d, 0x78, 0x64, 0x73, 0x2d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x74, 0x69,
	0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x55, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x55, 0x74, 0x69, 0x6c,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x55, 0x74, 0x69, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13,
	0x55, 0x74, 0x69, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x55, 0x74, 0x69, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_util_v1_util_proto_rawDescOnce sync.Once
	file_util_v1_util_proto_rawDescData []byte
)

func file_util_v1_util_proto_rawDescGZIP() []byte {
	file_util_v1_util_proto_rawDescOnce.Do(func() {
		file_util_v1_util_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_util_v1_util_proto_rawDesc), len(file_util_v1_util_proto_rawDesc)))
	})
	return file_util_v1_util_proto_rawDescData
}

var file_util_v1_util_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_util_v1_util_proto_goTypes = []any{
	(*VerifyDomainsRequest)(nil),     // 0: util.v1.VerifyDomainsRequest
	(*DomainVerificationResult)(nil), // 1: util.v1.DomainVerificationResult
	(*VerifyDomainsResponse)(nil),    // 2: util.v1.VerifyDomainsResponse
	(*timestamppb.Timestamp)(nil),    // 3: google.protobuf.Timestamp
}
var file_util_v1_util_proto_depIdxs = []int32{
	3, // 0: util.v1.DomainVerificationResult.expires_at:type_name -> google.protobuf.Timestamp
	1, // 1: util.v1.VerifyDomainsResponse.results:type_name -> util.v1.DomainVerificationResult
	0, // 2: util.v1.UtilsService.VerifyDomains:input_type -> util.v1.VerifyDomainsRequest
	2, // 3: util.v1.UtilsService.VerifyDomains:output_type -> util.v1.VerifyDomainsResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_util_v1_util_proto_init() }
func file_util_v1_util_proto_init() {
	if File_util_v1_util_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_util_v1_util_proto_rawDesc), len(file_util_v1_util_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_util_v1_util_proto_goTypes,
		DependencyIndexes: file_util_v1_util_proto_depIdxs,
		MessageInfos:      file_util_v1_util_proto_msgTypes,
	}.Build()
	File_util_v1_util_proto = out.File
	file_util_v1_util_proto_goTypes = nil
	file_util_v1_util_proto_depIdxs = nil
}
