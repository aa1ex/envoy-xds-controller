// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: util/v1/util.proto

package utilv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/util/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UtilsServiceName is the fully-qualified name of the UtilsService service.
	UtilsServiceName = "util.v1.UtilsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UtilsServiceVerifyDomainsProcedure is the fully-qualified name of the UtilsService's
	// VerifyDomains RPC.
	UtilsServiceVerifyDomainsProcedure = "/util.v1.UtilsService/VerifyDomains"
)

// UtilsServiceClient is a client for the util.v1.UtilsService service.
type UtilsServiceClient interface {
	// Verifies the SSL certificates of the provided domains.
	VerifyDomains(context.Context, *connect.Request[v1.VerifyDomainsRequest]) (*connect.Response[v1.VerifyDomainsResponse], error)
}

// NewUtilsServiceClient constructs a client for the util.v1.UtilsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUtilsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UtilsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	utilsServiceMethods := v1.File_util_v1_util_proto.Services().ByName("UtilsService").Methods()
	return &utilsServiceClient{
		verifyDomains: connect.NewClient[v1.VerifyDomainsRequest, v1.VerifyDomainsResponse](
			httpClient,
			baseURL+UtilsServiceVerifyDomainsProcedure,
			connect.WithSchema(utilsServiceMethods.ByName("VerifyDomains")),
			connect.WithClientOptions(opts...),
		),
	}
}

// utilsServiceClient implements UtilsServiceClient.
type utilsServiceClient struct {
	verifyDomains *connect.Client[v1.VerifyDomainsRequest, v1.VerifyDomainsResponse]
}

// VerifyDomains calls util.v1.UtilsService.VerifyDomains.
func (c *utilsServiceClient) VerifyDomains(ctx context.Context, req *connect.Request[v1.VerifyDomainsRequest]) (*connect.Response[v1.VerifyDomainsResponse], error) {
	return c.verifyDomains.CallUnary(ctx, req)
}

// UtilsServiceHandler is an implementation of the util.v1.UtilsService service.
type UtilsServiceHandler interface {
	// Verifies the SSL certificates of the provided domains.
	VerifyDomains(context.Context, *connect.Request[v1.VerifyDomainsRequest]) (*connect.Response[v1.VerifyDomainsResponse], error)
}

// NewUtilsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUtilsServiceHandler(svc UtilsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	utilsServiceMethods := v1.File_util_v1_util_proto.Services().ByName("UtilsService").Methods()
	utilsServiceVerifyDomainsHandler := connect.NewUnaryHandler(
		UtilsServiceVerifyDomainsProcedure,
		svc.VerifyDomains,
		connect.WithSchema(utilsServiceMethods.ByName("VerifyDomains")),
		connect.WithHandlerOptions(opts...),
	)
	return "/util.v1.UtilsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UtilsServiceVerifyDomainsProcedure:
			utilsServiceVerifyDomainsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUtilsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUtilsServiceHandler struct{}

func (UnimplementedUtilsServiceHandler) VerifyDomains(context.Context, *connect.Request[v1.VerifyDomainsRequest]) (*connect.Response[v1.VerifyDomainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("util.v1.UtilsService.VerifyDomains is not implemented"))
}
