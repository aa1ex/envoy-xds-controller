// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: permissions/v1/permissions.proto

package permissionsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/permissions/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PermissionsServiceName is the fully-qualified name of the PermissionsService service.
	PermissionsServiceName = "permissions.v1.PermissionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PermissionsServiceListPermissionsProcedure is the fully-qualified name of the
	// PermissionsService's ListPermissions RPC.
	PermissionsServiceListPermissionsProcedure = "/permissions.v1.PermissionsService/ListPermissions"
)

// PermissionsServiceClient is a client for the permissions.v1.PermissionsService service.
type PermissionsServiceClient interface {
	// Lists the permissions associated with a specific access group.
	ListPermissions(context.Context, *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error)
}

// NewPermissionsServiceClient constructs a client for the permissions.v1.PermissionsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPermissionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PermissionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	permissionsServiceMethods := v1.File_permissions_v1_permissions_proto.Services().ByName("PermissionsService").Methods()
	return &permissionsServiceClient{
		listPermissions: connect.NewClient[v1.ListPermissionsRequest, v1.ListPermissionsResponse](
			httpClient,
			baseURL+PermissionsServiceListPermissionsProcedure,
			connect.WithSchema(permissionsServiceMethods.ByName("ListPermissions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// permissionsServiceClient implements PermissionsServiceClient.
type permissionsServiceClient struct {
	listPermissions *connect.Client[v1.ListPermissionsRequest, v1.ListPermissionsResponse]
}

// ListPermissions calls permissions.v1.PermissionsService.ListPermissions.
func (c *permissionsServiceClient) ListPermissions(ctx context.Context, req *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error) {
	return c.listPermissions.CallUnary(ctx, req)
}

// PermissionsServiceHandler is an implementation of the permissions.v1.PermissionsService service.
type PermissionsServiceHandler interface {
	// Lists the permissions associated with a specific access group.
	ListPermissions(context.Context, *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error)
}

// NewPermissionsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPermissionsServiceHandler(svc PermissionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	permissionsServiceMethods := v1.File_permissions_v1_permissions_proto.Services().ByName("PermissionsService").Methods()
	permissionsServiceListPermissionsHandler := connect.NewUnaryHandler(
		PermissionsServiceListPermissionsProcedure,
		svc.ListPermissions,
		connect.WithSchema(permissionsServiceMethods.ByName("ListPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/permissions.v1.PermissionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PermissionsServiceListPermissionsProcedure:
			permissionsServiceListPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPermissionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPermissionsServiceHandler struct{}

func (UnimplementedPermissionsServiceHandler) ListPermissions(context.Context, *connect.Request[v1.ListPermissionsRequest]) (*connect.Response[v1.ListPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("permissions.v1.PermissionsService.ListPermissions is not implemented"))
}
