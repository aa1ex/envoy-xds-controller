// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: virtual_service/v1/virtual_service.proto

package virtual_servicev1

import (
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/common/v1"
	v11 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/virtual_service_template/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateVirtualServiceRequest is the request message for creating a virtual service.
type CreateVirtualServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the virtual service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The node IDs associated with the virtual service.
	NodeIds []string `protobuf:"bytes,2,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// The access group of the virtual service.
	AccessGroup string `protobuf:"bytes,3,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	// The UID of the template used by the virtual service.
	TemplateUid string `protobuf:"bytes,4,opt,name=template_uid,json=templateUid,proto3" json:"template_uid,omitempty"`
	// The UID of the listener associated with the virtual service.
	ListenerUid string `protobuf:"bytes,5,opt,name=listener_uid,json=listenerUid,proto3" json:"listener_uid,omitempty"`
	// The virtual host configuration for the virtual service.
	VirtualHost *v1.VirtualHost `protobuf:"bytes,6,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// The configuration for access logs.
	//
	// Types that are valid to be assigned to AccessLogConfig:
	//
	//	*CreateVirtualServiceRequest_AccessLogConfigUid
	AccessLogConfig isCreateVirtualServiceRequest_AccessLogConfig `protobuf_oneof:"access_log_config"`
	// UIDs of additional HTTP filters appended to the virtual service.
	AdditionalHttpFilterUids []string `protobuf:"bytes,8,rep,name=additional_http_filter_uids,json=additionalHttpFilterUids,proto3" json:"additional_http_filter_uids,omitempty"`
	// UIDs of additional routes appended to the virtual service.
	AdditionalRouteUids []string `protobuf:"bytes,9,rep,name=additional_route_uids,json=additionalRouteUids,proto3" json:"additional_route_uids,omitempty"`
	// Whether to use the remote address for the virtual service.
	UseRemoteAddress *bool `protobuf:"varint,10,opt,name=use_remote_address,json=useRemoteAddress,proto3,oneof" json:"use_remote_address,omitempty"`
	// Template options for the virtual service.
	TemplateOptions []*v11.TemplateOption `protobuf:"bytes,11,rep,name=template_options,json=templateOptions,proto3" json:"template_options,omitempty"`
	// Description is the human-readable description of the resource
	Description   string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVirtualServiceRequest) Reset() {
	*x = CreateVirtualServiceRequest{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVirtualServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualServiceRequest) ProtoMessage() {}

func (x *CreateVirtualServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtualServiceRequest) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVirtualServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVirtualServiceRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *CreateVirtualServiceRequest) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

func (x *CreateVirtualServiceRequest) GetTemplateUid() string {
	if x != nil {
		return x.TemplateUid
	}
	return ""
}

func (x *CreateVirtualServiceRequest) GetListenerUid() string {
	if x != nil {
		return x.ListenerUid
	}
	return ""
}

func (x *CreateVirtualServiceRequest) GetVirtualHost() *v1.VirtualHost {
	if x != nil {
		return x.VirtualHost
	}
	return nil
}

func (x *CreateVirtualServiceRequest) GetAccessLogConfig() isCreateVirtualServiceRequest_AccessLogConfig {
	if x != nil {
		return x.AccessLogConfig
	}
	return nil
}

func (x *CreateVirtualServiceRequest) GetAccessLogConfigUid() string {
	if x != nil {
		if x, ok := x.AccessLogConfig.(*CreateVirtualServiceRequest_AccessLogConfigUid); ok {
			return x.AccessLogConfigUid
		}
	}
	return ""
}

func (x *CreateVirtualServiceRequest) GetAdditionalHttpFilterUids() []string {
	if x != nil {
		return x.AdditionalHttpFilterUids
	}
	return nil
}

func (x *CreateVirtualServiceRequest) GetAdditionalRouteUids() []string {
	if x != nil {
		return x.AdditionalRouteUids
	}
	return nil
}

func (x *CreateVirtualServiceRequest) GetUseRemoteAddress() bool {
	if x != nil && x.UseRemoteAddress != nil {
		return *x.UseRemoteAddress
	}
	return false
}

func (x *CreateVirtualServiceRequest) GetTemplateOptions() []*v11.TemplateOption {
	if x != nil {
		return x.TemplateOptions
	}
	return nil
}

func (x *CreateVirtualServiceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isCreateVirtualServiceRequest_AccessLogConfig interface {
	isCreateVirtualServiceRequest_AccessLogConfig()
}

type CreateVirtualServiceRequest_AccessLogConfigUid struct {
	// The UID of the access log configuration.
	AccessLogConfigUid string `protobuf:"bytes,7,opt,name=access_log_config_uid,json=accessLogConfigUid,proto3,oneof"`
}

func (*CreateVirtualServiceRequest_AccessLogConfigUid) isCreateVirtualServiceRequest_AccessLogConfig() {
}

// CreateVirtualServiceResponse is the response message for creating a virtual service.
type CreateVirtualServiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVirtualServiceResponse) Reset() {
	*x = CreateVirtualServiceResponse{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVirtualServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualServiceResponse) ProtoMessage() {}

func (x *CreateVirtualServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateVirtualServiceResponse) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{1}
}

// UpdateVirtualServiceRequest is the request message for updating a virtual service.
type UpdateVirtualServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UID of the virtual service.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The node IDs associated with the virtual service.
	NodeIds []string `protobuf:"bytes,2,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// The UID of the template used by the virtual service.
	TemplateUid string `protobuf:"bytes,3,opt,name=template_uid,json=templateUid,proto3" json:"template_uid,omitempty"`
	// The UID of the listener associated with the virtual service.
	ListenerUid string `protobuf:"bytes,4,opt,name=listener_uid,json=listenerUid,proto3" json:"listener_uid,omitempty"`
	// The virtual host configuration for the virtual service.
	VirtualHost *v1.VirtualHost `protobuf:"bytes,5,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// The configuration for access logs.
	//
	// Types that are valid to be assigned to AccessLogConfig:
	//
	//	*UpdateVirtualServiceRequest_AccessLogConfigUid
	AccessLogConfig isUpdateVirtualServiceRequest_AccessLogConfig `protobuf_oneof:"access_log_config"`
	// UIDs of additional HTTP filters appended to the virtual service.
	AdditionalHttpFilterUids []string `protobuf:"bytes,7,rep,name=additional_http_filter_uids,json=additionalHttpFilterUids,proto3" json:"additional_http_filter_uids,omitempty"`
	// UIDs of additional routes appended to the virtual service.
	AdditionalRouteUids []string `protobuf:"bytes,8,rep,name=additional_route_uids,json=additionalRouteUids,proto3" json:"additional_route_uids,omitempty"`
	// Whether to use the remote address for the virtual service.
	UseRemoteAddress *bool `protobuf:"varint,9,opt,name=use_remote_address,json=useRemoteAddress,proto3,oneof" json:"use_remote_address,omitempty"`
	// Template options for the virtual service.
	TemplateOptions []*v11.TemplateOption `protobuf:"bytes,10,rep,name=template_options,json=templateOptions,proto3" json:"template_options,omitempty"`
	// Description is the human-readable description of the resource
	Description   string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVirtualServiceRequest) Reset() {
	*x = UpdateVirtualServiceRequest{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVirtualServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualServiceRequest) ProtoMessage() {}

func (x *UpdateVirtualServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateVirtualServiceRequest) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateVirtualServiceRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UpdateVirtualServiceRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *UpdateVirtualServiceRequest) GetTemplateUid() string {
	if x != nil {
		return x.TemplateUid
	}
	return ""
}

func (x *UpdateVirtualServiceRequest) GetListenerUid() string {
	if x != nil {
		return x.ListenerUid
	}
	return ""
}

func (x *UpdateVirtualServiceRequest) GetVirtualHost() *v1.VirtualHost {
	if x != nil {
		return x.VirtualHost
	}
	return nil
}

func (x *UpdateVirtualServiceRequest) GetAccessLogConfig() isUpdateVirtualServiceRequest_AccessLogConfig {
	if x != nil {
		return x.AccessLogConfig
	}
	return nil
}

func (x *UpdateVirtualServiceRequest) GetAccessLogConfigUid() string {
	if x != nil {
		if x, ok := x.AccessLogConfig.(*UpdateVirtualServiceRequest_AccessLogConfigUid); ok {
			return x.AccessLogConfigUid
		}
	}
	return ""
}

func (x *UpdateVirtualServiceRequest) GetAdditionalHttpFilterUids() []string {
	if x != nil {
		return x.AdditionalHttpFilterUids
	}
	return nil
}

func (x *UpdateVirtualServiceRequest) GetAdditionalRouteUids() []string {
	if x != nil {
		return x.AdditionalRouteUids
	}
	return nil
}

func (x *UpdateVirtualServiceRequest) GetUseRemoteAddress() bool {
	if x != nil && x.UseRemoteAddress != nil {
		return *x.UseRemoteAddress
	}
	return false
}

func (x *UpdateVirtualServiceRequest) GetTemplateOptions() []*v11.TemplateOption {
	if x != nil {
		return x.TemplateOptions
	}
	return nil
}

func (x *UpdateVirtualServiceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isUpdateVirtualServiceRequest_AccessLogConfig interface {
	isUpdateVirtualServiceRequest_AccessLogConfig()
}

type UpdateVirtualServiceRequest_AccessLogConfigUid struct {
	// The UID of the access log configuration.
	AccessLogConfigUid string `protobuf:"bytes,6,opt,name=access_log_config_uid,json=accessLogConfigUid,proto3,oneof"`
}

func (*UpdateVirtualServiceRequest_AccessLogConfigUid) isUpdateVirtualServiceRequest_AccessLogConfig() {
}

// UpdateVirtualServiceResponse is the response message for updating a virtual service.
type UpdateVirtualServiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVirtualServiceResponse) Reset() {
	*x = UpdateVirtualServiceResponse{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVirtualServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualServiceResponse) ProtoMessage() {}

func (x *UpdateVirtualServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualServiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateVirtualServiceResponse) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{3}
}

// DeleteVirtualServiceRequest is the request message for deleting a virtual service.
type DeleteVirtualServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UID of the virtual service to delete.
	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVirtualServiceRequest) Reset() {
	*x = DeleteVirtualServiceRequest{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVirtualServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualServiceRequest) ProtoMessage() {}

func (x *DeleteVirtualServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteVirtualServiceRequest) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteVirtualServiceRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// DeleteVirtualServiceResponse is the response message for deleting a virtual service.
type DeleteVirtualServiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVirtualServiceResponse) Reset() {
	*x = DeleteVirtualServiceResponse{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVirtualServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualServiceResponse) ProtoMessage() {}

func (x *DeleteVirtualServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualServiceResponse.ProtoReflect.Descriptor instead.
func (*DeleteVirtualServiceResponse) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{5}
}

// GetVirtualServiceRequest is the request message for retrieving a virtual service.
type GetVirtualServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UID of the virtual service to retrieve.
	Uid           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVirtualServiceRequest) Reset() {
	*x = GetVirtualServiceRequest{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVirtualServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualServiceRequest) ProtoMessage() {}

func (x *GetVirtualServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualServiceRequest.ProtoReflect.Descriptor instead.
func (*GetVirtualServiceRequest) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetVirtualServiceRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// GetVirtualServiceResponse is the response message for retrieving a virtual service.
type GetVirtualServiceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UID of the virtual service.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The name of the virtual service.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The node IDs associated with the virtual service.
	NodeIds []string `protobuf:"bytes,3,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// The access group of the virtual service.
	AccessGroup string `protobuf:"bytes,4,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	// A reference to the template used by the virtual service.
	Template *v1.ResourceRef `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
	// A reference to the listener associated with the virtual service.
	Listener *v1.ResourceRef `protobuf:"bytes,6,opt,name=listener,proto3" json:"listener,omitempty"`
	// The virtual host configuration for the virtual service.
	VirtualHost *v1.VirtualHost `protobuf:"bytes,7,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// The configuration of access logs.
	//
	// Types that are valid to be assigned to AccessLog:
	//
	//	*GetVirtualServiceResponse_AccessLogConfig
	//	*GetVirtualServiceResponse_AccessLogConfigRaw
	AccessLog isGetVirtualServiceResponse_AccessLog `protobuf_oneof:"access_log"`
	// Additional HTTP filters associated with the virtual service.
	AdditionalHttpFilters []*v1.ResourceRef `protobuf:"bytes,10,rep,name=additional_http_filters,json=additionalHttpFilters,proto3" json:"additional_http_filters,omitempty"`
	// Additional routes associated with the virtual service.
	AdditionalRoutes []*v1.ResourceRef `protobuf:"bytes,11,rep,name=additional_routes,json=additionalRoutes,proto3" json:"additional_routes,omitempty"`
	// Whether the virtual service uses the remote address.
	UseRemoteAddress *bool `protobuf:"varint,12,opt,name=use_remote_address,json=useRemoteAddress,proto3,oneof" json:"use_remote_address,omitempty"`
	// Template options for the virtual service.
	TemplateOptions []*v11.TemplateOption `protobuf:"bytes,13,rep,name=template_options,json=templateOptions,proto3" json:"template_options,omitempty"`
	// Indicates whether the virtual service is editable.
	IsEditable bool `protobuf:"varint,14,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	// Description is the human-readable description of the resource
	Description   string `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVirtualServiceResponse) Reset() {
	*x = GetVirtualServiceResponse{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVirtualServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualServiceResponse) ProtoMessage() {}

func (x *GetVirtualServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualServiceResponse.ProtoReflect.Descriptor instead.
func (*GetVirtualServiceResponse) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetVirtualServiceResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetVirtualServiceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVirtualServiceResponse) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

func (x *GetVirtualServiceResponse) GetTemplate() *v1.ResourceRef {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetListener() *v1.ResourceRef {
	if x != nil {
		return x.Listener
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetVirtualHost() *v1.VirtualHost {
	if x != nil {
		return x.VirtualHost
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetAccessLog() isGetVirtualServiceResponse_AccessLog {
	if x != nil {
		return x.AccessLog
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetAccessLogConfig() *v1.ResourceRef {
	if x != nil {
		if x, ok := x.AccessLog.(*GetVirtualServiceResponse_AccessLogConfig); ok {
			return x.AccessLogConfig
		}
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetAccessLogConfigRaw() []byte {
	if x != nil {
		if x, ok := x.AccessLog.(*GetVirtualServiceResponse_AccessLogConfigRaw); ok {
			return x.AccessLogConfigRaw
		}
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetAdditionalHttpFilters() []*v1.ResourceRef {
	if x != nil {
		return x.AdditionalHttpFilters
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetAdditionalRoutes() []*v1.ResourceRef {
	if x != nil {
		return x.AdditionalRoutes
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetUseRemoteAddress() bool {
	if x != nil && x.UseRemoteAddress != nil {
		return *x.UseRemoteAddress
	}
	return false
}

func (x *GetVirtualServiceResponse) GetTemplateOptions() []*v11.TemplateOption {
	if x != nil {
		return x.TemplateOptions
	}
	return nil
}

func (x *GetVirtualServiceResponse) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *GetVirtualServiceResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isGetVirtualServiceResponse_AccessLog interface {
	isGetVirtualServiceResponse_AccessLog()
}

type GetVirtualServiceResponse_AccessLogConfig struct {
	// A reference to the access log configuration.
	AccessLogConfig *v1.ResourceRef `protobuf:"bytes,8,opt,name=access_log_config,json=accessLogConfig,proto3,oneof"`
}

type GetVirtualServiceResponse_AccessLogConfigRaw struct {
	// Raw configuration for access logs.
	AccessLogConfigRaw []byte `protobuf:"bytes,9,opt,name=access_log_config_raw,json=accessLogConfigRaw,proto3,oneof"`
}

func (*GetVirtualServiceResponse_AccessLogConfig) isGetVirtualServiceResponse_AccessLog() {}

func (*GetVirtualServiceResponse_AccessLogConfigRaw) isGetVirtualServiceResponse_AccessLog() {}

// ListVirtualServicesRequest is the request message for listing virtual services.
type ListVirtualServicesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The access group for which to list virtual services.
	AccessGroup   string `protobuf:"bytes,1,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVirtualServicesRequest) Reset() {
	*x = ListVirtualServicesRequest{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVirtualServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualServicesRequest) ProtoMessage() {}

func (x *ListVirtualServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualServicesRequest.ProtoReflect.Descriptor instead.
func (*ListVirtualServicesRequest) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListVirtualServicesRequest) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

// VirtualServiceListItem represents a single virtual service in a list response.
type VirtualServiceListItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UID of the virtual service.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The name of the virtual service.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The node IDs associated with the virtual service.
	NodeIds []string `protobuf:"bytes,3,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// The access group of the virtual service.
	AccessGroup string `protobuf:"bytes,4,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	// A reference to the template used by the virtual service.
	Template *v1.ResourceRef `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
	// Indicates whether the virtual service is editable.
	IsEditable bool `protobuf:"varint,6,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	// Description is the human-readable description of the resource
	Description   string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualServiceListItem) Reset() {
	*x = VirtualServiceListItem{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualServiceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServiceListItem) ProtoMessage() {}

func (x *VirtualServiceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServiceListItem.ProtoReflect.Descriptor instead.
func (*VirtualServiceListItem) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{9}
}

func (x *VirtualServiceListItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *VirtualServiceListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualServiceListItem) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *VirtualServiceListItem) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

func (x *VirtualServiceListItem) GetTemplate() *v1.ResourceRef {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *VirtualServiceListItem) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *VirtualServiceListItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ListVirtualServicesResponse is the response message for listing virtual services.
type ListVirtualServicesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of virtual services.
	Items         []*VirtualServiceListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVirtualServicesResponse) Reset() {
	*x = ListVirtualServicesResponse{}
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVirtualServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualServicesResponse) ProtoMessage() {}

func (x *ListVirtualServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_service_v1_virtual_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualServicesResponse.ProtoReflect.Descriptor instead.
func (*ListVirtualServicesResponse) Descriptor() ([]byte, []int) {
	return file_virtual_service_v1_virtual_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListVirtualServicesResponse) GetItems() []*VirtualServiceListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_virtual_service_v1_virtual_service_proto protoreflect.FileDescriptor

var file_virtual_service_v1_virtual_service_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x04, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12, 0x31, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x04, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x56, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0xa5, 0x06, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x33, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x61, 0x77, 0x12, 0x4e, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xf3, 0x01,
	0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x32, 0xf7, 0x04, 0x0a, 0x1a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xed,
	0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x61,
	0x73, 0x6f, 0x70, 0x73, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2d, 0x78, 0x64, 0x73, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58,
	0x58, 0xaa, 0x02, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_virtual_service_v1_virtual_service_proto_rawDescOnce sync.Once
	file_virtual_service_v1_virtual_service_proto_rawDescData []byte
)

func file_virtual_service_v1_virtual_service_proto_rawDescGZIP() []byte {
	file_virtual_service_v1_virtual_service_proto_rawDescOnce.Do(func() {
		file_virtual_service_v1_virtual_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_virtual_service_v1_virtual_service_proto_rawDesc), len(file_virtual_service_v1_virtual_service_proto_rawDesc)))
	})
	return file_virtual_service_v1_virtual_service_proto_rawDescData
}

var file_virtual_service_v1_virtual_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_virtual_service_v1_virtual_service_proto_goTypes = []any{
	(*CreateVirtualServiceRequest)(nil),  // 0: virtual_service.v1.CreateVirtualServiceRequest
	(*CreateVirtualServiceResponse)(nil), // 1: virtual_service.v1.CreateVirtualServiceResponse
	(*UpdateVirtualServiceRequest)(nil),  // 2: virtual_service.v1.UpdateVirtualServiceRequest
	(*UpdateVirtualServiceResponse)(nil), // 3: virtual_service.v1.UpdateVirtualServiceResponse
	(*DeleteVirtualServiceRequest)(nil),  // 4: virtual_service.v1.DeleteVirtualServiceRequest
	(*DeleteVirtualServiceResponse)(nil), // 5: virtual_service.v1.DeleteVirtualServiceResponse
	(*GetVirtualServiceRequest)(nil),     // 6: virtual_service.v1.GetVirtualServiceRequest
	(*GetVirtualServiceResponse)(nil),    // 7: virtual_service.v1.GetVirtualServiceResponse
	(*ListVirtualServicesRequest)(nil),   // 8: virtual_service.v1.ListVirtualServicesRequest
	(*VirtualServiceListItem)(nil),       // 9: virtual_service.v1.VirtualServiceListItem
	(*ListVirtualServicesResponse)(nil),  // 10: virtual_service.v1.ListVirtualServicesResponse
	(*v1.VirtualHost)(nil),               // 11: common.v1.VirtualHost
	(*v11.TemplateOption)(nil),           // 12: virtual_service_template.v1.TemplateOption
	(*v1.ResourceRef)(nil),               // 13: common.v1.ResourceRef
}
var file_virtual_service_v1_virtual_service_proto_depIdxs = []int32{
	11, // 0: virtual_service.v1.CreateVirtualServiceRequest.virtual_host:type_name -> common.v1.VirtualHost
	12, // 1: virtual_service.v1.CreateVirtualServiceRequest.template_options:type_name -> virtual_service_template.v1.TemplateOption
	11, // 2: virtual_service.v1.UpdateVirtualServiceRequest.virtual_host:type_name -> common.v1.VirtualHost
	12, // 3: virtual_service.v1.UpdateVirtualServiceRequest.template_options:type_name -> virtual_service_template.v1.TemplateOption
	13, // 4: virtual_service.v1.GetVirtualServiceResponse.template:type_name -> common.v1.ResourceRef
	13, // 5: virtual_service.v1.GetVirtualServiceResponse.listener:type_name -> common.v1.ResourceRef
	11, // 6: virtual_service.v1.GetVirtualServiceResponse.virtual_host:type_name -> common.v1.VirtualHost
	13, // 7: virtual_service.v1.GetVirtualServiceResponse.access_log_config:type_name -> common.v1.ResourceRef
	13, // 8: virtual_service.v1.GetVirtualServiceResponse.additional_http_filters:type_name -> common.v1.ResourceRef
	13, // 9: virtual_service.v1.GetVirtualServiceResponse.additional_routes:type_name -> common.v1.ResourceRef
	12, // 10: virtual_service.v1.GetVirtualServiceResponse.template_options:type_name -> virtual_service_template.v1.TemplateOption
	13, // 11: virtual_service.v1.VirtualServiceListItem.template:type_name -> common.v1.ResourceRef
	9,  // 12: virtual_service.v1.ListVirtualServicesResponse.items:type_name -> virtual_service.v1.VirtualServiceListItem
	0,  // 13: virtual_service.v1.VirtualServiceStoreService.CreateVirtualService:input_type -> virtual_service.v1.CreateVirtualServiceRequest
	2,  // 14: virtual_service.v1.VirtualServiceStoreService.UpdateVirtualService:input_type -> virtual_service.v1.UpdateVirtualServiceRequest
	4,  // 15: virtual_service.v1.VirtualServiceStoreService.DeleteVirtualService:input_type -> virtual_service.v1.DeleteVirtualServiceRequest
	6,  // 16: virtual_service.v1.VirtualServiceStoreService.GetVirtualService:input_type -> virtual_service.v1.GetVirtualServiceRequest
	8,  // 17: virtual_service.v1.VirtualServiceStoreService.ListVirtualServices:input_type -> virtual_service.v1.ListVirtualServicesRequest
	1,  // 18: virtual_service.v1.VirtualServiceStoreService.CreateVirtualService:output_type -> virtual_service.v1.CreateVirtualServiceResponse
	3,  // 19: virtual_service.v1.VirtualServiceStoreService.UpdateVirtualService:output_type -> virtual_service.v1.UpdateVirtualServiceResponse
	5,  // 20: virtual_service.v1.VirtualServiceStoreService.DeleteVirtualService:output_type -> virtual_service.v1.DeleteVirtualServiceResponse
	7,  // 21: virtual_service.v1.VirtualServiceStoreService.GetVirtualService:output_type -> virtual_service.v1.GetVirtualServiceResponse
	10, // 22: virtual_service.v1.VirtualServiceStoreService.ListVirtualServices:output_type -> virtual_service.v1.ListVirtualServicesResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_virtual_service_v1_virtual_service_proto_init() }
func file_virtual_service_v1_virtual_service_proto_init() {
	if File_virtual_service_v1_virtual_service_proto != nil {
		return
	}
	file_virtual_service_v1_virtual_service_proto_msgTypes[0].OneofWrappers = []any{
		(*CreateVirtualServiceRequest_AccessLogConfigUid)(nil),
	}
	file_virtual_service_v1_virtual_service_proto_msgTypes[2].OneofWrappers = []any{
		(*UpdateVirtualServiceRequest_AccessLogConfigUid)(nil),
	}
	file_virtual_service_v1_virtual_service_proto_msgTypes[7].OneofWrappers = []any{
		(*GetVirtualServiceResponse_AccessLogConfig)(nil),
		(*GetVirtualServiceResponse_AccessLogConfigRaw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_virtual_service_v1_virtual_service_proto_rawDesc), len(file_virtual_service_v1_virtual_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_virtual_service_v1_virtual_service_proto_goTypes,
		DependencyIndexes: file_virtual_service_v1_virtual_service_proto_depIdxs,
		MessageInfos:      file_virtual_service_v1_virtual_service_proto_msgTypes,
	}.Build()
	File_virtual_service_v1_virtual_service_proto = out.File
	file_virtual_service_v1_virtual_service_proto_goTypes = nil
	file_virtual_service_v1_virtual_service_proto_depIdxs = nil
}
