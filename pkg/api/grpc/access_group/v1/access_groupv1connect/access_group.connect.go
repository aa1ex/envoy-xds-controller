// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: access_group/v1/access_group.proto

package access_groupv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/access_group/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccessGroupStoreServiceName is the fully-qualified name of the AccessGroupStoreService service.
	AccessGroupStoreServiceName = "access_group.v1.AccessGroupStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccessGroupStoreServiceListAccessGroupsProcedure is the fully-qualified name of the
	// AccessGroupStoreService's ListAccessGroups RPC.
	AccessGroupStoreServiceListAccessGroupsProcedure = "/access_group.v1.AccessGroupStoreService/ListAccessGroups"
)

// AccessGroupStoreServiceClient is a client for the access_group.v1.AccessGroupStoreService
// service.
type AccessGroupStoreServiceClient interface {
	ListAccessGroups(context.Context, *connect.Request[v1.ListAccessGroupsRequest]) (*connect.Response[v1.ListAccessGroupsResponse], error)
}

// NewAccessGroupStoreServiceClient constructs a client for the
// access_group.v1.AccessGroupStoreService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessGroupStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccessGroupStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accessGroupStoreServiceMethods := v1.File_access_group_v1_access_group_proto.Services().ByName("AccessGroupStoreService").Methods()
	return &accessGroupStoreServiceClient{
		listAccessGroups: connect.NewClient[v1.ListAccessGroupsRequest, v1.ListAccessGroupsResponse](
			httpClient,
			baseURL+AccessGroupStoreServiceListAccessGroupsProcedure,
			connect.WithSchema(accessGroupStoreServiceMethods.ByName("ListAccessGroups")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accessGroupStoreServiceClient implements AccessGroupStoreServiceClient.
type accessGroupStoreServiceClient struct {
	listAccessGroups *connect.Client[v1.ListAccessGroupsRequest, v1.ListAccessGroupsResponse]
}

// ListAccessGroups calls access_group.v1.AccessGroupStoreService.ListAccessGroups.
func (c *accessGroupStoreServiceClient) ListAccessGroups(ctx context.Context, req *connect.Request[v1.ListAccessGroupsRequest]) (*connect.Response[v1.ListAccessGroupsResponse], error) {
	return c.listAccessGroups.CallUnary(ctx, req)
}

// AccessGroupStoreServiceHandler is an implementation of the
// access_group.v1.AccessGroupStoreService service.
type AccessGroupStoreServiceHandler interface {
	ListAccessGroups(context.Context, *connect.Request[v1.ListAccessGroupsRequest]) (*connect.Response[v1.ListAccessGroupsResponse], error)
}

// NewAccessGroupStoreServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessGroupStoreServiceHandler(svc AccessGroupStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accessGroupStoreServiceMethods := v1.File_access_group_v1_access_group_proto.Services().ByName("AccessGroupStoreService").Methods()
	accessGroupStoreServiceListAccessGroupsHandler := connect.NewUnaryHandler(
		AccessGroupStoreServiceListAccessGroupsProcedure,
		svc.ListAccessGroups,
		connect.WithSchema(accessGroupStoreServiceMethods.ByName("ListAccessGroups")),
		connect.WithHandlerOptions(opts...),
	)
	return "/access_group.v1.AccessGroupStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessGroupStoreServiceListAccessGroupsProcedure:
			accessGroupStoreServiceListAccessGroupsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessGroupStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessGroupStoreServiceHandler struct{}

func (UnimplementedAccessGroupStoreServiceHandler) ListAccessGroups(context.Context, *connect.Request[v1.ListAccessGroupsRequest]) (*connect.Response[v1.ListAccessGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("access_group.v1.AccessGroupStoreService.ListAccessGroups is not implemented"))
}
