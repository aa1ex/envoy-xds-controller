// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listener/v1/listener.proto

package listenerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/listener/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ListenerStoreServiceName is the fully-qualified name of the ListenerStoreService service.
	ListenerStoreServiceName = "listener.v1.ListenerStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ListenerStoreServiceListListenersProcedure is the fully-qualified name of the
	// ListenerStoreService's ListListeners RPC.
	ListenerStoreServiceListListenersProcedure = "/listener.v1.ListenerStoreService/ListListeners"
)

// ListenerStoreServiceClient is a client for the listener.v1.ListenerStoreService service.
type ListenerStoreServiceClient interface {
	// Retrieves a list of listeners based on the request.
	ListListeners(context.Context, *connect.Request[v1.ListListenersRequest]) (*connect.Response[v1.ListListenersResponse], error)
}

// NewListenerStoreServiceClient constructs a client for the listener.v1.ListenerStoreService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewListenerStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ListenerStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	listenerStoreServiceMethods := v1.File_listener_v1_listener_proto.Services().ByName("ListenerStoreService").Methods()
	return &listenerStoreServiceClient{
		listListeners: connect.NewClient[v1.ListListenersRequest, v1.ListListenersResponse](
			httpClient,
			baseURL+ListenerStoreServiceListListenersProcedure,
			connect.WithSchema(listenerStoreServiceMethods.ByName("ListListeners")),
			connect.WithClientOptions(opts...),
		),
	}
}

// listenerStoreServiceClient implements ListenerStoreServiceClient.
type listenerStoreServiceClient struct {
	listListeners *connect.Client[v1.ListListenersRequest, v1.ListListenersResponse]
}

// ListListeners calls listener.v1.ListenerStoreService.ListListeners.
func (c *listenerStoreServiceClient) ListListeners(ctx context.Context, req *connect.Request[v1.ListListenersRequest]) (*connect.Response[v1.ListListenersResponse], error) {
	return c.listListeners.CallUnary(ctx, req)
}

// ListenerStoreServiceHandler is an implementation of the listener.v1.ListenerStoreService service.
type ListenerStoreServiceHandler interface {
	// Retrieves a list of listeners based on the request.
	ListListeners(context.Context, *connect.Request[v1.ListListenersRequest]) (*connect.Response[v1.ListListenersResponse], error)
}

// NewListenerStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewListenerStoreServiceHandler(svc ListenerStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	listenerStoreServiceMethods := v1.File_listener_v1_listener_proto.Services().ByName("ListenerStoreService").Methods()
	listenerStoreServiceListListenersHandler := connect.NewUnaryHandler(
		ListenerStoreServiceListListenersProcedure,
		svc.ListListeners,
		connect.WithSchema(listenerStoreServiceMethods.ByName("ListListeners")),
		connect.WithHandlerOptions(opts...),
	)
	return "/listener.v1.ListenerStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ListenerStoreServiceListListenersProcedure:
			listenerStoreServiceListListenersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedListenerStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedListenerStoreServiceHandler struct{}

func (UnimplementedListenerStoreServiceHandler) ListListeners(context.Context, *connect.Request[v1.ListListenersRequest]) (*connect.Response[v1.ListListenersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listener.v1.ListenerStoreService.ListListeners is not implemented"))
}
