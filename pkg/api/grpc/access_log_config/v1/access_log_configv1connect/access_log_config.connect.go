// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: access_log_config/v1/access_log_config.proto

package access_log_configv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/access_log_config/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccessLogConfigStoreServiceName is the fully-qualified name of the AccessLogConfigStoreService
	// service.
	AccessLogConfigStoreServiceName = "access_log_config.v1.AccessLogConfigStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccessLogConfigStoreServiceListAccessLogConfigProcedure is the fully-qualified name of the
	// AccessLogConfigStoreService's ListAccessLogConfig RPC.
	AccessLogConfigStoreServiceListAccessLogConfigProcedure = "/access_log_config.v1.AccessLogConfigStoreService/ListAccessLogConfig"
)

// AccessLogConfigStoreServiceClient is a client for the
// access_log_config.v1.AccessLogConfigStoreService service.
type AccessLogConfigStoreServiceClient interface {
	ListAccessLogConfig(context.Context, *connect.Request[v1.ListAccessLogConfigRequest]) (*connect.Response[v1.ListAccessLogConfigResponse], error)
}

// NewAccessLogConfigStoreServiceClient constructs a client for the
// access_log_config.v1.AccessLogConfigStoreService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessLogConfigStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccessLogConfigStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accessLogConfigStoreServiceMethods := v1.File_access_log_config_v1_access_log_config_proto.Services().ByName("AccessLogConfigStoreService").Methods()
	return &accessLogConfigStoreServiceClient{
		listAccessLogConfig: connect.NewClient[v1.ListAccessLogConfigRequest, v1.ListAccessLogConfigResponse](
			httpClient,
			baseURL+AccessLogConfigStoreServiceListAccessLogConfigProcedure,
			connect.WithSchema(accessLogConfigStoreServiceMethods.ByName("ListAccessLogConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accessLogConfigStoreServiceClient implements AccessLogConfigStoreServiceClient.
type accessLogConfigStoreServiceClient struct {
	listAccessLogConfig *connect.Client[v1.ListAccessLogConfigRequest, v1.ListAccessLogConfigResponse]
}

// ListAccessLogConfig calls access_log_config.v1.AccessLogConfigStoreService.ListAccessLogConfig.
func (c *accessLogConfigStoreServiceClient) ListAccessLogConfig(ctx context.Context, req *connect.Request[v1.ListAccessLogConfigRequest]) (*connect.Response[v1.ListAccessLogConfigResponse], error) {
	return c.listAccessLogConfig.CallUnary(ctx, req)
}

// AccessLogConfigStoreServiceHandler is an implementation of the
// access_log_config.v1.AccessLogConfigStoreService service.
type AccessLogConfigStoreServiceHandler interface {
	ListAccessLogConfig(context.Context, *connect.Request[v1.ListAccessLogConfigRequest]) (*connect.Response[v1.ListAccessLogConfigResponse], error)
}

// NewAccessLogConfigStoreServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessLogConfigStoreServiceHandler(svc AccessLogConfigStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accessLogConfigStoreServiceMethods := v1.File_access_log_config_v1_access_log_config_proto.Services().ByName("AccessLogConfigStoreService").Methods()
	accessLogConfigStoreServiceListAccessLogConfigHandler := connect.NewUnaryHandler(
		AccessLogConfigStoreServiceListAccessLogConfigProcedure,
		svc.ListAccessLogConfig,
		connect.WithSchema(accessLogConfigStoreServiceMethods.ByName("ListAccessLogConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/access_log_config.v1.AccessLogConfigStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessLogConfigStoreServiceListAccessLogConfigProcedure:
			accessLogConfigStoreServiceListAccessLogConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessLogConfigStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessLogConfigStoreServiceHandler struct{}

func (UnimplementedAccessLogConfigStoreServiceHandler) ListAccessLogConfig(context.Context, *connect.Request[v1.ListAccessLogConfigRequest]) (*connect.Response[v1.ListAccessLogConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("access_log_config.v1.AccessLogConfigStoreService.ListAccessLogConfig is not implemented"))
}
