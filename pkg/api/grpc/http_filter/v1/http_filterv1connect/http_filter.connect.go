// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: http_filter/v1/http_filter.proto

package http_filterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/http_filter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HTTPFilterStoreServiceName is the fully-qualified name of the HTTPFilterStoreService service.
	HTTPFilterStoreServiceName = "http_filter.v1.HTTPFilterStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HTTPFilterStoreServiceListHTTPFilterProcedure is the fully-qualified name of the
	// HTTPFilterStoreService's ListHTTPFilter RPC.
	HTTPFilterStoreServiceListHTTPFilterProcedure = "/http_filter.v1.HTTPFilterStoreService/ListHTTPFilter"
)

// HTTPFilterStoreServiceClient is a client for the http_filter.v1.HTTPFilterStoreService service.
type HTTPFilterStoreServiceClient interface {
	ListHTTPFilter(context.Context, *connect.Request[v1.ListHTTPFilterRequest]) (*connect.Response[v1.ListHTTPFilterResponse], error)
}

// NewHTTPFilterStoreServiceClient constructs a client for the http_filter.v1.HTTPFilterStoreService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHTTPFilterStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HTTPFilterStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hTTPFilterStoreServiceMethods := v1.File_http_filter_v1_http_filter_proto.Services().ByName("HTTPFilterStoreService").Methods()
	return &hTTPFilterStoreServiceClient{
		listHTTPFilter: connect.NewClient[v1.ListHTTPFilterRequest, v1.ListHTTPFilterResponse](
			httpClient,
			baseURL+HTTPFilterStoreServiceListHTTPFilterProcedure,
			connect.WithSchema(hTTPFilterStoreServiceMethods.ByName("ListHTTPFilter")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hTTPFilterStoreServiceClient implements HTTPFilterStoreServiceClient.
type hTTPFilterStoreServiceClient struct {
	listHTTPFilter *connect.Client[v1.ListHTTPFilterRequest, v1.ListHTTPFilterResponse]
}

// ListHTTPFilter calls http_filter.v1.HTTPFilterStoreService.ListHTTPFilter.
func (c *hTTPFilterStoreServiceClient) ListHTTPFilter(ctx context.Context, req *connect.Request[v1.ListHTTPFilterRequest]) (*connect.Response[v1.ListHTTPFilterResponse], error) {
	return c.listHTTPFilter.CallUnary(ctx, req)
}

// HTTPFilterStoreServiceHandler is an implementation of the http_filter.v1.HTTPFilterStoreService
// service.
type HTTPFilterStoreServiceHandler interface {
	ListHTTPFilter(context.Context, *connect.Request[v1.ListHTTPFilterRequest]) (*connect.Response[v1.ListHTTPFilterResponse], error)
}

// NewHTTPFilterStoreServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHTTPFilterStoreServiceHandler(svc HTTPFilterStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hTTPFilterStoreServiceMethods := v1.File_http_filter_v1_http_filter_proto.Services().ByName("HTTPFilterStoreService").Methods()
	hTTPFilterStoreServiceListHTTPFilterHandler := connect.NewUnaryHandler(
		HTTPFilterStoreServiceListHTTPFilterProcedure,
		svc.ListHTTPFilter,
		connect.WithSchema(hTTPFilterStoreServiceMethods.ByName("ListHTTPFilter")),
		connect.WithHandlerOptions(opts...),
	)
	return "/http_filter.v1.HTTPFilterStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HTTPFilterStoreServiceListHTTPFilterProcedure:
			hTTPFilterStoreServiceListHTTPFilterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHTTPFilterStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHTTPFilterStoreServiceHandler struct{}

func (UnimplementedHTTPFilterStoreServiceHandler) ListHTTPFilter(context.Context, *connect.Request[v1.ListHTTPFilterRequest]) (*connect.Response[v1.ListHTTPFilterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("http_filter.v1.HTTPFilterStoreService.ListHTTPFilter is not implemented"))
}
