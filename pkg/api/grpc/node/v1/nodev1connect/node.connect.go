// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: node/v1/node.proto

package nodev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/node/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeStoreServiceName is the fully-qualified name of the NodeStoreService service.
	NodeStoreServiceName = "node.v1.NodeStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeStoreServiceListNodeProcedure is the fully-qualified name of the NodeStoreService's ListNode
	// RPC.
	NodeStoreServiceListNodeProcedure = "/node.v1.NodeStoreService/ListNode"
)

// NodeStoreServiceClient is a client for the node.v1.NodeStoreService service.
type NodeStoreServiceClient interface {
	ListNode(context.Context, *connect.Request[v1.ListNodeRequest]) (*connect.Response[v1.ListNodeResponse], error)
}

// NewNodeStoreServiceClient constructs a client for the node.v1.NodeStoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodeStoreServiceMethods := v1.File_node_v1_node_proto.Services().ByName("NodeStoreService").Methods()
	return &nodeStoreServiceClient{
		listNode: connect.NewClient[v1.ListNodeRequest, v1.ListNodeResponse](
			httpClient,
			baseURL+NodeStoreServiceListNodeProcedure,
			connect.WithSchema(nodeStoreServiceMethods.ByName("ListNode")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeStoreServiceClient implements NodeStoreServiceClient.
type nodeStoreServiceClient struct {
	listNode *connect.Client[v1.ListNodeRequest, v1.ListNodeResponse]
}

// ListNode calls node.v1.NodeStoreService.ListNode.
func (c *nodeStoreServiceClient) ListNode(ctx context.Context, req *connect.Request[v1.ListNodeRequest]) (*connect.Response[v1.ListNodeResponse], error) {
	return c.listNode.CallUnary(ctx, req)
}

// NodeStoreServiceHandler is an implementation of the node.v1.NodeStoreService service.
type NodeStoreServiceHandler interface {
	ListNode(context.Context, *connect.Request[v1.ListNodeRequest]) (*connect.Response[v1.ListNodeResponse], error)
}

// NewNodeStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeStoreServiceHandler(svc NodeStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeStoreServiceMethods := v1.File_node_v1_node_proto.Services().ByName("NodeStoreService").Methods()
	nodeStoreServiceListNodeHandler := connect.NewUnaryHandler(
		NodeStoreServiceListNodeProcedure,
		svc.ListNode,
		connect.WithSchema(nodeStoreServiceMethods.ByName("ListNode")),
		connect.WithHandlerOptions(opts...),
	)
	return "/node.v1.NodeStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeStoreServiceListNodeProcedure:
			nodeStoreServiceListNodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeStoreServiceHandler struct{}

func (UnimplementedNodeStoreServiceHandler) ListNode(context.Context, *connect.Request[v1.ListNodeRequest]) (*connect.Response[v1.ListNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("node.v1.NodeStoreService.ListNode is not implemented"))
}
