// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: virtual_service_template/v1/virtual_service_template.proto

package virtual_service_templatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaasops/envoy-xds-controller/pkg/api/grpc/virtual_service_template/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VirtualServiceTemplateStoreServiceName is the fully-qualified name of the
	// VirtualServiceTemplateStoreService service.
	VirtualServiceTemplateStoreServiceName = "virtual_service_template.v1.VirtualServiceTemplateStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VirtualServiceTemplateStoreServiceListVirtualServiceTemplatesProcedure is the fully-qualified
	// name of the VirtualServiceTemplateStoreService's ListVirtualServiceTemplates RPC.
	VirtualServiceTemplateStoreServiceListVirtualServiceTemplatesProcedure = "/virtual_service_template.v1.VirtualServiceTemplateStoreService/ListVirtualServiceTemplates"
	// VirtualServiceTemplateStoreServiceFillTemplateProcedure is the fully-qualified name of the
	// VirtualServiceTemplateStoreService's FillTemplate RPC.
	VirtualServiceTemplateStoreServiceFillTemplateProcedure = "/virtual_service_template.v1.VirtualServiceTemplateStoreService/FillTemplate"
)

// VirtualServiceTemplateStoreServiceClient is a client for the
// virtual_service_template.v1.VirtualServiceTemplateStoreService service.
type VirtualServiceTemplateStoreServiceClient interface {
	// Lists all virtual service templates.
	ListVirtualServiceTemplates(context.Context, *connect.Request[v1.ListVirtualServiceTemplatesRequest]) (*connect.Response[v1.ListVirtualServiceTemplatesResponse], error)
	// Fills a template with specific configurations and returns the result.
	FillTemplate(context.Context, *connect.Request[v1.FillTemplateRequest]) (*connect.Response[v1.FillTemplateResponse], error)
}

// NewVirtualServiceTemplateStoreServiceClient constructs a client for the
// virtual_service_template.v1.VirtualServiceTemplateStoreService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualServiceTemplateStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VirtualServiceTemplateStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	virtualServiceTemplateStoreServiceMethods := v1.File_virtual_service_template_v1_virtual_service_template_proto.Services().ByName("VirtualServiceTemplateStoreService").Methods()
	return &virtualServiceTemplateStoreServiceClient{
		listVirtualServiceTemplates: connect.NewClient[v1.ListVirtualServiceTemplatesRequest, v1.ListVirtualServiceTemplatesResponse](
			httpClient,
			baseURL+VirtualServiceTemplateStoreServiceListVirtualServiceTemplatesProcedure,
			connect.WithSchema(virtualServiceTemplateStoreServiceMethods.ByName("ListVirtualServiceTemplates")),
			connect.WithClientOptions(opts...),
		),
		fillTemplate: connect.NewClient[v1.FillTemplateRequest, v1.FillTemplateResponse](
			httpClient,
			baseURL+VirtualServiceTemplateStoreServiceFillTemplateProcedure,
			connect.WithSchema(virtualServiceTemplateStoreServiceMethods.ByName("FillTemplate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// virtualServiceTemplateStoreServiceClient implements VirtualServiceTemplateStoreServiceClient.
type virtualServiceTemplateStoreServiceClient struct {
	listVirtualServiceTemplates *connect.Client[v1.ListVirtualServiceTemplatesRequest, v1.ListVirtualServiceTemplatesResponse]
	fillTemplate                *connect.Client[v1.FillTemplateRequest, v1.FillTemplateResponse]
}

// ListVirtualServiceTemplates calls
// virtual_service_template.v1.VirtualServiceTemplateStoreService.ListVirtualServiceTemplates.
func (c *virtualServiceTemplateStoreServiceClient) ListVirtualServiceTemplates(ctx context.Context, req *connect.Request[v1.ListVirtualServiceTemplatesRequest]) (*connect.Response[v1.ListVirtualServiceTemplatesResponse], error) {
	return c.listVirtualServiceTemplates.CallUnary(ctx, req)
}

// FillTemplate calls virtual_service_template.v1.VirtualServiceTemplateStoreService.FillTemplate.
func (c *virtualServiceTemplateStoreServiceClient) FillTemplate(ctx context.Context, req *connect.Request[v1.FillTemplateRequest]) (*connect.Response[v1.FillTemplateResponse], error) {
	return c.fillTemplate.CallUnary(ctx, req)
}

// VirtualServiceTemplateStoreServiceHandler is an implementation of the
// virtual_service_template.v1.VirtualServiceTemplateStoreService service.
type VirtualServiceTemplateStoreServiceHandler interface {
	// Lists all virtual service templates.
	ListVirtualServiceTemplates(context.Context, *connect.Request[v1.ListVirtualServiceTemplatesRequest]) (*connect.Response[v1.ListVirtualServiceTemplatesResponse], error)
	// Fills a template with specific configurations and returns the result.
	FillTemplate(context.Context, *connect.Request[v1.FillTemplateRequest]) (*connect.Response[v1.FillTemplateResponse], error)
}

// NewVirtualServiceTemplateStoreServiceHandler builds an HTTP handler from the service
// implementation. It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualServiceTemplateStoreServiceHandler(svc VirtualServiceTemplateStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	virtualServiceTemplateStoreServiceMethods := v1.File_virtual_service_template_v1_virtual_service_template_proto.Services().ByName("VirtualServiceTemplateStoreService").Methods()
	virtualServiceTemplateStoreServiceListVirtualServiceTemplatesHandler := connect.NewUnaryHandler(
		VirtualServiceTemplateStoreServiceListVirtualServiceTemplatesProcedure,
		svc.ListVirtualServiceTemplates,
		connect.WithSchema(virtualServiceTemplateStoreServiceMethods.ByName("ListVirtualServiceTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	virtualServiceTemplateStoreServiceFillTemplateHandler := connect.NewUnaryHandler(
		VirtualServiceTemplateStoreServiceFillTemplateProcedure,
		svc.FillTemplate,
		connect.WithSchema(virtualServiceTemplateStoreServiceMethods.ByName("FillTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/virtual_service_template.v1.VirtualServiceTemplateStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VirtualServiceTemplateStoreServiceListVirtualServiceTemplatesProcedure:
			virtualServiceTemplateStoreServiceListVirtualServiceTemplatesHandler.ServeHTTP(w, r)
		case VirtualServiceTemplateStoreServiceFillTemplateProcedure:
			virtualServiceTemplateStoreServiceFillTemplateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVirtualServiceTemplateStoreServiceHandler returns CodeUnimplemented from all
// methods.
type UnimplementedVirtualServiceTemplateStoreServiceHandler struct{}

func (UnimplementedVirtualServiceTemplateStoreServiceHandler) ListVirtualServiceTemplates(context.Context, *connect.Request[v1.ListVirtualServiceTemplatesRequest]) (*connect.Response[v1.ListVirtualServiceTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_service_template.v1.VirtualServiceTemplateStoreService.ListVirtualServiceTemplates is not implemented"))
}

func (UnimplementedVirtualServiceTemplateStoreServiceHandler) FillTemplate(context.Context, *connect.Request[v1.FillTemplateRequest]) (*connect.Response[v1.FillTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_service_template.v1.VirtualServiceTemplateStoreService.FillTemplate is not implemented"))
}
